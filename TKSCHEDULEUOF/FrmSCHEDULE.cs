using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Data.SqlClient;
using System.Configuration;
using FastReport;
using FastReport.Data;
using System.Threading;
using System.Xml;
using System.Xml.Linq;
using System.Xml;
using System.Xml.Linq;
using TKITDLL;
using TKSCHEDULEUOF.ServiceReference1;
using System.Text.RegularExpressions;
using HtmlAgilityPack;
using System.Data.SQLite;

namespace TKSCHEDULEUOF
{
    public partial class FrmSCHEDULE : Form
    {
        int TIMEOUT_LIMITS = 240;      

        //測試ID = "";
        //正式ID =""
        //測試DB DBNAME = "UOFTEST";
        //正式DB DBNAME = "UOF";
        //string COPID = "0f2fd9bc-b645-4aa5-b3d2-3ecfed7848ab";
        string COPID;
        //string COPCHANGEID = "8c637ad2-adcf-48ef-b665-1860eba83566";
        string COPCHANGEID;

        //string PURID = "cbf3035c-2b72-4416-b4b3-534ea8763460";
        string PURID;
        string DBNAME = "UOF";

        string OLDTASK_ID = null;
        string NEWTASK_ID = null;
        string ATTACH_ID = null;
        string COPTCUDF01 = "N";

        SqlConnection sqlConn = new SqlConnection();
        SqlCommand sqlComm = new SqlCommand();
        string connectionString;
        StringBuilder sbSql = new StringBuilder();
        StringBuilder sbSqlQuery = new StringBuilder();
        SqlDataAdapter adapter1 = new SqlDataAdapter();
        SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
        SqlDataAdapter adapter2 = new SqlDataAdapter();
        SqlCommandBuilder sqlCmdBuilder2 = new SqlCommandBuilder();
        SqlDataAdapter adapter3 = new SqlDataAdapter();
        SqlCommandBuilder sqlCmdBuilder3 = new SqlCommandBuilder();
        SqlDataAdapter adapter4 = new SqlDataAdapter();
        SqlCommandBuilder sqlCmdBuilder4 = new SqlCommandBuilder();
        SqlDataAdapter adapter5 = new SqlDataAdapter();
        SqlCommandBuilder sqlCmdBuilder5 = new SqlCommandBuilder();
        SqlDataAdapter adapter6 = new SqlDataAdapter();
        SqlCommandBuilder sqlCmdBuilder6 = new SqlCommandBuilder();
        SqlDataAdapter adapter7 = new SqlDataAdapter();
        SqlCommandBuilder sqlCmdBuilder7 = new SqlCommandBuilder();
        SqlDataAdapter adapter8 = new SqlDataAdapter();
        SqlCommandBuilder sqlCmdBuilder8 = new SqlCommandBuilder();

        SqlTransaction tran;
        SqlCommand cmd = new SqlCommand();
        int result;
        DataSet ds1 = new DataSet();
        DataSet ds2 = new DataSet();
        DataSet ds3 = new DataSet();
        DataSet ds4 = new DataSet();
        DataSet ds5 = new DataSet();
        DataSet ds6 = new DataSet();
        DataSet ds7 = new DataSet();
        DataSet ds8 = new DataSet();

        /// <summary>
        /// 製一線桶數 BASELIMITHRSBAR1
        /// 製二線桶數 BASELIMITHRSBAR2
        /// 包裝線稼動率時數 BASELIMITHRS9
        /// 製一線稼動率時數 BASELIMITHRS1
        /// 製二線稼動率時數 BASELIMITHRS2
        /// 手工線稼動率時數 BASELIMITHRS3
        /// </summary>
        decimal BASELIMITHRSBAR1 = 0;
        decimal BASELIMITHRSBAR2 = 0;
        decimal BASELIMITHRS1 = 0;
        decimal BASELIMITHRS2 = 0;
        decimal BASELIMITHRS3 = 0;
        decimal BASELIMITHRS9 = 0;

        
        public FrmSCHEDULE()
        {
            InitializeComponent();

           
        }
        private void FrmSCHEDULE_Load(object sender, EventArgs e)
        {
            timer1.Enabled = true;
            timer1.Interval = 1000 * 60; // 1 分鐘
            timer1.Start();

            timer2.Enabled = true;
            timer2.Interval = 1000 * 60; // 1 分鐘
            timer2.Start();

            timer3.Enabled = true;
            timer3.Interval = 1000 * 60; // 1 分鐘
            timer3.Start();

            timer4.Enabled = true;
            timer4.Interval = 1000 * 60*5; // 5 分鐘
            timer4.Start();

            timer5.Enabled = true;
            timer5.Interval = 1000 * 60 * 60; // 1 小時
            timer5.Start();
        }

        

        /// <summary>
        /// 每分鐘檢查1次，但每天指定時間執行1次
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timer1_Tick(object sender, EventArgs e)
        {
            //每天執行1次

            label2.Text = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");

            string RUNTIME = DateTime.Now.ToString("HHmm");
            string HHmm = "0810";

            // DayOfWeek 0 開始 (表示星期日) 到 6 (表示星期六)
            string RUNDATE = DateTime.Now.DayOfWeek.ToString("d");//tmp2 = 4 
            string date = "1";


            if (RUNTIME.Equals(HHmm))
            {
                try
                {
                    BASELIMITHRSBAR1 = SEARCHBASELIMITHRS("製一線桶數");
                    BASELIMITHRSBAR1 = Math.Round(BASELIMITHRSBAR1, 0);
                    BASELIMITHRSBAR2 = SEARCHBASELIMITHRS("製二線桶數");
                    BASELIMITHRSBAR2 = Math.Round(BASELIMITHRSBAR2, 0);

                    BASELIMITHRS1 = SEARCHBASELIMITHRS("製一線稼動率時數");
                    BASELIMITHRS2 = SEARCHBASELIMITHRS("製二線稼動率時數");
                    BASELIMITHRS3 = SEARCHBASELIMITHRS("手工線稼動率時數");
                    BASELIMITHRS9 = SEARCHBASELIMITHRS("包裝線稼動率時數");

                    ADDTOUOFTB_EIP_SCH_MEMO_MOC(DateTime.Now.ToString("yyyyMMdd"));
                    ADDTOUOFTB_EIP_SCH_MEMO_PUR(DateTime.Now.ToString("yyyyMMdd"));
                    ADDTOUOFTB_EIP_SCH_MEMO_COP(DateTime.Now.ToString("yyyyMMdd"));
                }
                catch { }
                
                //UPDATEtb_COMPANYSTATUS1();
                //UPDATEtb_COMPANYSTATUS2();
                //UPDATEtb_COMPANYOWNER_ID();
                //ADDtb_COMPANY();
            }
        }
        /// <summary>
        /// 每分鐘檢查1次，並每分鐘執行1次
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timer2_Tick(object sender, EventArgs e)
        {
            //每天鐘執行1次

            try
            {               
                UPDATE_COPTD_UDF01();
            }
            catch { }

            try
            {
                //ERP-訂單明細補生產預設=N
                //COPTD的UDF01，空白=N

                UPDATE_COPTD_UDF01();
            }
            catch { }
           
            try
            {
                //ERP託外進貨>轉入UOF簽核
                //PURMOCA2.進貨-託外進貨品質驗收單

                NEWPUR_MOCTH_MOCTI();
            }
            catch { }


            // 轉入1004.總務修繕單
            // 存到 [TKGAFFAIRS].[dbo].[UOFGAFIXSNEW]
            //ADD_UOFGAFIXSNEW();
            try
            {
                ADD_UOFGAFIXSNEW();
            }
            catch { }

            // ADD_TK_MOC_REPORTMOCBOMPROCESS_REPORTMOCBOMORIPROCESS(); 將ERP的品號匯入到TKMOC的生產說明中
            // 存到  [TKMOC].[dbo].[REPORTMOCBOMPROCESS]
            try
            {
                ADD_TK_MOC_REPORTMOCBOMPROCESS_REPORTMOCBOMORIPROCESS();
            }
            catch { }

            //ADD_TK_ZINVMBBAKING ERP烘培品號轉入簽核表
            //存到 [TK].[dbo].[ZINVMBBAKING]
            try
            {
                ADD_TK_ZINVMBBAKING();
            }
            catch { }

            //ADD_TKPUR_PURVERSIONSNUMS 更新版費
            //採購更新版費
            try
            {
                ADD_TKPUR_PURVERSIONSNUMS();
            }
            catch { }

            //ADD_TKPUR_PURMODELSNUMS() 更新模具費
            //採購更新模具費
            try
            {
                ADD_TKPUR_PURMODELSNUMS();
            }
            catch { }

            //UOF簽核後，產生活動代號到暫存的[TK].[dbo].[Z_POSSET]，再由[TK].[dbo].[Z_POSSET]去更新POS機資料
            //UOF簽核後，POS活動就更新到各台POS機，用 鼎新 的ERP機制
            try
            {
                NEW_POSET();
            }
            catch { }

            //請購變更單，UOF核準後，自動判斷是否有採購單，如果有就產生採購變購單
            //採購要自動依請購變更單來產生採購變購單
            //但是前題要先有該請購單的採購，而且採購變購單一次只能新增1張，避免饜照先後順序更改

            try
            {
                //已產生請購變更單並確認，但未產生採購變更單時，補產生採購變更單
                //不用，因為有發生「請購單變更單已確認，但是請購變更資料是錯誤的，就不用產生對應的採購變更單」
                //NEWPURTEPURTF_ERP();
            }
            catch { }

            //ERP客戶轉UOF表單-1001客戶基本資料表
            //定時將ERP的新客戶資料，拋到UOF的「1001.客戶基本資料表」，產生客戶基本資料，含「信用額度」
            try
            {
                ADD_UOF_COPMA_1001();
            }
            catch { }

            //轉入1006委外送驗申請單
            //將資料存到 [TKQC].[dbo].[TBUOFQC1006]
            try
            {
                NEWUOFQC1006();
            }
            catch { }

            //更新銷貨代收貨款
            //COPTG的TG113<>TG045+TG046就更新
            try
            {
                UPDATE_TK_COPTGTG113();
            }
            catch { }

            //更新 工程品號基本資料檔
            //更新BOMMI
            //當MI001 =MB001 AND MI004<> MB004
            //MI001=MB001 AND MI002<> MB002
            try
            {
                UPDATE_TK_BOMMI();
            }
            catch { }

            //官網訂單，依TC054 收貨部門，更改TC010=3大超商的總倉地址 、TC011=指定收貨的門市地址 
            //更新COPTG，用收貨部門更新成3大超商的總倉地址、指定收貨的門市地址 
            try
            {
                COPTC_TC010_TC011_UPDATE();
            }
            catch { }

            //轉入  行銷廣告的活動成效記錄表
            //用UOF表單「年節/產品活動或價格事宜」，產生活動記錄
            try
            {
                ADD_TBPROMOTIONNFEE();
            }
            catch { }

            //轉入ERP的品到EBOM中
            //存到 [TK].[dbo].[BOMMI]
            try
            {
                NEW_BOMMI();
            }
            catch { }

            //轉出工程EBOM表
            //送到UOF「BOM11.EBOM表」的表單簽核          
            try
            {
                NEW_BOMMJ_BOMMK();
            }
            catch { }


            //轉出BOM表
            //送到UOF「BOM02.BOM表」的表單簽核        
            try
            {
                NEW_BOMMC_BOMMD();
            }
            catch { }

            //轉入10.行企類表單 1002.產品設計申請 的資料
            //存到 [TKRESEARCH].[dbo].[TK_UOF_DESIGN_1002]
            try
            {
                NEW_TKRESEARCH_TK_UOF_DESIGN_1002();
            }
            catch { }


            //轉入13.研發類表單:1002.設計需求內容清單
            //存到  [TKRESEARCH].[dbo].[TK_UOF_RESEARCH_1002]
            try
            {
                NEW_TKRESEARCH_TK_UOF_RESEARCH_1002();
            }
            catch { }

            //暫停不轉入總務的外掛
            //改轉入UOF表單 1005.雜項採購單中 
            //NEWBUYITEM();

            //把UOF的1003.雜項請購單，在核成後，轉到UOF的 	1005.雜項採購單
            //try
            //{
            //    //ADD_UOF_FORM_GRAFFIRS_1005();
            //}
            //catch { }


            //把UOF的1005.雜項採購單 ，在核成後
            //轉到 [TKGAFFAIRS].[dbo].[BUYITEMREPORTS] 當報表
            try
            {
                ADD_TKGAFFAIRS_BUYITEMREPORTS();
            }
            catch { }



            //品保 「1002.客訴異常處理單 」 轉到 「1001.客訴品質異常處理單」
            //需要「1002.客訴異常處理單」是成立的，且要生產部門持續改善的項目S
            try
            {
                ADD_TO_UOF_QC1001();
            }
            catch { }

            ////停用
            ////MOCI02.製令單 
            ////將製令單，轉到UOF「MOCI02.製令單」做簽核
            //try
            //{
            //    ADDUOFMOCTAMOCTB();
            //}
            //catch { }

            ////停用
            ////ASTI02.資產資料建立作業
            ////將ASTI02.資產資料建立作業 資料轉到UOF「ASTI02.資產資料建立作業」做簽核
            ////
            //try
            //{
            //    ADDUOFASTMBASTMC();
            //}
            //catch { }

            ////停用
            ////ERP報價單
            //try
            //{
            //    ADDCOPMACOPMBCOPMC();
            //}
            //catch { }


            //ERP請購單
            //將ERP的 請購資料，轉到UOF「PUR10.請購單申請」做簽核
            try
            {
                ADDTOUOFPURTAB();

            }
            catch { }


            //1001.門店督導表 
            //將UOF的「1001.門店督導表 」，到 [TKMK].[dbo].[TBSTORESCHECK]
            try
            {
                ADDTKMKdboTBSTORESCHECK();

            }
            catch { }


            //20230721 暫停
            ////心得訓練單
            //try
            //{
            //    CHECKADDTOUOFFORMEDUCATION();
            //}
            //catch { }

            //20230721 暫停
            ////出差報告單 
            //try
            //{
            //    CHECKADDTOUOFFORBUSINESSTRIPS();
            //}
            //catch { }
            
           

            //採購單
            //轉到UOF「PUR40.採購單」做簽核
            try
            {
                NEWPURTCPURTD();
            }
            catch { }


            //採購變更單
            //轉到UOF「PUR50.採購變更單 」做簽核
            try
            {
                NEWPURTEPURTF();
            }
            catch { }


            //採購核價單
            //轉到UOF「PUR30..採購核價單 」做簽核
            try
            {
                NEWPURTLPURTMPURTN();
            }
            catch { }

            //20250117 停用
            ////轉入品保檢驗
            ////轉到 [TKQC].[dbo].[QCPURTH] 做記錄
            //try
            //{
            //    ADDTKQCQCPURTH();
            //}
            //catch { }


            //轉品保UOF驗收表單
            //將進貨單轉到UOF「PURA0.進貨-進貨品質驗收單」做簽核
            try
            {
                NEWPURTGPURTH();
            }
            catch { }


            //轉BOM表變更單
            //將BOM表轉到UOF「BOM10.BOM變更單」做簽核
            try
            {
                NEWBOMTABOMTBBOMTC();
            }
            catch { }


            //轉入品保的進貨檢驗單
            //存到[TKQC].[dbo].[UOFQCPURTGPURTH]做記錄
            try
            {
                ADDTKQCUOFQCPURTGPURTH();
            }
            catch { }


            //A11A客供入料單同進貨單跑進貨驗收流程
            //轉到UOF「PURA1.客供進貨-進貨品質驗收單」做簽核
            try
            {
                ADDUOFQCINVTAINVTB();
            }
            catch { }

            //try
            //{
            //    ADDCOPTECOPTF();
            //    ADDCOPTECOPTF();
            //}
            //catch { }



            //UPDATE_TB_WKF_TASK_TASK_RESULT();

        }

        /// <summary>
        /// 每分鐘檢查1次，但每天指定時間執行1次
        /// 0801
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timer3_Tick(object sender, EventArgs e)
        {
            string RUNTIME = DateTime.Now.ToString("HHmm");
            string HHmm = "0810";

            if (RUNTIME.Equals(HHmm))
            {
                try
                {

                }
                catch { }

                try
                {
                    //ERP品號變更通知單
                    ADD_ERP_INVMB_TO_UOF_9002();
                }
                catch { }
              
                try
                {

                    //轉入資料來客-X:\kldatabase.db
                    //要指定來客記錄的db的磁碟-X:\kldatabase.db
                    //X=\\192.168.1.101\Users\Administrator\AppData\Roaming\CounterServerData

                    ADDTKMKt_visitors();
                }
                catch { }

                try
                {
                    //ERP品號通知單
                    //此表單為研發建立商品品號時
                    //通知營銷、業務主管
                    //該品號在ERP設定的標準售價、零售價、IP價格、DM價格、通路售價

                    //如需修改，請通知研發在ERP上修改

                    ADD_ERP_INVMB_TO_UOF_9001();

                }
                catch { }

                try
                {
                    //UOF-採購及變更單作廢
                    //依UOF作廢的採購及變更單，修改ERP的採購及變更單作廢
                    UPDATE_UOF_NOT_APPROVED_PURTC_PURTE();
                }
                catch { }

                try
                {
                    //把UOF的1003.雜項請購單，在核成後，轉到UOF的 	1005.雜項採購單
                    //請購單的廠商是未指定=空白
                    string DEFAUL_NAME = "王嘩芝";
                    ADD_UOF_FORM_GRAFFIRS_1005_GG004_NULL(DEFAUL_NAME);                    
                }
                catch { }

                try
                {
                    //會依請購單的廠商有指定，合併採購單
                    string DEFAUL_NAME = "王嘩芝";
                    string ACCOUNT = "000002";
                    ADD_UOF_FORM_GRAFFIRS_1005_GG004_NOT_NULL(ACCOUNT, DEFAUL_NAME);                   
                }
                catch { }

                try
                {
                    //當請購單的數量=0，手動結案
                    UPDATE_PURTA_PURTB_TB039();                  
                }
                catch { }

                try
                {                    
                    //當請購單的需求日，已過期1個月，請購數量=0，手動結案
                    UPDATE_PURTA_PURTB_TB039_TB009();
                }
                catch { }

                try
                {
                    //作廢請購變更單不存在
                    //UOF的請購變更單來源，已經不存在[PURTATBCHAGE]
                    //經採購人員確認是多打的才會刪除，用TKPUR的「FrmPURTECHANGEDEL 」 採購變更刪除錯的請購變更

                    UPDATE_UOF_PUR20_TASK_RESULT();
                }
                catch { }

            }
        }
        /// <summary>
        /// 每5分執行1次
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timer4_Tick(object sender, EventArgs e)
        {
            try
            {
               
            }
            catch { }

            try
            {
                //更新附件 GA1005
                UPDATE_UOF_GA1005_ATTACH_ID();
                //更新附件 QC1001
                UPDATE_UOF_QC1001_ATTACH_ID();
            }
            catch { }

            try
            {
                //2001.產品開發+包裝設計申請單
                NEW_TO_TKRESEARCH_TB_PROJECTS_PRODUCTS();
            }
            catch { }           

            try
            {
                //TKUOF.TRIGGER.COPTAB.EndFormTrigger
                //ERP-COPTAB報價單簽核

                UPDATE_COPTA_COPTB();
            }
            catch { }
            try
            {
                //TKUOF.TRIGGER.COPTCD.EndFormTrigger
                //ERP-COPTCD訂單主管簽核

                UPDATE_COPTC_COPTD();
            }
            catch { }
            try
            {
                //TKUOF.TRIGGER.COPTEF.EndFormTrigger
                //ERP-COPTEF訂單變更主管簽核

                UPDATE_COPTE_COPTF();
            }
            catch { }
            try
            {
                //TKUOF.TRIGGER.DEVSAMPLE.EndFormTrigger
                //1004.無品號試吃製作申請單
                //將1004.無品號試吃製作申請單轉到TKRESEARCH_TBSAMPLE中

                ADD_TKRESEARCH_TBSAMPLE();
            }
            catch { }
            try
            {
                //TKUOF.TRIGGER.PURTAB.EndFormTrigger
                //ERP-PURTAB-請購單申請V2

                UPDATE_PURTA_PORTB();
            }
            catch { }
            try
            {
                //TKUOF.TRIGGER.PURTABCHANGE.EndFormTrigger
                //PUR20.請購單變更單

                UPDATE_PURTA_PURTB_CHANGE();
            }
            catch { }
            try
            {
                //ERP-PURTCPURTD採購單簽核
                //TKUOF.TRIGGER.PURTCPURTD.EndFormTrigger

                UPDATE_PURTC_PURTD();
            }
            catch { }
            try
            {
                //ERP-PURTEPURTF採購變更單簽核
                //TKUOF.TRIGGER.PURTEPURTF.EndFormTrigger

                UPDATE_PURTE_PURTF();
            }
            catch { }
            try
            {
                //ERP-PURTLPURTMPURTN採購核價單
                //TKUOF.TRIGGER.PURTLPURTMPURTN.EndFormTrigger

                UPDATE_PURTL_PURTM_PURTN();
            }
            catch { }
            try
            {
                 //PURA1.客供進貨-進貨品質驗收單
                //ERP-QCINVTAINVTB-QC客供單進貨檢驗
                //TKUOF.TRIGGER.QCINVTAINVTB.EndFormTrigger

                UPDATE_INVTB_QC_CHECKS();
            }
            catch { }
            try
            {
                //ERP-QCPURTGPURTH品保檢驗進貨單明細
                //TKUOF.TRIGGER.QCPURTGPURTH.EndFormTrigger

                UPDATE_PURTH_QC_CHECKS();
            }
            catch { }
       
           

            //TEST
            //MessageBox.Show($"執行任務: {DateTime.Now}");
        }
        /// <summary>
        /// 每1小時執行
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timer5_Tick(object sender, EventArgs e)
        {
            try
            {


            }
            catch { }
            try
            {
                //把UOF的1003.雜項請購單，在核成後，轉到UOF的 	1005.雜項採購單
                //請購單的廠商是未指定=空白
                string DEFAUL_NAME = "王嘩芝";
                ADD_UOF_FORM_GRAFFIRS_1005_GG004_NULL(DEFAUL_NAME);
            }
            catch { }
            try
            {
                //客供重起單
                ADDUOFQCINVTAINVTB_AGAIN_APPLY();
            }
            catch { }
            try
            {
                //託外進貨重起單
                NEWPUR_MOCTH_MOCTI_AGAIN_APPLY();

            }
            catch { }
            try
            {
                //(重發)ERP進貨>轉入UOF
                //因為UOF從資料庫起單，有時會因UOF排程失敗，所以每1小時檢查起單失敗的進貨單，重發
                //更新UDF01=Y，就可以用  NEWPURTGPURTH() 重新起單
                NEWPURTGPURTH_AGAIN_APPLY();
            }
            catch { }
            try
            {
                //更新 2001A.產品開發+包裝設計申請單(行企專用)
                UPDATE_TB_PROJECTS_PRODUCTS_DESIGNER();
            }
            catch { }
            try
            {
                //2001A.產品開發+包裝設計申請單(行企專用)
                //原始來源=2001.產品開發+包裝設計申請單
                //當行企主管必需，先指定「指定設計人員(由行企主管指定)」
                ADD_UOF_FORM_2001A_TB_PROJECTS_PRODUCTS();
            }
            catch { }
        }
        #region FUNCTION

        //
        public decimal SEARCHBASELIMITHRS(string id)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string sql = @"SELECT [LIMITHRS] FROM [TKMOC].[dbo].[BASELIMITHRS] WHERE [ID]=@ID";

                    using (SqlCommand cmd = new SqlCommand(sql, sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@ID", id);

                        sqlConn.Open();
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                return reader.GetDecimal(reader.GetOrdinal("LIMITHRS"));
                            }
                        }
                    }
                }

                return 0;
            }
            catch
            {
                return 0;
            }
        }


        public string SEARCHFORM_UOF_VERSION_ID(string formName)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string sql = @"
                                SELECT TOP 1 RTRIM(LTRIM(FORM_VERSION_ID)) AS FORM_VERSION_ID
                                FROM [UOF].dbo.TB_WKF_FORM_VERSION V
                                JOIN [UOF].dbo.TB_WKF_FORM F ON V.FORM_ID = F.FORM_ID
                                WHERE V.ISSUE_CTL = 1
                                    AND F.FORM_NAME = @FORM_NAME
                                ORDER BY V.FORM_ID, V.VERSION DESC";

                    using (SqlCommand cmd = new SqlCommand(sql, sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@FORM_NAME", formName);

                        sqlConn.Open();
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                return reader["FORM_VERSION_ID"].ToString();
                            }
                        }
                    }
                }

                return "";
            }
            catch
            {
                return "";
            }
        }


        public void ADDTOUOFTB_EIP_SCH_MEMO_MOC(string Sday)
        {
            try
            {
                var dsList = new List<DataSet> {
                SEARCHMANULINE(Sday),
                SEARCHMANULINE2(Sday),
                SEARCHMANULINE3(Sday),
                SEARCHMANULINE4(Sday)
                };

                // SQL Conn & Tran
                var TKID = new Class1();
                var sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
               

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (var tran = sqlConn.BeginTransaction())
                    {
                        try
                        {
                            // 刪除資料
                            string[] users = {
                                "7774b96c-6762-45ef-b9d1-fcd718854e9f",
                                "5ce0f554-8b80-4aed-afea-fcd224cecb81",
                                "0c98530a-b467-4cd4-a411-7279f1e04d0d",
                                "88789ece-41d1-4b48-94f1-6ffab05b05f4"
                            };

                            string deleteSql = "DELETE FROM [UOF].[dbo].[TB_EIP_SCH_MEMO] WHERE CONVERT(NVARCHAR,[START_TIME],112) >= @Sday AND [CREATE_USER] = @User";
                            foreach (var user in users)
                            {
                                using (SqlCommand delCmd = new SqlCommand(deleteSql, sqlConn, tran))
                                {
                                    delCmd.Parameters.AddWithValue("@Sday", Sday);
                                    delCmd.Parameters.AddWithValue("@User", user);
                                    delCmd.ExecuteNonQuery();
                                }
                            }

                            // 新增資料
                            foreach (var ds in dsList)
                            {
                                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                                {
                                    InsertToUOF_TB_EIP_SCH_MEMO(ds.Tables[0], sqlConn, tran);
                                }
                            }

                            tran.Commit();
                        }
                        catch (Exception ex)
                        {
                            tran.Rollback();
                            //throw new Exception("UOF MEMO 交易失敗：" + ex.Message);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 可用 Log 寫入錯誤 ex.ToString()
               // Console.WriteLine($"發生錯誤：{ex.Message}");
            }
        }
        private void InsertToUOF_TB_EIP_SCH_MEMO(DataTable table, SqlConnection conn, SqlTransaction tran)
        {
            string insertSql = @"
                INSERT INTO [UOF].[dbo].[TB_EIP_SCH_MEMO]
                ([CREATE_TIME],[CREATE_USER],[DESCRIPTION],[END_TIME],[MEMO_GUID],[PERSONAL_TYPE],[REPEAT_GUID],[START_TIME],[SUBJECT],[REMINDER_GUID],[ALL_DAY],[OWNER],[UID],[ICS_GUID])
                VALUES
                (@CREATE_TIME,@CREATE_USER,@DESCRIPTION,@END_TIME,@MEMO_GUID,@PERSONAL_TYPE,@REPEAT_GUID,@START_TIME,@SUBJECT,@REMINDER_GUID,@ALL_DAY,@OWNER,@UID,@ICS_GUID)";

                    using (SqlCommand cmd = new SqlCommand(insertSql, conn, tran))
                    {
                        foreach (DataRow dr in table.Rows)
                        {
                            cmd.Parameters.Clear();
                            cmd.Parameters.AddWithValue("@CREATE_TIME", dr["CREATE_TIME"]);
                            cmd.Parameters.AddWithValue("@CREATE_USER", dr["CREATE_USER"]);
                            cmd.Parameters.AddWithValue("@DESCRIPTION", dr["DESCRIPTION"]);
                            cmd.Parameters.AddWithValue("@END_TIME", dr["END_TIME"]);
                            cmd.Parameters.AddWithValue("@MEMO_GUID", dr["MEMO_GUID"]);
                            cmd.Parameters.AddWithValue("@PERSONAL_TYPE", dr["PERSONAL_TYPE"]);
                            cmd.Parameters.AddWithValue("@REPEAT_GUID", dr["REPEAT_GUID"]);
                            cmd.Parameters.AddWithValue("@START_TIME", dr["START_TIME"]);
                            cmd.Parameters.AddWithValue("@SUBJECT", dr["SUBJECT"]);
                            cmd.Parameters.AddWithValue("@REMINDER_GUID", dr["REMINDER_GUID"]);
                            cmd.Parameters.AddWithValue("@ALL_DAY", dr["ALL_DAY"]);
                            cmd.Parameters.AddWithValue("@OWNER", dr["OWNER"]);
                            cmd.Parameters.AddWithValue("@UID", dr["UID"]);
                            cmd.Parameters.AddWithValue("@ICS_GUID", dr["ICS_GUID"]);
                            cmd.ExecuteNonQuery();
                        }
                    }
        }

        //製一線、製二線的桶數
        public DataSet SEARCHMANULINE(string Sday)
        {
            DataSet ds1 = new DataSet();

            try
            {
                Class1 TKID = new Class1();// 解密類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@"
                                        SELECT [CREATE_TIME],[CREATE_USER],[DESCRIPTION],[END_TIME],[MEMO_GUID],[PERSONAL_TYPE],[REPEAT_GUID],[START_TIME],[SUBJECT],[REMINDER_GUID],[ALL_DAY],[OWNER],[UID],[ICS_GUID]
                                        FROM (
                                            SELECT 
                                                CONVERT(varchar(100),GETDATE(),21) AS [CREATE_TIME],
                                                '0c98530a-b467-4cd4-a411-7279f1e04d0d' AS [CREATE_USER],
                                                [MOCMANULINE].[MANU]+'-'+CONVERT(NVARCHAR,CONVERT(DECIMAL(14,2),SUM([BAR])))+'桶數/每日可做{1}桶 ' AS [DESCRIPTION],
                                                CONVERT(NVARCHAR,[MANUDATE],112) AS [END_TIME],
                                                NEWID() AS [MEMO_GUID],
                                                'Display' AS [PERSONAL_TYPE],
                                                NULL AS [REPEAT_GUID],
                                                CONVERT(varchar(100),DATEADD(second,1,[MANUDATE]),21) AS [START_TIME],
                                                [MOCMANULINE].[MANU]+'---'+CONVERT(NVARCHAR,CONVERT(DECIMAL(14,2),SUM([BAR])))+'桶數/每日可做{1}桶 ' AS [SUBJECT],
                                                NULL AS [REMINDER_GUID],
                                                '1' AS [ALL_DAY],
                                                '0c98530a-b467-4cd4-a411-7279f1e04d0d' AS [OWNER],
                                                NULL AS [UID],
                                                NULL AS [ICS_GUID]
                                            FROM [TKMOC].[dbo].[MOCMANULINE], [TK].dbo.INVMB
                                            LEFT JOIN [TKMOC].[dbo].[PREINVMBMANU] ON [PREINVMBMANU].MB001=INVMB.MB001 AND [PREINVMBMANU].MANU LIKE '%製一線%'
                                            WHERE INVMB.MB001 = MOCMANULINE.MB001 
                                            AND CONVERT(NVARCHAR,[MANUDATE],112) >= '{0}'
                                            AND [MOCMANULINE].[MANU] = '製一線'
                                            AND [MOCMANULINE].[MB001] NOT IN (SELECT MB001 FROM [TKMOC].[dbo].[MOCMANULINELIMITBARCOUNT])
                                            GROUP BY [MOCMANULINE].[MANU],[MANUDATE]

                                            UNION

                                            SELECT 
                                                CONVERT(varchar(100),GETDATE(),21) AS [CREATE_TIME],
                                                '5ce0f554-8b80-4aed-afea-fcd224cecb81' AS [CREATE_USER],
                                                [MOCMANULINE].[MANU]+'-'+CONVERT(NVARCHAR,CONVERT(DECIMAL(14,2),SUM([BAR])))+'桶數/每日可做{2}桶 ' AS [DESCRIPTION],
                                                CONVERT(NVARCHAR,[MANUDATE],112) AS [END_TIME],
                                                NEWID() AS [MEMO_GUID],
                                                'Display' AS [PERSONAL_TYPE],
                                                NULL AS [REPEAT_GUID],
                                                CONVERT(varchar(100),DATEADD(second,1,[MANUDATE]),21) AS [START_TIME],
                                                [MOCMANULINE].[MANU]+'---'+CONVERT(NVARCHAR,CONVERT(DECIMAL(14,2),SUM([BAR])))+'桶數/每日可做{2}桶 ' AS [SUBJECT],
                                                NULL AS [REMINDER_GUID],
                                                '1' AS [ALL_DAY],
                                                '5ce0f554-8b80-4aed-afea-fcd224cecb81' AS [OWNER],
                                                NULL AS [UID],
                                                NULL AS [ICS_GUID]
                                            FROM [TKMOC].[dbo].[MOCMANULINE], [TK].dbo.INVMB
                                            LEFT JOIN [TKMOC].[dbo].[PREINVMBMANU] ON [PREINVMBMANU].MB001=INVMB.MB001 AND [PREINVMBMANU].MANU LIKE '%製二線%'
                                            WHERE INVMB.MB001 = MOCMANULINE.MB001   
                                            AND CONVERT(NVARCHAR,[MANUDATE],112) >= '{0}'
                                            AND [MOCMANULINE].[MANU] = '製二線'
                                            AND [MOCMANULINE].[MB001] NOT IN (SELECT MB001 FROM [TKMOC].[dbo].[MOCMANULINELIMITBARCOUNT])
                                            GROUP BY [MOCMANULINE].[MANU],[MANUDATE]
                                        ) AS TEMP
                                        ORDER BY [START_TIME],[SUBJECT]
                                    ", Sday, BASELIMITHRSBAR1, BASELIMITHRSBAR2);

                                            using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                                            {
                                                ds1.Clear();
                                                adapter1.Fill(ds1, "ds1");
                                            }
                                        }

                                        return ds1;
                                    }
                                    catch
                                    {
                                        return new DataSet();
                                    }
                                }

        //包裝線、製一線、製二線、手工線的總工時
        public DataSet SEARCHMANULINE2(string Sday)
        {
            DataSet ds2 = new DataSet();

            try
            {
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@"
                                        SELECT [CREATE_TIME],[CREATE_USER],[DESCRIPTION],[END_TIME],[MEMO_GUID],[PERSONAL_TYPE],[REPEAT_GUID],[START_TIME],[SUBJECT],[REMINDER_GUID],[ALL_DAY],[OWNER],[UID],[ICS_GUID]
                                        FROM (
                                            SELECT CONVERT(varchar(100),GETDATE(),21) AS [CREATE_TIME],
                                                '7774b96c-6762-45ef-b9d1-fcd718854e9f' AS [CREATE_USER],
                                                [MOCMANULINE].[MANU]+'-總工時-'+CONVERT(nvarchar,SUM(CONVERT(DECIMAL(12,2),ISNULL(ROUND(([PACKAGE]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))))+'小時 ' AS [DESCRIPTION],
                                                CONVERT(NVARCHAR,[MANUDATE],112) AS [END_TIME],
                                                NEWID() AS [MEMO_GUID],
                                                'Display' AS [PERSONAL_TYPE],
                                                NULL AS [REPEAT_GUID],
                                                CONVERT(varchar(100),DATEADD(second,2,[MANUDATE]),21) AS [START_TIME],
                                                [MOCMANULINE].[MANU]+'--總工時-'+CONVERT(nvarchar,SUM(CONVERT(DECIMAL(12,2),ISNULL(ROUND(([PACKAGE]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))))+'小時 ' AS [SUBJECT],
                                                NULL AS [REMINDER_GUID],
                                                '1' AS [ALL_DAY],
                                                '7774b96c-6762-45ef-b9d1-fcd718854e9f' AS [OWNER],
                                                NULL AS [UID],
                                                NULL AS [ICS_GUID]
                                            FROM [TKMOC].[dbo].[MOCMANULINE], [TK].dbo.INVMB
                                            LEFT JOIN [TKMOC].[dbo].[PREINVMBMANU] ON [PREINVMBMANU].MB001 = INVMB.MB001 AND [PREINVMBMANU].MANU LIKE '%包裝%'
                                            WHERE INVMB.MB001 = MOCMANULINE.MB001   
                                                AND CONVERT(NVARCHAR,[MANUDATE],112) >= '{0}'
                                                AND [MOCMANULINE].[MANU] = '包裝線'
                                            GROUP BY [MOCMANULINE].[MANU], [MANUDATE]

                                            UNION

                                            SELECT CONVERT(varchar(100),GETDATE(),21) AS [CREATE_TIME],
                                                '0c98530a-b467-4cd4-a411-7279f1e04d0d' AS [CREATE_USER],
                                                [MOCMANULINE].[MANU]+'-總工時-'+CONVERT(nvarchar,SUM(CONVERT(DECIMAL(12,2),ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))))+'小時 ' AS [DESCRIPTION],
                                                CONVERT(NVARCHAR,[MANUDATE],112) AS [END_TIME],
                                                NEWID() AS [MEMO_GUID],
                                                'Display' AS [PERSONAL_TYPE],
                                                NULL AS [REPEAT_GUID],
                                                CONVERT(varchar(100),DATEADD(second,2,[MANUDATE]),21) AS [START_TIME],
                                                [MOCMANULINE].[MANU]+'--總工時-'+CONVERT(nvarchar,SUM(CONVERT(DECIMAL(12,2),ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))))+'小時 ' AS [SUBJECT],
                                                NULL AS [REMINDER_GUID],
                                                '1' AS [ALL_DAY],
                                                '0c98530a-b467-4cd4-a411-7279f1e04d0d' AS [OWNER],
                                                NULL AS [UID],
                                                NULL AS [ICS_GUID]
                                            FROM [TKMOC].[dbo].[MOCMANULINE], [TK].dbo.INVMB
                                            LEFT JOIN [TKMOC].[dbo].[PREINVMBMANU] ON [PREINVMBMANU].MB001 = INVMB.MB001 AND [PREINVMBMANU].MANU LIKE '%製一線%'
                                            WHERE INVMB.MB001 = MOCMANULINE.MB001 
                                                AND CONVERT(NVARCHAR,[MANUDATE],112) >= '{0}' 
                                                AND [MOCMANULINE].[MANU] = '製一線'
                                            GROUP BY [MOCMANULINE].[MANU], [MANUDATE]

                                            UNION

                                            SELECT CONVERT(varchar(100),GETDATE(),21) AS [CREATE_TIME],
                                                '5ce0f554-8b80-4aed-afea-fcd224cecb81' AS [CREATE_USER],
                                                [MOCMANULINE].[MANU]+'-總工時-'+CONVERT(nvarchar,SUM(CONVERT(DECIMAL(12,2),ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))))+'小時 ' AS [DESCRIPTION],
                                                CONVERT(NVARCHAR,[MANUDATE],112) AS [END_TIME],
                                                NEWID() AS [MEMO_GUID],
                                                'Display' AS [PERSONAL_TYPE],
                                                NULL AS [REPEAT_GUID],
                                                CONVERT(varchar(100),DATEADD(second,2,[MANUDATE]),21) AS [START_TIME],
                                                [MOCMANULINE].[MANU]+'--總工時-'+CONVERT(nvarchar,SUM(CONVERT(DECIMAL(12,2),ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))))+'小時 ' AS [SUBJECT],
                                                NULL AS [REMINDER_GUID],
                                                '1' AS [ALL_DAY],
                                                '5ce0f554-8b80-4aed-afea-fcd224cecb81' AS [OWNER],
                                                NULL AS [UID],
                                                NULL AS [ICS_GUID]
                                            FROM [TKMOC].[dbo].[MOCMANULINE], [TK].dbo.INVMB
                                            LEFT JOIN [TKMOC].[dbo].[PREINVMBMANU] ON [PREINVMBMANU].MB001 = INVMB.MB001 AND [PREINVMBMANU].MANU LIKE '%製二線%'
                                            WHERE INVMB.MB001 = MOCMANULINE.MB001   
                                                AND CONVERT(NVARCHAR,[MANUDATE],112) >= '{0}' 
                                                AND [MOCMANULINE].[MANU] = '製二線'
                                            GROUP BY [MOCMANULINE].[MANU], [MANUDATE]

                                            UNION

                                            SELECT CONVERT(varchar(100),GETDATE(),21) AS [CREATE_TIME],
                                                '88789ece-41d1-4b48-94f1-6ffab05b05f4' AS [CREATE_USER],
                                                [MOCMANULINE].[MANU]+'-總工時-'+CONVERT(nvarchar,SUM(CONVERT(DECIMAL(12,2),ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))))+'小時 ' AS [DESCRIPTION],
                                                CONVERT(NVARCHAR,[MANUDATE],112) AS [END_TIME],
                                                NEWID() AS [MEMO_GUID],
                                                'Display' AS [PERSONAL_TYPE],
                                                NULL AS [REPEAT_GUID],
                                                CONVERT(varchar(100),DATEADD(second,2,[MANUDATE]),21) AS [START_TIME],
                                                [MOCMANULINE].[MANU]+'--總工時-'+CONVERT(nvarchar,SUM(CONVERT(DECIMAL(12,2),ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))))+'小時 ' AS [SUBJECT],
                                                NULL AS [REMINDER_GUID],
                                                '1' AS [ALL_DAY],
                                                '88789ece-41d1-4b48-94f1-6ffab05b05f4' AS [OWNER],
                                                NULL AS [UID],
                                                NULL AS [ICS_GUID]
                                            FROM [TKMOC].[dbo].[MOCMANULINE], [TK].dbo.INVMB
                                            LEFT JOIN [TKMOC].[dbo].[PREINVMBMANU] ON [PREINVMBMANU].MB001 = INVMB.MB001 AND [PREINVMBMANU].MANU LIKE '%手工線%'
                                            WHERE INVMB.MB001 = MOCMANULINE.MB001 
                                                AND CONVERT(NVARCHAR,[MANUDATE],112) >= '{0}' 
                                                AND [MOCMANULINE].[MANU] = '手工線'
                                            GROUP BY [MOCMANULINE].[MANU], [MANUDATE]
                                        ) AS TEMP
                                        ORDER BY [START_TIME], [SUBJECT]
                                    ", Sday);

                    using (SqlDataAdapter adapter2 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        ds2.Clear();
                        sqlConn.Open();
                        adapter2.Fill(ds2, "ds2");
                    }
                }

                return ds2;
            }
            catch
            {
                return new DataSet();
            }
        }


        //包裝線、製一線、製二線、手工線的稼動率
        public DataSet SEARCHMANULINE3(string Sday)
        {
            DataSet ds3 = new DataSet();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@"
                                        SELECT [CREATE_TIME],[CREATE_USER],[DESCRIPTION],[END_TIME],[MEMO_GUID],[PERSONAL_TYPE],[REPEAT_GUID],
                                            [START_TIME],[SUBJECT],[REMINDER_GUID],[ALL_DAY],[OWNER],[UID],[ICS_GUID]
                                        FROM (
                                            SELECT CONVERT(varchar(100),GETDATE(),21) AS [CREATE_TIME],
                                                '7774b96c-6762-45ef-b9d1-fcd718854e9f' AS [CREATE_USER],
                                                [MOCMANULINE].[MANU] + '-稼動率-' + CONVERT(nvarchar, CONVERT(DECIMAL(12,2), SUM(ISNULL(ROUND(([PACKAGE]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))/{4}*100)) + '%' AS [DESCRIPTION],
                                                CONVERT(NVARCHAR,[MANUDATE],112) AS [END_TIME],
                                                NEWID() AS [MEMO_GUID],
                                                'Display' AS [PERSONAL_TYPE],
                                                NULL AS [REPEAT_GUID],
                                                CONVERT(varchar(100), DATEADD(second,3,[MANUDATE]),21) AS [START_TIME],
                                                [MOCMANULINE].[MANU] + '-稼動率-' + CONVERT(nvarchar, CONVERT(DECIMAL(12,2), SUM(ISNULL(ROUND(([PACKAGE]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))/{4}*100)) + '%' AS [SUBJECT],
                                                NULL AS [REMINDER_GUID],
                                                '1' AS [ALL_DAY],
                                                '7774b96c-6762-45ef-b9d1-fcd718854e9f' AS [OWNER],
                                                NULL AS [UID],
                                                NULL AS [ICS_GUID]
                                            FROM [TKMOC].[dbo].[MOCMANULINE], [TK].dbo.INVMB
                                            LEFT JOIN [TKMOC].[dbo].[PREINVMBMANU] 
                                                ON [PREINVMBMANU].MB001 = INVMB.MB001 AND [PREINVMBMANU].MANU LIKE '%包裝%'
                                            WHERE INVMB.MB001 = MOCMANULINE.MB001
                                                AND CONVERT(NVARCHAR,[MANUDATE],112) >= '{0}'
                                                AND [MOCMANULINE].[MANU] = '包裝線'
                                            GROUP BY [MOCMANULINE].[MANU], [MANUDATE]

                                            UNION

                                            SELECT CONVERT(varchar(100),GETDATE(),21),
                                                '0c98530a-b467-4cd4-a411-7279f1e04d0d',
                                                [MOCMANULINE].[MANU] + '-稼動率-' + CONVERT(nvarchar, CONVERT(DECIMAL(12,2), SUM(ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))/{1}*100)) + '%',
                                                CONVERT(NVARCHAR,[MANUDATE],112),
                                                NEWID(),
                                                'Display',
                                                NULL,
                                                CONVERT(varchar(100), DATEADD(second,3,[MANUDATE]),21),
                                                [MOCMANULINE].[MANU] + '-稼動率-' + CONVERT(nvarchar, CONVERT(DECIMAL(12,2), SUM(ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))/{1}*100)) + '%',
                                                NULL,
                                                '1',
                                                '0c98530a-b467-4cd4-a411-7279f1e04d0d',
                                                NULL,
                                                NULL
                                            FROM [TKMOC].[dbo].[MOCMANULINE], [TK].dbo.INVMB
                                            LEFT JOIN [TKMOC].[dbo].[PREINVMBMANU]
                                                ON [PREINVMBMANU].MB001 = INVMB.MB001 AND [PREINVMBMANU].MANU LIKE '%製一線%'
                                            WHERE INVMB.MB001 = MOCMANULINE.MB001
                                                AND CONVERT(NVARCHAR,[MANUDATE],112) >= '{0}'
                                                AND [MOCMANULINE].[MANU] = '製一線'
                                            GROUP BY [MOCMANULINE].[MANU], [MANUDATE]

                                            UNION

                                            SELECT CONVERT(varchar(100),GETDATE(),21),
                                                '5ce0f554-8b80-4aed-afea-fcd224cecb81',
                                                [MOCMANULINE].[MANU] + '-稼動率-' + CONVERT(nvarchar, CONVERT(DECIMAL(12,2), SUM(ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))/{2}*100)) + '%',
                                                CONVERT(NVARCHAR,[MANUDATE],112),
                                                NEWID(),
                                                'Display',
                                                NULL,
                                                CONVERT(varchar(100), DATEADD(second,3,[MANUDATE]),21),
                                                [MOCMANULINE].[MANU] + '-稼動率-' + CONVERT(nvarchar, CONVERT(DECIMAL(12,2), SUM(ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))/{2}*100)) + '%',
                                                NULL,
                                                '1',
                                                '5ce0f554-8b80-4aed-afea-fcd224cecb81',
                                                NULL,
                                                NULL
                                            FROM [TKMOC].[dbo].[MOCMANULINE], [TK].dbo.INVMB
                                            LEFT JOIN [TKMOC].[dbo].[PREINVMBMANU]
                                                ON [PREINVMBMANU].MB001 = INVMB.MB001 AND [PREINVMBMANU].MANU LIKE '%製二線%'
                                            WHERE INVMB.MB001 = MOCMANULINE.MB001
                                                AND CONVERT(NVARCHAR,[MANUDATE],112) >= '{0}'
                                                AND [MOCMANULINE].[MANU] = '製二線'
                                            GROUP BY [MOCMANULINE].[MANU], [MANUDATE]

                                            UNION

                                            SELECT CONVERT(varchar(100),GETDATE(),21),
                                                '88789ece-41d1-4b48-94f1-6ffab05b05f4',
                                                [MOCMANULINE].[MANU] + '-稼動率-' + CONVERT(nvarchar, CONVERT(DECIMAL(12,2), SUM(ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))/{3}*100)) + '%',
                                                CONVERT(NVARCHAR,[MANUDATE],112),
                                                NEWID(),
                                                'Display',
                                                NULL,
                                                CONVERT(varchar(100), DATEADD(second,3,[MANUDATE]),21),
                                                [MOCMANULINE].[MANU] + '-稼動率-' + CONVERT(nvarchar, CONVERT(DECIMAL(12,2), SUM(ISNULL(ROUND(([NUM]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))/{3}*100)) + '%',
                                                NULL,
                                                '1',
                                                '88789ece-41d1-4b48-94f1-6ffab05b05f4',
                                                NULL,
                                                NULL
                                        ) AS TEMP
                                        ORDER BY [START_TIME], [SUBJECT]
                                    ", Sday, BASELIMITHRS1, BASELIMITHRS2, BASELIMITHRS3, BASELIMITHRS9);

                    using (SqlDataAdapter adapter3 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        ds3.Clear();
                        sqlConn.Open();
                        adapter3.Fill(ds3, "ds3");
                    }
                }

                return ds3;
            }
            catch
            {
                return new DataSet();
            }
        }


        //包裝線、製一線、製二線、手工線的明細
        public DataSet SEARCHMANULINE4(string Sday)
        {
            DataSet ds4 = new DataSet();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.Append(@"
                                SELECT [CREATE_TIME],[CREATE_USER],[DESCRIPTION],[END_TIME],[MEMO_GUID],[PERSONAL_TYPE],[REPEAT_GUID],
                                       [START_TIME],[SUBJECT],[REMINDER_GUID],[ALL_DAY],[OWNER],[UID],[ICS_GUID]
                                FROM (
                                    SELECT 
                                        CONVERT(varchar(100),GETDATE(),21) AS [CREATE_TIME],
                                        '7774b96c-6762-45ef-b9d1-fcd718854e9f' AS [CREATE_USER],
                                        [MOCMANULINE].[MANU] + [MOCMANULINE].[COPTD001] + '-' + [MOCMANULINE].[COPTD002] + '-' + [MOCMANULINE].[COPTD003] + '-' + INVMB.[MB002] + ' ' +
                                        CONVERT(NVARCHAR,CONVERT(INT,ROUND([MOCMANULINE].[BOX],0))) + ' 箱 ' +
                                        CONVERT(NVARCHAR,CONVERT(INT,[MOCMANULINE].[PACKAGE])) + INVMB.MB004 + '-' +
                                        CONVERT(nvarchar,CONVERT(DECIMAL(12,2),ISNULL(ROUND(([PACKAGE]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))) + '小時' AS [DESCRIPTION],
                                        CONVERT(NVARCHAR,[MANUDATE],112) AS [END_TIME],
                                        NEWID() AS [MEMO_GUID],
                                        'Display' AS [PERSONAL_TYPE],
                                        NULL AS [REPEAT_GUID],
                                        CONVERT(NVARCHAR,[MANUDATE],112) + ' ' + CONVERT(varchar(100),GETDATE(),14) AS [START_TIME],
                                        [MOCMANULINE].[MANU] + [MOCMANULINE].[COPTD001] + '-' + [MOCMANULINE].[COPTD002] + '-' + [MOCMANULINE].[COPTD003] + '-' + INVMB.[MB002] + ' ' +
                                        CONVERT(NVARCHAR,CONVERT(INT,ROUND([MOCMANULINE].[BOX],0))) + ' 箱 ' +
                                        CONVERT(NVARCHAR,CONVERT(INT,[MOCMANULINE].[PACKAGE])) + INVMB.MB004 + '-' +
                                        CONVERT(nvarchar,CONVERT(DECIMAL(12,2),ISNULL(ROUND(([PACKAGE]/NULLIF([PREINVMBMANU].TIMES,1)),0),0))) + '小時' AS [SUBJECT],
                                        NULL AS [REMINDER_GUID],
                                        '1' AS [ALL_DAY],
                                        '7774b96c-6762-45ef-b9d1-fcd718854e9f' AS [OWNER],
                                        NULL AS [UID],
                                        NULL AS [ICS_GUID]
                                    FROM [TKMOC].[dbo].[MOCMANULINE], [TK].dbo.INVMB
                                    LEFT JOIN [TKMOC].[dbo].[PREINVMBMANU] ON [PREINVMBMANU].MB001 = INVMB.MB001 AND [PREINVMBMANU].MANU LIKE '%包裝%'
                                    WHERE INVMB.MB001 = MOCMANULINE.MB001
                                      AND CONVERT(NVARCHAR,[MANUDATE],112) >= @Sday
                                      AND [MOCMANULINE].[MANU] = '包裝線'

                                    UNION

                                    -- 以下省略，請依你的原始SQL邏輯依序加入 UNION 其他部分，並將日期條件都改用 @Sday 參數

                                    SELECT CONVERT(varchar(100),GETDATE(),21) AS [CREATE_TIME],
                                        '88789ece-41d1-4b48-94f1-6ffab05b05f4' AS [CREATE_USER],
                                        '手工線' + TA001 + '-' + TA002 + TA034 + CONVERT(NVARCHAR,CONVERT(INT,TA015)) + TA007 AS [DESCRIPTION],
                                        CONVERT(NVARCHAR,TA003,112) AS [END_TIME],
                                        NEWID() AS [MEMO_GUID],
                                        'Display' AS [PERSONAL_TYPE],
                                        NULL AS [REPEAT_GUID],
                                        CONVERT(NVARCHAR,TA003,112) + ' ' + CONVERT(varchar(100),GETDATE(),14) AS [START_TIME],
                                        '手工線' + TA001 + '-' + TA002 + TA034 + CONVERT(NVARCHAR,CONVERT(INT,TA015)) + TA007 AS [SUBJECT],
                                        NULL AS [REMINDER_GUID],
                                        '1' AS [ALL_DAY],
                                        '88789ece-41d1-4b48-94f1-6ffab05b05f4' AS [OWNER],
                                        NULL AS [UID],
                                        NULL AS [ICS_GUID]
                                    FROM [TK].dbo.MOCTA
                                    WHERE TA021 = '04'
                                      AND TA003 >= @Sday
                                ) AS TEMP
                                ORDER BY [START_TIME], [SUBJECT]
                            ");

                    using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn))
                    {
                        // 使用參數化避免 SQL Injection
                        cmd.Parameters.AddWithValue("@Sday", Sday);

                        using (SqlDataAdapter adapter4 = new SqlDataAdapter(cmd))
                        {
                            sqlConn.Open();
                            ds4.Clear();
                            adapter4.Fill(ds4, "ds4");
                        }
                    }
                }

                return ds4;
            }
            catch
            {
                return new DataSet();
            }
        }


        public void ADDTOUOFTB_EIP_SCH_MEMO_PUR(string Sday)
        {
            try
            {
                DataSet ds = SEARCHMANULINE5(Sday);
                if (ds == null || ds.Tables.Count == 0 || ds.Tables[0].Rows.Count == 0)
                    return; // 沒資料就不執行

                Class1 TKID = new Class1(); // 解密
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    // 刪除資料
                    using (SqlCommand cmd = new SqlCommand("DELETE FROM [UOF].[dbo].[TB_EIP_SCH_MEMO] WHERE CONVERT(NVARCHAR,[START_TIME],112) >= @Sday AND [CREATE_USER] = @CreateUser", sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@Sday", Sday);
                        cmd.Parameters.AddWithValue("@CreateUser", "4eda2bfc-bf4b-4df2-a39c-1cc46e68598a");
                        cmd.ExecuteNonQuery();
                    }

                    // 批次匯入
                    using (SqlBulkCopy bulkCopy = new SqlBulkCopy(sqlConn))
                    {
                        bulkCopy.DestinationTableName = "[UOF].[dbo].[TB_EIP_SCH_MEMO]";
                        bulkCopy.ColumnMappings.Add("CREATE_TIME", "CREATE_TIME");
                        bulkCopy.ColumnMappings.Add("CREATE_USER", "CREATE_USER");
                        bulkCopy.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION");
                        bulkCopy.ColumnMappings.Add("END_TIME", "END_TIME");
                        bulkCopy.ColumnMappings.Add("MEMO_GUID", "MEMO_GUID");
                        bulkCopy.ColumnMappings.Add("PERSONAL_TYPE", "PERSONAL_TYPE");
                        bulkCopy.ColumnMappings.Add("REPEAT_GUID", "REPEAT_GUID");
                        bulkCopy.ColumnMappings.Add("START_TIME", "START_TIME");
                        bulkCopy.ColumnMappings.Add("SUBJECT", "SUBJECT");
                        bulkCopy.ColumnMappings.Add("REMINDER_GUID", "REMINDER_GUID");
                        bulkCopy.ColumnMappings.Add("ALL_DAY", "ALL_DAY");
                        bulkCopy.ColumnMappings.Add("OWNER", "OWNER");
                        bulkCopy.ColumnMappings.Add("UID", "UID");
                        bulkCopy.ColumnMappings.Add("ICS_GUID", "ICS_GUID");

                        bulkCopy.WriteToServer(ds.Tables[0]);
                    }
                }
            }
            catch (Exception ex)
            {
                // 錯誤處理，例如寫Log或顯示錯誤訊息
                MessageBox.Show("執行失敗：" + ex.Message);
            }
        }

        //採購明細        
        public DataSet SEARCHMANULINE5(string Sday)
        {
            DataSet ds5 = new DataSet();

            try
            {
                Class1 TKID = new Class1();
                var sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (var conn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string query = @"
                                SELECT 
                                    CONVERT(varchar(100), GETDATE(), 21) AS CREATE_TIME,
                                    '701e642b-c4d5-43ce-8289-c7dffb7ba016' AS CREATE_USER,
                                    TD005 + '-' + CONVERT(NVARCHAR, (TD008 - TD015)) + ' ' + TD009 AS DESCRIPTION,
                                    CAST(SWITCHOFFSET(CAST(CONVERT(datetime, TD012, 112) AS datetimeoffset), '+08:00') AS datetimeoffset) AS END_TIME,
                                    CONVERT(NVARCHAR(36), NEWID()) AS MEMO_GUID,
                                    'Display' AS PERSONAL_TYPE,
                                    NULL AS REPEAT_GUID,
                                     CAST(SWITCHOFFSET(CAST(CONVERT(datetime, TD012, 112) AS datetimeoffset), '+08:00') AS datetimeoffset) AS START_TIME,
                                    TD005 + '-' + CONVERT(NVARCHAR, (TD008 - TD015)) + ' ' + TD009 AS SUBJECT,
                                    NULL AS REMINDER_GUID,
                                    CAST('1' AS bit)  AS ALL_DAY,
                                    '701e642b-c4d5-43ce-8289-c7dffb7ba016' AS OWNER,
                                    NULL AS UID,
                                    NULL AS ICS_GUID
                                FROM [TK].[dbo].[PURTD] WITH (NOLOCK)
                                JOIN [TK].[dbo].[INVMB] WITH (NOLOCK) ON TD004 = MB001
                                WHERE TD016 = 'N'
                                    AND (TD004 LIKE '1%' OR TD004 LIKE '2%')
                                    AND TD012 >= @Sday
                                ORDER BY TD012";

                    using (var cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.AddWithValue("@Sday", Sday);
                        using (var adapter = new SqlDataAdapter(cmd))
                        {
                            conn.Open();
                            adapter.Fill(ds5, "ds5");
                        }
                    }
                }
            }
            catch
            {
                // 可加上Log
            }

            return ds5;
        }

        public void ADDTOUOFTB_EIP_SCH_MEMO_COP(string sDate)
        {
            //國內訂單
            try
            {
                DataSet ds = SEARCHMANULINE6(sDate);
                if (ds == null || ds.Tables.Count == 0 || ds.Tables[0].Rows.Count == 0)
                    return; // 沒資料就不執行

                Class1 TKID = new Class1(); // 解密
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    // 刪除資料
                    using (SqlCommand cmd = new SqlCommand("DELETE FROM [UOF].[dbo].[TB_EIP_SCH_MEMO] WHERE CONVERT(NVARCHAR,[START_TIME],112) >= @Sday AND [CREATE_USER] = @CreateUser", sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@Sday", sDate);
                        cmd.Parameters.AddWithValue("@CreateUser", "4eda2bfc-bf4b-4df2-a39c-1cc46e68598a");
                        cmd.ExecuteNonQuery();
                    }

                    // 批次匯入
                    using (SqlBulkCopy bulkCopy = new SqlBulkCopy(sqlConn))
                    {
                        bulkCopy.DestinationTableName = "[UOF].[dbo].[TB_EIP_SCH_MEMO]";
                        bulkCopy.ColumnMappings.Add("CREATE_TIME", "CREATE_TIME");
                        bulkCopy.ColumnMappings.Add("CREATE_USER", "CREATE_USER");
                        bulkCopy.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION");
                        bulkCopy.ColumnMappings.Add("END_TIME", "END_TIME");
                        bulkCopy.ColumnMappings.Add("MEMO_GUID", "MEMO_GUID");
                        bulkCopy.ColumnMappings.Add("PERSONAL_TYPE", "PERSONAL_TYPE");
                        bulkCopy.ColumnMappings.Add("REPEAT_GUID", "REPEAT_GUID");
                        bulkCopy.ColumnMappings.Add("START_TIME", "START_TIME");
                        bulkCopy.ColumnMappings.Add("SUBJECT", "SUBJECT");
                        bulkCopy.ColumnMappings.Add("REMINDER_GUID", "REMINDER_GUID");
                        bulkCopy.ColumnMappings.Add("ALL_DAY", "ALL_DAY");
                        bulkCopy.ColumnMappings.Add("OWNER", "OWNER");
                        bulkCopy.ColumnMappings.Add("UID", "UID");
                        bulkCopy.ColumnMappings.Add("ICS_GUID", "ICS_GUID");

                        bulkCopy.WriteToServer(ds.Tables[0]);
                    }
                }
            }
            catch (Exception ex)
            {
                // 錯誤處理，例如寫Log或顯示錯誤訊息
                MessageBox.Show("執行失敗：" + ex.Message);
            }

            //國外訂單
            try
            {
                DataSet ds = SEARCHMANULINE7(sDate);
                if (ds == null || ds.Tables.Count == 0 || ds.Tables[0].Rows.Count == 0)
                    return; // 沒資料就不執行

                Class1 TKID = new Class1(); // 解密
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    // 刪除資料
                    using (SqlCommand cmd = new SqlCommand("DELETE FROM [UOF].[dbo].[TB_EIP_SCH_MEMO] WHERE CONVERT(NVARCHAR,[START_TIME],112) >= @Sday AND [CREATE_USER] = @CreateUser", sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@Sday", sDate);
                        cmd.Parameters.AddWithValue("@CreateUser", "8e841f56-0a77-4b5c-9c7e-1fd05b089900");
                        cmd.ExecuteNonQuery();
                    }

                    // 批次匯入
                    using (SqlBulkCopy bulkCopy = new SqlBulkCopy(sqlConn))
                    {
                        bulkCopy.DestinationTableName = "[UOF].[dbo].[TB_EIP_SCH_MEMO]";
                        bulkCopy.ColumnMappings.Add("CREATE_TIME", "CREATE_TIME");
                        bulkCopy.ColumnMappings.Add("CREATE_USER", "CREATE_USER");
                        bulkCopy.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION");
                        bulkCopy.ColumnMappings.Add("END_TIME", "END_TIME");
                        bulkCopy.ColumnMappings.Add("MEMO_GUID", "MEMO_GUID");
                        bulkCopy.ColumnMappings.Add("PERSONAL_TYPE", "PERSONAL_TYPE");
                        bulkCopy.ColumnMappings.Add("REPEAT_GUID", "REPEAT_GUID");
                        bulkCopy.ColumnMappings.Add("START_TIME", "START_TIME");
                        bulkCopy.ColumnMappings.Add("SUBJECT", "SUBJECT");
                        bulkCopy.ColumnMappings.Add("REMINDER_GUID", "REMINDER_GUID");
                        bulkCopy.ColumnMappings.Add("ALL_DAY", "ALL_DAY");
                        bulkCopy.ColumnMappings.Add("OWNER", "OWNER");
                        bulkCopy.ColumnMappings.Add("UID", "UID");
                        bulkCopy.ColumnMappings.Add("ICS_GUID", "ICS_GUID");

                        bulkCopy.WriteToServer(ds.Tables[0]);
                    }
                }
            }
            catch (Exception ex)
            {
                // 錯誤處理，例如寫Log或顯示錯誤訊息
                MessageBox.Show("執行失敗：" + ex.Message);
            }
        }



        //訂單-國內
        public DataSet SEARCHMANULINE6(string Sday)
        {
            try
            {
                // 20210902密碼解密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                    SELECT 
                                        CONVERT(varchar(100), GETDATE(), 21) AS [CREATE_TIME],
                                        '4eda2bfc-bf4b-4df2-a39c-1cc46e68598a' AS [CREATE_USER],
                                        TC053 + '-' + TD005 + '-' + CONVERT(NVARCHAR, CONVERT(INT, (TD008 - TD009))) + ' (' + TD010 + ') 贈品' + CONVERT(NVARCHAR, CONVERT(INT, (TD024 - TD025))) + ' (' + TD010 + ')' AS [DESCRIPTION],
                                        CONVERT(datetime, [TD013], 112) AS [END_TIME],
                                        CONVERT(NVARCHAR(36), NEWID()) AS [MEMO_GUID],
                                        'Display' AS [PERSONAL_TYPE],
                                        NULL AS [REPEAT_GUID],
                                        CONVERT(datetime, [TD013], 112) AS [START_TIME],
                                        TC053 + '-' + TD005 + '-' + CONVERT(NVARCHAR, CONVERT(INT, (TD008 - TD009))) + ' (' + TD010 + ') 贈品' + CONVERT(NVARCHAR, CONVERT(INT, (TD024 - TD025))) + ' (' + TD010 + ')' AS [SUBJECT],
                                        NULL AS [REMINDER_GUID],
                                        CAST('1' AS bit)  AS ALL_DAY,
                                        '4eda2bfc-bf4b-4df2-a39c-1cc46e68598a' AS [OWNER],
                                        NULL AS [UID],
                                        NULL AS [ICS_GUID]
                                    FROM [TK].[dbo].[COPTC], [TK].[dbo].[COPTD], [TK].dbo.INVMB
                                    WHERE TC001 = TD001 AND TC002 = TD002
                                        AND TD004 = MB001
                                        AND TD016 = 'N'
                                        AND TD001 IN ('A221', 'A223', 'A227', 'A229')
                                        AND TD013 >= '{0}'
                                    ORDER BY TD013, TC001, TC002
                                    ", Sday);

                adapter6 = new SqlDataAdapter(sbSql.ToString(), sqlConn);

                sqlCmdBuilder6 = new SqlCommandBuilder(adapter6);
                sqlConn.Open();
                ds6.Clear();
                adapter6.Fill(ds6, "ds6");

                return ds6;
            }
            catch
            {
                return ds6;
            }
            finally
            {
                if (sqlConn != null && sqlConn.State == ConnectionState.Open)
                    sqlConn.Close();
            }
        }


        public DataSet SEARCHMANULINE7(string Sday)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                    SELECT 
                                        CONVERT(varchar(100), GETDATE(), 21) AS [CREATE_TIME],
                                        '8e841f56-0a77-4b5c-9c7e-1fd05b089900' AS [CREATE_USER],
                                        TC053 + '-' + TD005 + '-' + CONVERT(NVARCHAR, CONVERT(INT, (TD008 - TD009))) + ' (' + TD010 + ') 贈品' + CONVERT(NVARCHAR, CONVERT(INT, (TD024 - TD025))) + ' (' + TD010 + ')' AS [DESCRIPTION],
                                        CAST(SWITCHOFFSET(CAST(CONVERT(datetime, [TD013], 112) AS datetimeoffset), '+08:00') AS datetimeoffset) AS [END_TIME],
                                        CONVERT(NVARCHAR(36), NEWID()) AS [MEMO_GUID],
                                        'Display' AS [PERSONAL_TYPE],
                                        NULL AS [REPEAT_GUID],
                                        CAST(SWITCHOFFSET(CAST(CONVERT(datetime, [TD013], 112) AS datetimeoffset), '+08:00') AS datetimeoffset) AS [START_TIME],
                                        TC053 + '-' + TD005 + '-' + CONVERT(NVARCHAR, CONVERT(INT, (TD008 - TD009))) + ' (' + TD010 + ') 贈品' + CONVERT(NVARCHAR, CONVERT(INT, (TD024 - TD025))) + ' (' + TD010 + ')' AS [SUBJECT],
                                        NULL AS [REMINDER_GUID],
                                         CAST('1' AS bit)  AS ALL_DAY,
                                        '8e841f56-0a77-4b5c-9c7e-1fd05b089900' AS [OWNER],
                                        NULL AS [UID],
                                        NULL AS [ICS_GUID]
                                    FROM [TK].[dbo].[COPTC], [TK].[dbo].[COPTD], [TK].dbo.INVMB
                                    WHERE TC001 = TD001 AND TC002 = TD002
                                        AND TD004 = MB001
                                        AND TD016 = 'N'
                                        AND TD001 IN ('A222', 'A227')
                                        AND TD013 >= '{0}'
                                    ORDER BY TD013, TC001, TC002
                                    ", Sday);

                adapter7 = new SqlDataAdapter(sbSql.ToString(), sqlConn);

                sqlCmdBuilder7 = new SqlCommandBuilder(adapter7);
                sqlConn.Open();
                ds7.Clear();
                adapter7.Fill(ds7, "ds7");

                return ds7;
            }
            catch
            {
                return ds7;
            }
            finally
            {
                if (sqlConn != null && sqlConn.State == ConnectionState.Open)
                    sqlConn.Close();
            }
        }


        public DataSet SEARCHMANULINE8(string Sday)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                    SELECT 
                                        CONVERT(varchar(100), GETDATE(), 21) AS [CREATE_TIME],
                                        'e6a83ac9-5ab4-4c5b-af50-1936a694ffe8' AS [CREATE_USER],
                                        TC053 + '-' + TD005 + '-' + CONVERT(NVARCHAR, CONVERT(INT, (TD008 - TD009))) + ' (' + TD010 + ') 贈品' + CONVERT(NVARCHAR, CONVERT(INT, (TD024 - TD025))) + ' (' + TD010 + ')' AS [DESCRIPTION],
                                        CONVERT(NVARCHAR, [TD013], 112) AS [END_TIME],
                                        NEWID() AS [MEMO_GUID],
                                        'Display' AS [PERSONAL_TYPE],
                                        NULL AS [REPEAT_GUID],
                                        CONVERT(NVARCHAR, [TD013], 112) AS [START_TIME],
                                        TC053 + '-' + TD005 + '-' + CONVERT(NVARCHAR, CONVERT(INT, (TD008 - TD009))) + ' (' + TD010 + ') 贈品' + CONVERT(NVARCHAR, CONVERT(INT, (TD024 - TD025))) + ' (' + TD010 + ')' AS [SUBJECT],
                                        NULL AS [REMINDER_GUID],
                                        '1' AS [ALL_DAY],
                                        'e6a83ac9-5ab4-4c5b-af50-1936a694ffe8' AS [OWNER],
                                        NULL AS [UID],
                                        NULL AS [ICS_GUID]
                                    FROM [TK].[dbo].[COPTC], [TK].[dbo].[COPTD], [TK].dbo.INVMB
                                    WHERE TC001 = TD001 AND TC002 = TD002
                                        AND TD004 = MB001
                                        AND TD016 = 'N'
                                        AND TD001 IN ('A224', 'A225', 'A226', 'A228')
                                        AND TD013 >= '{0}'
                                    ORDER BY TD013, TC001, TC002
                                    ", Sday);

                adapter8 = new SqlDataAdapter(sbSql.ToString(), sqlConn);

                sqlCmdBuilder8 = new SqlCommandBuilder(adapter8);
                sqlConn.Open();
                ds8.Clear();
                adapter8.Fill(ds8, "ds8");

                return ds8;
            }
            catch
            {
                return ds8;
            }
            finally
            {
                if (sqlConn != null && sqlConn.State == ConnectionState.Open)
                    sqlConn.Close();
            }
        }


        //public void UPDATEtb_COMPANYSTATUS1()
        //{
        //    DataSet dsCOMPA = SERACHCOMPA();

        //    if (dsCOMPA.Tables[0].Rows.Count == 0)
        //        return;

        //    try
        //    {
        //        Class1 TKID = new Class1();
        //        SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
        //        sqlsb.Password = TKID.Decryption(sqlsb.Password);
        //        sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

        //        using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
        //        {
        //            sqlConn.Open();
        //            using (SqlTransaction tran = sqlConn.BeginTransaction())
        //            {
        //                try
        //                {
        //                    // 建立 IN 條件用的參數清單
        //                    List<string> erpNos = dsCOMPA.Tables[0].AsEnumerable()
        //                        .Select(r => r.Field<string>("MA001"))
        //                        .Where(s => !string.IsNullOrEmpty(s))
        //                        .ToList();

        //                    if (erpNos.Count == 0)
        //                        return;

        //                    // 用參數化建立 IN 子句
        //                    var paramNames = erpNos.Select((s, i) => "@erpNo" + i).ToList();
        //                    string inClause = string.Join(",", paramNames);

        //                    string sql = $"UPDATE [HJ_BM_DB].[dbo].[tb_COMPANY] SET [STATUS] = '1' WHERE [ERPNO] IN ({inClause})";

        //                    using (SqlCommand cmd = new SqlCommand(sql, sqlConn, tran))
        //                    {
        //                        for (int i = 0; i < erpNos.Count; i++)
        //                        {
        //                            cmd.Parameters.AddWithValue(paramNames[i], erpNos[i]);
        //                        }

        //                        int result = cmd.ExecuteNonQuery();

        //                        if (result == 0)
        //                        {
        //                            tran.Rollback();
        //                        }
        //                        else
        //                        {
        //                            tran.Commit();
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    tran.Rollback();
        //                    throw;
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        // 可視情況記錄日誌或拋出例外
        //        // throw new Exception("更新公司狀態失敗: " + ex.Message, ex);
        //    }
        //}

        //public DataSet SERACHCOMPA()
        //{
        //    DataSet ds = new DataSet();

        //    try
        //    {
        //        Class1 TKID = new Class1();
        //        SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
        //        sqlsb.Password = TKID.Decryption(sqlsb.Password);
        //        sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

        //        using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
        //        {
        //            sqlConn.Open();

        //            string sql = @"
        //                        SELECT MA001
        //                        FROM [TK].dbo.COPMA
        //                        WHERE ISNULL(UDF01, '') <> 'Y'
        //                          AND MA001 IN (SELECT ERPNO FROM [192.168.1.223].[HJ_BM_DB].[dbo].[tb_COMPANY] WHERE ISNULL(ERPNO, '') <> '')
        //                          AND MA001 IN (SELECT ERPNO FROM [192.168.1.223].[HJ_BM_DB].[dbo].[tb_COMPANY] WHERE ISNULL(ERPNO, '') <> '' AND [STATUS] = '2')
        //                    ";

        //            using (SqlDataAdapter adapter = new SqlDataAdapter(sql, sqlConn))
        //            {
        //                adapter.Fill(ds, "ds");
        //            }
        //        }
        //    }
        //    catch
        //    {
        //        // 可視情況記錄錯誤
        //    }

        //    return ds;
        //}



        //public void UPDATEtb_COMPANYSTATUS2()
        //{
        //    DataSet dsCOMPASTOP = SERACHCOMPASTOP();

        //    if (dsCOMPASTOP.Tables.Count == 0 || dsCOMPASTOP.Tables[0].Rows.Count == 0)
        //        return;

        //    try
        //    {
        //        Class1 TKID = new Class1();
        //        SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
        //        sqlsb.Password = TKID.Decryption(sqlsb.Password);
        //        sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

        //        using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
        //        {
        //            sqlConn.Open();
        //            using (SqlTransaction tran = sqlConn.BeginTransaction())
        //            {
        //                using (SqlCommand cmd = new SqlCommand())
        //                {
        //                    cmd.Connection = sqlConn;
        //                    cmd.Transaction = tran;
        //                    cmd.CommandTimeout = 60;
        //                    cmd.CommandText = "UPDATE [HJ_BM_DB].[dbo].[tb_COMPANY] SET [STATUS] = '2' WHERE [ERPNO] = @ERPNO";

        //                    SqlParameter param = cmd.Parameters.Add("@ERPNO", SqlDbType.NVarChar, 50);

        //                    foreach (DataRow dr in dsCOMPASTOP.Tables[0].Rows)
        //                    {
        //                        param.Value = dr["MA001"].ToString();
        //                        cmd.ExecuteNonQuery();
        //                    }
        //                }
        //                tran.Commit();
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        // 可加入錯誤處理或紀錄 ex.Message
        //        // ex: Log.Error(ex);
        //    }
        //}



        //public DataSet SERACHCOMPASTOP()
        //{
        //    DataSet ds = new DataSet();

        //    try
        //    {
        //        Class1 TKID = new Class1(); // 用 new 建立類別實體
        //        SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

        //        // 資料庫使用者密碼解密
        //        sqlsb.Password = TKID.Decryption(sqlsb.Password);
        //        sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

        //        using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
        //        {
        //            string sql = @"
        //                        SELECT MA001
        //                        FROM [TK].dbo.COPMA
        //                        WHERE UDF01 = 'Y'
        //                        AND MA001 IN (
        //                            SELECT [ERPNO] 
        //                            FROM [192.168.1.223].[HJ_BM_DB].[dbo].[tb_COMPANY] 
        //                            WHERE ISNULL([ERPNO],'') <> ''
        //                        )
        //                        AND MA001 IN (
        //                            SELECT [ERPNO] 
        //                            FROM [192.168.1.223].[HJ_BM_DB].[dbo].[tb_COMPANY] 
        //                            WHERE ISNULL([ERPNO],'') <> '' AND [STATUS] = '1'
        //                        )";

        //            using (SqlDataAdapter adapter = new SqlDataAdapter(sql, sqlConn))
        //            {
        //                sqlConn.Open();
        //                adapter.Fill(ds, "ds");
        //            }
        //        }
        //    }
        //    catch
        //    {
        //        // 這裡可以考慮紀錄錯誤訊息
        //    }

        //    return ds;
        //}


        //public void ADDtb_COMPANY()
        //{
        //    DataSet dsCOPMA = SERACHdsCOPMA();
        //    if (dsCOPMA.Tables.Count == 0 || dsCOPMA.Tables[0].Rows.Count == 0)
        //        return;

        //    try
        //    {
        //        Class1 TKID = new Class1();
        //        SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
        //        sqlsb.Password = TKID.Decryption(sqlsb.Password);
        //        sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

        //        using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
        //        {
        //            sqlConn.Open();
        //            using (SqlTransaction tran = sqlConn.BeginTransaction())
        //            {
        //                using (SqlCommand cmd = new SqlCommand())
        //                {
        //                    cmd.Connection = sqlConn;
        //                    cmd.Transaction = tran;
        //                    cmd.CommandTimeout = 60;

        //                    StringBuilder sbSql = new StringBuilder();

        //                    foreach (DataRow dr in dsCOPMA.Tables[0].Rows)
        //                    {
        //                        sbSql.AppendLine(@"
        //                                        INSERT INTO [HJ_BM_DB].[dbo].[tb_COMPANY]
        //                                        ([COMPANY_NAME],[ERPNO],[TAX_NUMBER],[PHONE],[FAX],[COUNTRY],[CITY],[TOWN],[ADDRESS],[OVERSEAS_ADDR]
        //                                        ,[EMAIL],[WEBSITE],[FACEBOOK],[INDUSTRY],[TURNOVER],[WORKER_NUMBER],[EST_DATE],[PARENT_ID],[UPDATE_DATETIME],[CREATE_DATETIME]
        //                                        ,[CREATE_USER_ID],[UPDATE_USER_ID],[NOTE],[OWNER_ID],[LAST_CONTACT_DATE],[STATUS])
        //                                        VALUES
        //                                        (@COMPANY_NAME,@ERPNO,@TAX_NUMBER,@PHONE,@FAX,@COUNTRY,@CITY,@TOWN,@ADDRESS,@OVERSEAS_ADDR,
        //                                        @EMAIL,@WEBSITE,@FACEBOOK,@INDUSTRY,@TURNOVER,@WORKER_NUMBER,@EST_DATE,NULL,@UPDATE_DATETIME,@CREATE_DATETIME,
        //                                        @CREATE_USER_ID,@UPDATE_USER_ID,@NOTE,@OWNER_ID,@LAST_CONTACT_DATE,@STATUS);");

        //                        cmd.Parameters.Clear();
        //                        cmd.Parameters.AddWithValue("@COMPANY_NAME", dr["COMPANY_NAME"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@ERPNO", dr["ERPNO"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@TAX_NUMBER", dr["TAX_NUMBER"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@PHONE", dr["PHONE"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@FAX", dr["FAX"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@COUNTRY", dr["COUNTRY"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@CITY", dr["CITY"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@TOWN", dr["TOWN"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@ADDRESS", dr["ADDRESS"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@OVERSEAS_ADDR", dr["OVERSEAS_ADDR"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@EMAIL", dr["EMAIL"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@WEBSITE", dr["WEBSITE"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@FACEBOOK", dr["FACEBOOK"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@INDUSTRY", dr["INDUSTRY"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@TURNOVER", dr["TURNOVER"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@WORKER_NUMBER", dr["WORKER_NUMBER"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@EST_DATE", dr["EST_DATE"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@UPDATE_DATETIME", dr["UPDATE_DATETIME"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@CREATE_DATETIME", dr["CREATE_DATETIME"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@CREATE_USER_ID", dr["CREATE_USER_ID"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@UPDATE_USER_ID", dr["UPDATE_USER_ID"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@NOTE", dr["NOTE"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@OWNER_ID", dr["OWNER_ID"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@LAST_CONTACT_DATE", dr["LAST_CONTACT_DATE"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@STATUS", dr["STATUS"] ?? DBNull.Value);

        //                        cmd.CommandText = sbSql.ToString();
        //                        sbSql.Clear();

        //                        cmd.ExecuteNonQuery();
        //                    }

        //                    tran.Commit();
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        // 可記錄錯誤 ex.Message
        //        // 也可視需求 throw;
        //    }
        //}

        //public void UPDATEtb_COMPANYOWNER_ID()
        //{
        //    DataSet dsCOMPAMA016 = SERACHCOMPAMA016();

        //    if (dsCOMPAMA016.Tables.Count == 0 || dsCOMPAMA016.Tables[0].Rows.Count == 0)
        //        return;

        //    try
        //    {
        //        Class1 TKID = new Class1();
        //        SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
        //        sqlsb.Password = TKID.Decryption(sqlsb.Password);
        //        sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

        //        using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
        //        {
        //            sqlConn.Open();
        //            using (SqlTransaction tran = sqlConn.BeginTransaction())
        //            {
        //                using (SqlCommand cmd = new SqlCommand())
        //                {
        //                    cmd.Connection = sqlConn;
        //                    cmd.Transaction = tran;
        //                    cmd.CommandTimeout = 60;

        //                    StringBuilder sbSql = new StringBuilder();

        //                    foreach (DataRow dr in dsCOMPAMA016.Tables[0].Rows)
        //                    {
        //                        sbSql.AppendLine("UPDATE [HJ_BM_DB].[dbo].[tb_COMPANY] SET [OWNER_ID] = @OWNER_ID WHERE [ERPNO] = @ERPNO;");

        //                        cmd.Parameters.Clear();
        //                        cmd.Parameters.AddWithValue("@OWNER_ID", dr["USER_ID"] ?? DBNull.Value);
        //                        cmd.Parameters.AddWithValue("@ERPNO", dr["ERPNO"] ?? DBNull.Value);

        //                        cmd.CommandText = sbSql.ToString();
        //                        sbSql.Clear();

        //                        cmd.ExecuteNonQuery();
        //                    }

        //                    tran.Commit();
        //                }
        //            }
        //        }
        //    }
        //    catch
        //    {
        //        // 可加入錯誤處理或記錄
        //    }
        //}


        //public DataSet SERACHCOMPAMA016()
        //{
        //    DataSet ds = new DataSet();

        //    try
        //    {
        //        Class1 TKID = new Class1(); // 用new建立類別實體
        //        SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

        //        // 資料庫使用者密碼解密
        //        sqlsb.Password = TKID.Decryption(sqlsb.Password);
        //        sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

        //        using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
        //        {
        //            string sql = @"
        //                        SELECT c.[ERPNO], c.[OWNER_ID], m.MA001, m.MA016, u.[USER_ACCOUNT], u.[USER_ID]
        //                        FROM [192.168.1.223].[HJ_BM_DB].[dbo].[tb_COMPANY] c
        //                        INNER JOIN [TK].dbo.COPMA m ON m.MA001 = c.ERPNO
        //                        LEFT JOIN [192.168.1.223].[HJ_BM_DB].[dbo].[tb_USER] u ON u.USER_ACCOUNT = m.MA016
        //                        WHERE ISNULL(m.MA016,'') <> ''
        //                            AND c.OWNER_ID <> u.USER_ID
        //                        ";

        //            using (SqlDataAdapter adapter = new SqlDataAdapter(sql, sqlConn))
        //            {
        //                sqlConn.Open();
        //                adapter.Fill(ds, "ds");
        //            }
        //        }
        //    }
        //    catch
        //    {
        //        // 可加入錯誤處理或紀錄
        //    }

        //    return ds;
        //}


        //public DataSet SERACHdsCOPMA()
        //{
        //    DataSet ds = new DataSet();

        //    try
        //    {
        //        Class1 TKID = new Class1();//用new建立類別實體
        //        SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

        //        //資料庫使用者密碼解密
        //        sqlsb.Password = TKID.Decryption(sqlsb.Password);
        //        sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

        //        using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
        //        {
        //            string sql = @"
        //                        SELECT 
        //                            MA002 AS [COMPANY_NAME],
        //                            MA001 AS [ERPNO],
        //                            MA010 AS [TAX_NUMBER],
        //                            MA006 AS [PHONE],
        //                            MA008 AS [FAX],
        //                            'Taiwan (台灣)' AS [COUNTRY],
        //                            '' AS [CITY],
        //                            '' AS [TOWN],
        //                            '' AS [ADDRESS],
        //                            '' AS [OVERSEAS_ADDR],
        //                            MA009 AS [EMAIL],
        //                            '' AS [WEBSITE],
        //                            '' AS [FACEBOOK],
        //                            '' AS [INDUSTRY],
        //                            '0' AS [TURNOVER],
        //                            '0' AS [WORKER_NUMBER],
        //                            '' AS [EST_DATE],
        //                            '' AS [PARENT_ID],
        //                            CONVERT(nvarchar, GETDATE(), 111) AS [UPDATE_DATETIME],
        //                            CONVERT(nvarchar, GETDATE(), 111) AS [CREATE_DATETIME],
        //                            [USER_ID] AS [CREATE_USER_ID],
        //                            [USER_ID] AS [UPDATE_USER_ID],
        //                            '' AS [NOTE],
        //                            [USER_ID] AS [OWNER_ID],
        //                            '' AS [LAST_CONTACT_DATE],
        //                            '1' AS [STATUS]
        //                        FROM [TK].dbo.COPMA
        //                        LEFT JOIN [192.168.1.223].[HJ_BM_DB].[dbo].[tb_USER] 
        //                            ON [tb_USER].[USER_ACCOUNT] = MA016
        //                        WHERE MA001 NOT IN (
        //                            SELECT [ERPNO] FROM [192.168.1.223].[HJ_BM_DB].[dbo].[tb_COMPANY] 
        //                            WHERE ISNULL([ERPNO], '') <> ''
        //                        )
        //                        AND MA001 NOT LIKE '1%'
        //                        AND MA001 NOT LIKE '299%'
        //                        AND MA001 NOT LIKE '399%'
        //                        AND MA001 NOT LIKE '4%'
        //                        AND MA001 NOT LIKE '5%'
        //                        AND MA001 NOT LIKE '6%'
        //                        AND MA001 NOT LIKE '7%'
        //                        AND MA001 NOT LIKE '910%'
        //                        AND MA001 NOT LIKE '990%'
        //                    ";

        //            using (SqlDataAdapter adapter = new SqlDataAdapter(sql, sqlConn))
        //            {
        //                sqlConn.Open();
        //                adapter.Fill(ds, "ds");
        //            }
        //        }
        //    }
        //    catch
        //    {
        //        // 可加錯誤處理
        //    }

        //    return ds;
        //}


        /// <summary>
        /// 轉入ERP的請購單到UOF簽核
        /// </summary>
        /// <param name="TA001"></param>
        /// <param name="TA002"></param>
        // 這是簡化與結構化版本，將重複的部分重構為方法來減少程式碼長度與重複性

        public void ADDTB_WKF_EXTERNAL_TASK_PURTAB(string TA001, string TA002)
        {            
            DataTable dt = SEARCHPURTAPURTB(TA001, TA002);
            DataTable dtUofDep = SEARCHUOFDEP(dt.Rows[0]["TA012"].ToString());

            string account = dt.Rows[0]["TA012"].ToString();
            string jobTitleId = dt.Rows[0]["TITLE_ID"].ToString();
            string fillerName = dt.Rows[0]["MV002"].ToString();
            string fillerUserGuid = dt.Rows[0]["USER_GUID"].ToString();

            string depName;
            string depNo;
            string groupId = GetGroupId(dtUofDep, dt.Rows[0]["TA004"].ToString(), out depName, out depNo);

            string externalFormNbr = dt.Rows[0]["TA001"].ToString().Trim() + dt.Rows[0]["TA002"].ToString().Trim();

            //找出表單的最新版號
            string purId = SEARCHFORM_UOF_VERSION_ID("PUR10.請購單申請");

            //建立XML
            XmlDocument xmlDoc = new XmlDocument();
            XmlElement form = xmlDoc.CreateElement("Form");
            if (!string.IsNullOrEmpty(purId)) form.SetAttribute("formVersionId", purId);
            form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(form);
            //建立XML的 applicant 節點
            XmlElement applicant = CreateApplicant(xmlDoc, account, groupId, jobTitleId);
            form.AppendChild(applicant);
            //建立XML的 Comment 節點
            XmlElement comment = xmlDoc.CreateElement("Comment");
            comment.InnerText = "申請者意見";
            applicant.AppendChild(comment);
            //建立XML的 FormFieldValue 節點
            XmlElement formFieldValue = xmlDoc.CreateElement("FormFieldValue");
            form.AppendChild(formFieldValue);

            // 建立 FieldItem
            AddFieldItem(xmlDoc, formFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "QC", dt.Rows[0]["QC"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "DEPNO", depName, fillerName, fillerUserGuid, account, depNo);
            AddFieldItem(xmlDoc, formFieldValue, "TA004", dt.Rows[0]["ME002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TA001", dt.Rows[0]["TA001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TA002", dt.Rows[0]["TA002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TA003", dt.Rows[0]["TA003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TA012", dt.Rows[0]["TA012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "MV002", dt.Rows[0]["MV002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TA006", dt.Rows[0]["TA006"].ToString(), fillerName, fillerUserGuid, account);

            // 建立 DataGrid
            XmlElement tbField = AddFieldItem(xmlDoc, formFieldValue, "TB", "", fillerName, fillerUserGuid, account);
            XmlElement dataGrid = xmlDoc.CreateElement("DataGrid");
            tbField.AppendChild(dataGrid);

            int rowIndex = 0;
            foreach (DataRow od in dt.Rows)
            {
                XmlElement row = xmlDoc.CreateElement("Row");
                row.SetAttribute("order", rowIndex.ToString());

                AppendCellToRow(xmlDoc, row, od, "TB004");
                AppendCellToRow(xmlDoc, row, od, "TB005");
                AppendCellToRow(xmlDoc, row, od, "TB006");
                AppendCellToRow(xmlDoc, row, od, "TB007");
                AppendCellToRow(xmlDoc, row, od, "TB009");
                AppendCellToRow(xmlDoc, row, od, "SUMLA011");
                AppendCellToRow(xmlDoc, row, od, "TB011");
                AppendCellToRow(xmlDoc, row, od, "TB010");
                AppendCellToRow(xmlDoc, row, od, "MA002");
                AppendCellToRow(xmlDoc, row, od, "TB012");
                AppendCellToRow(xmlDoc, row, od, "LASTTB");
                AppendCellToRow(xmlDoc, row, od, "LASTTH");

                dataGrid.AppendChild(row);
                rowIndex++;
            }

            // 資料庫連線與儲存
            string xmlStr = form.OuterXml;
            string connStr = BuildDecryptedConnection("dbUOF");

            using (SqlConnection conn = new SqlConnection(connStr))
            {
                string insert = $@"
                                INSERT INTO [{DBNAME}].dbo.TB_WKF_EXTERNAL_TASK
                                (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                VALUES (NEWID(), @XML, 2, '{externalFormNbr}')";

                SqlCommand cmd = new SqlCommand(insert, conn);
                cmd.Parameters.AddWithValue("@XML", xmlStr);

                conn.Open();
                cmd.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 建立資料庫連線
        /// </summary>
        /// <param name="configName"></param>
        /// <returns></returns>
        private string BuildDecryptedConnection(string configName)
        {
            Class1 tkid = new Class1();
            SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings[configName].ConnectionString);
            builder.Password = tkid.Decryption(builder.Password);
            builder.UserID = tkid.Decryption(builder.UserID);
            return builder.ConnectionString;
        }
        /// <summary>
        /// 找出申請者的GROUP_ID
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="targetGroupCode"></param>
        /// <param name="depName"></param>
        /// <param name="depNo"></param>
        /// <returns></returns>
        private string GetGroupId(DataTable dt, string targetGroupCode, out string depName, out string depNo)
        {
            foreach (DataRow row in dt.Rows)
            {
                if (row["GROUP_CODE"].ToString() == targetGroupCode)
                {
                    depName = row["DEPNAME"].ToString();
                    depNo = row["DEPNO"].ToString();
                    return row["GROUP_ID"].ToString();
                }
            }
            depName = dt.Rows[0]["DEPNAME"].ToString();
            depNo = dt.Rows[0]["DEPNO"].ToString();
            return dt.Rows[0]["GROUP_ID"].ToString();
        }

        /// <summary>
        /// 建立 Applicant
        /// </summary>
        /// <param name="xmlDoc"></param>
        /// <param name="account"></param>
        /// <param name="groupId"></param>
        /// <param name="jobTitleId"></param>
        /// <returns></returns>
        private XmlElement CreateApplicant(XmlDocument xmlDoc, string account, string groupId, string jobTitleId)
        {
            XmlElement applicant = xmlDoc.CreateElement("Applicant");
            applicant.SetAttribute("account", account);
            applicant.SetAttribute("groupId", groupId);
            applicant.SetAttribute("jobTitleId", jobTitleId);
            return applicant;
        }
        /// <summary>
        /// 建立 FieldItem
        /// </summary>
        /// <param name="xmlDoc"></param>
        /// <param name="parent"></param>
        /// <param name="fieldId"></param>
        /// <param name="fieldValue"></param>
        /// <param name="fillerName"></param>
        /// <param name="fillerUserGuid"></param>
        /// <param name="fillerAccount"></param>
        /// <param name="realValue"></param>
        /// <returns></returns>
        private XmlElement AddFieldItem(XmlDocument xmlDoc, XmlElement parent, string fieldId, string fieldValue, string fillerName, string fillerUserGuid, string fillerAccount, string realValue = "", string customValue = "")
        {
            XmlElement fieldItem = xmlDoc.CreateElement("FieldItem");
            fieldItem.SetAttribute("fieldId", fieldId);
            fieldItem.SetAttribute("fieldValue", fieldValue);
            fieldItem.SetAttribute("realValue", realValue);
            fieldItem.SetAttribute("customValue", customValue);
            fieldItem.SetAttribute("enableSearch", "True");
            fieldItem.SetAttribute("fillerName", fillerName);
            fieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            fieldItem.SetAttribute("fillerAccount", fillerAccount);
            fieldItem.SetAttribute("fillSiteId", "");
            parent.AppendChild(fieldItem);
            return fieldItem;
        }

        /// <summary>
        /// 建立 Cell
        /// </summary>
        /// <param name="xmlDoc"></param>
        /// <param name="row"></param>
        /// <param name="od"></param>
        /// <param name="fid"></param>
        /// <param name="fid"></param>
        /// <param name="withFieldMessage"></param>
        private void AppendCellToRow(XmlDocument xmlDoc, XmlElement row, DataRow od, string fid, bool withFieldMessage = false,string cellfieldValue = "")
        {
            string value = od.Table.Columns.Contains(fid) ? od[fid].ToString() : "";

            if (!string.IsNullOrEmpty(cellfieldValue))
            {
                value = cellfieldValue;
            }
           

            XmlElement cell = xmlDoc.CreateElement("Cell");
            cell.SetAttribute("fieldId", fid);
            cell.SetAttribute("fieldValue", value);
            cell.SetAttribute("realValue", "");
            cell.SetAttribute("customValue", "");
            cell.SetAttribute("enableSearch", "True");

            if (withFieldMessage)
            {
                cell.SetAttribute("fieldMessage", "Y");
            }

            row.AppendChild(cell);
        }



        public void ADDTACK(XmlElement Form)
        {
            //Ede.Uof.WKF.Utility.TaskUtilityUCO taskUCO = new Ede.Uof.WKF.Utility.TaskUtilityUCO();

            //string result = taskUCO.WebService_CreateTask(Form.OuterXml);

            //XElement resultXE = XElement.Parse(result);

            //string status = "";
            //string formNBR = "";
            //string error = "";

            //if (resultXE.Element("Status").Value == "1")
            //{
            //    status = "起單成功!";
            //    formNBR = resultXE.Element("FormNumber").Value;
            //    NEWTASK_ID = formNBR;

            //    //Logger.Write("TEST", status + formNBR);

            //}
            //else
            //{
            //    status = "起單失敗!";
            //    error = resultXE.Element("Exception").Element("Message").Value;

            //    //Logger.Write("TEST", status + error + "\r\n" + Form.OuterXml);

            //    throw new Exception(status + error + "\r\n" + Form.OuterXml);

            //}
        }


        public DataTable SEARCHPURTAPURTB(string TA001, string TA002)
        {
            DataTable dt = new DataTable();

            try
            {
                string connectionString = BuildDecryptedConnection("dberp");

                using (SqlConnection conn = new SqlConnection(connectionString))
                using (SqlCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"
                                                SELECT 
                                                    CREATOR, TA001, TA002, TA003, TA004, TA012, TB004, TB005, TB006, TB007, TB009, TB011, TA006, TB012, MV002, UDF03 AS QC,
                                                    USER_GUID, NAME,
                                                    (SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].dbo.TB_EB_EMPL_DEP WHERE USER_GUID=TEMP.USER_GUID) AS GROUP_ID,
                                                    (SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].dbo.TB_EB_EMPL_DEP WHERE USER_GUID=TEMP.USER_GUID) AS TITLE_ID,
                                                    TB010, MA002, SUMLA011, ME002,
                                                    (
                                                        SELECT TOP 1 
                                                            '請購日:' + TA003 + ' ，請購單:' + TB001 + TB002 + TB003 +
                                                            ' ，請購數量:' + CONVERT(NVARCHAR, TB009) + ' ' + TB007 +
                                                            ' ，廠商:' + MA002 + ' ，請購人:' + MV002
                                                        FROM [TK].dbo.PURTA, [TK].dbo.PURTB, [TK].dbo.PURMA, [TK].dbo.CMSMV
                                                        WHERE TA001 = TB001 AND TA002 = TB002
                                                          AND TB010 = MA001
                                                          AND TA012 = MV001
                                                          AND TA007 NOT IN ('V')
                                                          AND TB004 = TEMP.TB004
                                                          AND TA001 + TA002 <> TEMP.TA001 + TEMP.TA002
                                                        ORDER BY TA003 DESC
                                                    ) AS LASTTB,
                                                    (
                                                        SELECT TOP 1 
                                                            '進貨日:' + TG003 + ' ，進貨單:' + TH001 + TH002 + TH003 +
                                                            ' ，進貨數量:' + CONVERT(NVARCHAR, TH007) + ' ' + TH008 +
                                                            ' ，廠商:' + MA002
                                                        FROM [TK].dbo.PURTG, [TK].dbo.PURTH, [TK].dbo.PURMA
                                                        WHERE TG001 = TH001 AND TG002 = TH002
                                                          AND TG005 = MA001
                                                          AND TG013 IN ('Y')
                                                          AND TH004 = TEMP.TB004
                                                        ORDER BY TG003 DESC
                                                    ) AS LASTTH
                                                FROM (
                                                    SELECT 
                                                        PURTA.CREATOR, TA001, TA002, TA003, TA004, TA012, TB004, TB005, TB006, TB007, TB009, TB011, TA006, TB012, TB010, PURTA.UDF03,
                                                        U.USER_GUID, U.NAME,
                                                        (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001 = TA012) AS MV002,
                                                        (SELECT TOP 1 MA002 FROM [TK].dbo.PURMA WHERE MA001 = TB010) AS MA002,
                                                        (SELECT ISNULL(SUM(LA005 * LA011), 0) 
                                                         FROM [TK].dbo.INVLA WITH(NOLOCK) 
                                                         WHERE LA001 = TB004 AND LA009 IN ('20004','20006','20008','20019','20020')) AS SUMLA011,
                                                        ME002
                                                    FROM [TK].dbo.PURTB
                                                    JOIN [TK].dbo.PURTA ON TA001 = TB001 AND TA002 = TB002
                                                    LEFT JOIN [192.168.1.223].[UOF].dbo.TB_EB_USER U ON U.ACCOUNT = TA012 COLLATE Chinese_Taiwan_Stroke_BIN
                                                    LEFT JOIN [TK].dbo.CMSME ON ME001 = TA004
                                                    WHERE TA001 = '{0}' AND TA002 = '{1}'
                                                ) AS TEMP
                                            ",  TA001, TA002);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }

                return dt.Rows.Count > 0 ? dt : null;
            }
            catch
            {
                return null;
            }
        }


        /// <summary>
        /// ERP中，找出要送UOF簽核的請購單
        /// </summary>
        public void ADDTOUOFPURTAB()
        {
            try
            {
                string connectionString = BuildDecryptedConnection("dberp");

                using (sqlConn = new SqlConnection(connectionString))
                {
                    DataTable purtaData = new DataTable();
                    sbSql.Clear();
                    sbSql.AppendLine(@"
                                        SELECT TA001, TA002, UDF01
                                        FROM [TK].dbo.PURTA
                                        WHERE TA007 = 'N' AND (UDF01 IN ('Y','y'))
                                        ORDER BY TA001, TA002
                                    ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {                        
                        adapter.Fill(purtaData);                       
                    }

                    if (purtaData.Rows.Count > 0)
                    {
                        foreach (DataRow row in purtaData.Rows)
                        {
                            string ta001 = row["TA001"].ToString().Trim();
                            string ta002 = row["TA002"].ToString().Trim();
                            
                            //將ERP的請購單，轉入UOF的請購單
                            ADDTB_WKF_EXTERNAL_TASK_PURTAB(ta001, ta002);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議可加入 log 紀錄錯誤訊息
                //Console.WriteLine("ADDTOUOFPURTAB 發生錯誤：" + ex.Message);
            }
            finally
            {
                if (sqlConn != null && sqlConn.State == ConnectionState.Open)
                {
                    sqlConn.Close();
                }
            }

            UPDATE_PURTAUDF01();
        }
        /// <summary>
        /// 更新ERP的請購單的UDF01，避免重覆轉入UOF
        /// </summary>
        public void UPDATE_PURTAUDF01()
        {
            StringBuilder sql = new StringBuilder();

            sql.AppendLine(@"
                                UPDATE [TK].dbo.PURTA  
                                SET UDF01 = 'UOF', TA016 = 'N'
                                WHERE TA007 = 'N' AND (UDF01 IN ('Y','y'))
                            ");

            using (SqlConnection conn = new SqlConnection(BuildDecryptedConnection("dberp")))
            {
                int result = ExecuteSqlWithTransaction(conn, sql.ToString());
                //Console.WriteLine("更新筆數：" + result.ToString());
            }
        }
        /// <summary>
        /// SQL的執行語法
        /// </summary>
        /// <param name="conn"></param>
        /// <param name="sql"></param>
        /// <returns></returns>
        private int ExecuteSqlWithTransaction(SqlConnection conn, string sql)
        {
            using (SqlCommand cmd = conn.CreateCommand())
            {
                SqlTransaction tran = null;
                try
                {
                    conn.Open();
                    tran = conn.BeginTransaction();
                    cmd.Transaction = tran;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;

                    int result = cmd.ExecuteNonQuery();

                    if (result > 0)
                        tran.Commit();
                    else
                        tran.Rollback();

                    return result;
                }
                catch (Exception ex)
                {
                    if (tran != null)
                        tran.Rollback();

                    Console.WriteLine("執行 SQL 發生錯誤：" + ex.Message);
                    return 0;
                }
                finally
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();
                }
            }
        }

        public DataTable SEARCHUOFDEP(string account)
        {
            try
            {
                string connectionString = BuildDecryptedConnection("dberp");

                using (SqlConnection sqlConn = new SqlConnection(connectionString))
                {
                    string sql = string.Format(@"
                                       SELECT 
                                        [GROUP_NAME] AS 'DEPNAME',
                                        [TB_EB_EMPL_DEP].[GROUP_ID] + ',' + [GROUP_NAME] + ',False' AS 'DEPNO',
                                        [TB_EB_USER].[USER_GUID],
                                        [ACCOUNT],
                                        [NAME],
                                        [TB_EB_EMPL_DEP].[GROUP_ID],
                                        [TITLE_ID],
                                        [GROUP_NAME],
                                        [GROUP_CODE],
                                        [TB_EB_EMPL_DEP].ORDERS
                                        FROM [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                        JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP]  ON [TB_EB_USER].[USER_GUID] = [TB_EB_EMPL_DEP].[USER_GUID]
                                        JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_GROUP]  ON [TB_EB_EMPL_DEP].[GROUP_ID] = [TB_EB_GROUP].[GROUP_ID]
                                        WHERE ISNULL([TB_EB_GROUP].[GROUP_CODE], '') <> ''
                                        AND [TB_EB_USER] .[ACCOUNT] = '{0}'
                                        ORDER BY [TB_EB_EMPL_DEP].ORDERS
                                        ",
                                         account);

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sql, sqlConn))
                    using (DataSet ds = new DataSet())
                    {
                        sqlConn.Open();
                        adapter.Fill(ds);

                        return ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 ? ds.Tables[0] : null;
                    }
                }
            }
            catch (Exception ex)
            {
                // log ex if needed
                return null;
            }
        }

        /// <summary>
        /// ERP訂單轉到UOF簽核
        /// 取消不用了，因為改用生管做訂單協調
        /// </summary>
        public void ADDCOPTCCOPTD()
        {
            //try
            //{
            //    string connStr = BuildDecryptedConnection("dberp");
            //    using (SqlConnection sqlConn = new SqlConnection(connStr))
            //    {
            //        string sql = @"
            //                        SELECT TC001, TC002
            //                        FROM [TK].dbo.COPTC
            //                        WHERE TC027 = 'N' AND UDF02 IN ('Y','y')
            //                        ORDER BY TC001, TC002
            //                        ";

            //        using (SqlDataAdapter adapter = new SqlDataAdapter(sql, sqlConn))
            //        {
            //            DataSet ds = new DataSet();
            //            sqlConn.Open();
            //            adapter.Fill(ds);

            //            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            //            {
            //                foreach (DataRow dr in ds.Tables[0].Rows)
            //                {
            //                    string tc001 = dr["TC001"].ToString().Trim();
            //                    string tc002 = dr["TC002"].ToString().Trim();
            //                    ADDTB_WKF_EXTERNAL_TASK_COPTCCOPTD(tc001, tc002);
            //                }
            //            }
            //        }
            //    }
            //}
            //catch (Exception ex)
            //{
            //    // TODO: log exception or handle error
            //    throw; // 建議不要悶聲吞氣，至少記錄錯誤
            //}

            //UPDATECOPTCUDF02();
        }


        public void ADDTB_WKF_EXTERNAL_TASK_COPTCCOPTD(string TC001, string TC002)
        {
            DataTable DT = SEARCHCOPTCCOPTD(TC001, TC002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["TC006"].ToString());

            string account = DT.Rows[0]["TC006"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["NAME"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string BA = DT.Rows[0]["BA"].ToString();
            string BANAME = DT.Rows[0]["BANAME"].ToString();
            string BA_USER_GUID = DT.Rows[0]["BA_USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TC001"].ToString().Trim() + DT.Rows[0]["TC002"].ToString().Trim();

            // 找表單版本 ID
            string COPID = SEARCHFORM_UOF_VERSION_ID("COP10.訂單");

            // 建立 XML
            XmlDocument xmlDoc = new XmlDocument();
            XmlElement form = xmlDoc.CreateElement("Form");
            if (!string.IsNullOrEmpty(COPID)) form.SetAttribute("formVersionId", COPID);
            form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(form);

            // 建立 Applicant 節點（用共用方法）
            XmlElement applicant = CreateApplicant(xmlDoc, account, groupId, jobTitleId);
            form.AppendChild(applicant);

            // 建立 Comment 節點
            XmlElement comment = xmlDoc.CreateElement("Comment");
            comment.InnerText = "申請者意見";
            applicant.AppendChild(comment);

            // 建立 FormFieldValue 節點
            XmlElement formFieldValue = xmlDoc.CreateElement("FormFieldValue");
            form.AppendChild(formFieldValue);

            // 後續可用 AddFieldItem 新增欄位
            // AddFieldItem(xmlDoc, formFieldValue, "欄位名", "欄位值", fillerName, fillerUserGuid, account, [可選參數]);

            // 假設 AddFieldItem 方法簽名是：
            // AddFieldItem(XmlDocument doc, XmlElement parentNode, string fieldId, string fieldValue, string fillerName, string fillerUserGuid, string fillerAccount, string realValue = "", string fillSiteId = "")

            // 建立欄位資料
            //(XmlDocument xmlDoc, XmlElement parent, string fieldId, string fieldValue, string fillerName, string fillerUserGuid, string fillerAccount, string realValue = "", string customValue = "")
            AddFieldItem(xmlDoc, formFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC001", DT.Rows[0]["TC001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC002", DT.Rows[0]["TC002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "COPTCUDF01", COPTCUDF01, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC003", DT.Rows[0]["TC003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC004", DT.Rows[0]["TC004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC053", DT.Rows[0]["TC053"].ToString(), fillerName, fillerUserGuid, account);

            //建立userset
            var xElement = new XElement(
                  new XElement("UserSet",
                      new XElement("Element", new XAttribute("type", "user"),
                          new XElement("userId", fillerUserGuid)
                          )
                          )
                        );

            //TC006 表單編號	
            //TC006 特殊組合字串和 realValue
            string tc006Value = DT.Rows[0]["NAME"].ToString() + "(" + DT.Rows[0]["TC006"].ToString() + ")";
            string tc006RealValue = xElement.ToString();
            AddFieldItem(xmlDoc, formFieldValue, "TC006", tc006Value, fillerName, fillerUserGuid, account, tc006RealValue);
            // MV002 簡單字串
            AddFieldItem(xmlDoc, formFieldValue, "MV002", DT.Rows[0]["NAME"].ToString(), fillerName, fillerUserGuid, account);

            //建立userset
            var xElement_BA = new XElement(
                  new XElement("UserSet",
                      new XElement("Element", new XAttribute("type", "user"),
                          new XElement("userId", BA_USER_GUID)
                          )
                          )
                        );

            //建立節點FieldItem
            AddFieldItem(xmlDoc, formFieldValue, "BA", BANAME + "(" + BA + ")", fillerName, fillerUserGuid, account, xElement_BA.ToString());
            AddFieldItem(xmlDoc, formFieldValue, "BANAME", BANAME, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC015", DT.Rows[0]["TC015"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC008", DT.Rows[0]["TC008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC009", DT.Rows[0]["TC009"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC045", DT.Rows[0]["TC045"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC029", DT.Rows[0]["TC029"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC030", DT.Rows[0]["TC030"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC041", DT.Rows[0]["TC041"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC016", DT.Rows[0]["NEWTC016"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC124", DT.Rows[0]["TC124"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC031", DT.Rows[0]["TC031"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC043", DT.Rows[0]["TC043"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC044", DT.Rows[0]["TC044"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC046", DT.Rows[0]["TC046"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC018", DT.Rows[0]["TC018"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC010", DT.Rows[0]["TC010"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC012", DT.Rows[0]["TC012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC035", DT.Rows[0]["TC035"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC054", DT.Rows[0]["TC054"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC055", DT.Rows[0]["TC055"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC065", DT.Rows[0]["TC065"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC042", DT.Rows[0]["TC042"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC014", DT.Rows[0]["TC014"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC019", DT.Rows[0]["TC019"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC032", DT.Rows[0]["TC032"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC033", DT.Rows[0]["TC033"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC039", DT.Rows[0]["TC039"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC121", DT.Rows[0]["NEWTC016"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC094", DT.Rows[0]["TC094"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC063", DT.Rows[0]["TC063"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC115", DT.Rows[0]["TC115"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC116", DT.Rows[0]["TC116"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "MOC", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "PUR", "", fillerName, fillerUserGuid, account);
            
            AddFieldItem(xmlDoc, formFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);
            XmlElement dataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode detailsNode = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            detailsNode.AppendChild(dataGrid);
            int rowIndex = 0;

            foreach (DataRow od in DT.Rows)
            {
                XmlElement row = xmlDoc.CreateElement("Row");
                row.SetAttribute("order", rowIndex.ToString());

                AppendCellToRow(xmlDoc, row, od, "TB004");
                AppendCellToRow(xmlDoc, row, od, "TB005");
                AppendCellToRow(xmlDoc, row, od, "TB006");
                AppendCellToRow(xmlDoc, row, od, "TB007");
                AppendCellToRow(xmlDoc, row, od, "TB009");
                AppendCellToRow(xmlDoc, row, od, "SUMLA011");
                AppendCellToRow(xmlDoc, row, od, "TB011");
                AppendCellToRow(xmlDoc, row, od, "TB010");
                AppendCellToRow(xmlDoc, row, od, "MA002");
                AppendCellToRow(xmlDoc, row, od, "TB012");
                AppendCellToRow(xmlDoc, row, od, "LASTTB");
                AppendCellToRow(xmlDoc, row, od, "LASTTH");

                dataGrid.AppendChild(row);
                rowIndex++;
            }


            ////用ADDTACK，直接啟動起單
            //ADDTACK(Form);

            //ADD TO DB
            //string connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ToString();

            //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
            //sqlConn = new SqlConnection(connectionString);

            //20210902密
            // 解密連線字串
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            // 建立連線
            string connectionString = sqlsb.ConnectionString;

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(), @XML, 2, @FormNbr)
                                    ");

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                using (SqlCommand command = new SqlCommand(queryString.ToString(), connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = form.OuterXml;
                    command.Parameters.Add("@FormNbr", SqlDbType.NVarChar).Value = EXTERNAL_FORM_NBR;

                    connection.Open();
                    int count = command.ExecuteNonQuery();
                    // 可根據 count 判斷是否成功插入
                }
            }
            catch (Exception ex)
            {
                // 建議補上紀錄錯誤或印出訊息
                Console.WriteLine("資料寫入失敗：" + ex.Message);
            }

        }


        public void UPDATE_COPTC_UDF02()
        {
            StringBuilder sql = new StringBuilder();

            sql.AppendLine(@"
                            UPDATE [TK].dbo.COPTC 
                            SET UDF02 = 'UOF'
                            WHERE TC027 = 'N' AND UDF02 IN ('Y','y')
                            ");

            using (SqlConnection conn = new SqlConnection(BuildDecryptedConnection("dberp")))
            {
                int result = ExecuteSqlWithTransaction(conn, sql.ToString());
                // 可加上 log 或訊息輸出
                // Console.WriteLine("更新筆數：" + result);
            }
        }

        public DataTable SEARCHCOPTCCOPTD(string TC001, string TC002)
        {
            DataTable dtResult = new DataTable();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.Append(@"
                                SELECT 
                                    COMPANY,CREATOR,USR_GROUP,CREATE_DATE,MODIFIER,MODI_DATE,FLAG,CREATE_TIME,MODI_TIME,TRANS_TYPE,TRANS_NAME,
                                    sync_date,sync_time,sync_mark,sync_count,DataUser,DataGroup,
                                    TC001,TC002,TC003,TC004,TC005,TC006,TC007,TC008,TC009,TC010,
                                    TC011,TC012,TC013,TC014,TC015,TC016,TC017,TC018,TC019,TC020,
                                    TC021,TC022,TC023,TC024,TC025,TC026,TC027,TC028,TC029,TC030,
                                    TC031,TC032,TC033,TC034,TC035,TC036,TC037,TC038,TC039,TC040,
                                    TC041,TC042,TC043,TC044,TC045,TC046,TC047,TC048,TC049,TC050,
                                    TC051,TC052,TC053,TC054,TC055,TC056,TC057,TC058,TC059,TC060,
                                    TC061,TC062,TC063,TC064,TC065,TC066,TC067,TC068,TC069,TC070,
                                    TC071,TC072,TC073,TC074,TC075,TC076,TC077,TC078,TC079,TC080,
                                    TC081,TC082,TC083,TC084,TC085,TC086,TC087,TC088,TC089,TC090,
                                    TC091,TC092,TC093,TC094,TC095,TC096,TC097,TC098,TC099,TC100,
                                    TC101,TC102,TC103,TC104,TC105,TC106,TC107,TC108,TC109,TC110,
                                    TC111,TC112,TC113,TC114,TC115,TC116,TC117,TC118,TC119,TC120,
                                    TC121,TC122,TC123,TC124,TC125,TC126,TC127,TC128,TC129,TC130,
                                    TC131,TC132,TC133,TC134,TC135,TC136,TC137,TC138,TC139,TC140,
                                    TC141,TC142,TC143,TC144,TC145,TC146,
                                    UDF01,UDF02,UDF03,UDF04,UDF05,UDF06,UDF07,UDF08,UDF09,UDF10,
                                    TD001,TD002,TD003,TD004,TD005,TD006,TD007,TD008,TD009,TD010,
                                    TD011,TD012,TD013,TD014,TD015,TD016,TD017,TD018,TD019,TD020,
                                    TD021,TD022,TD023,TD024,TD025,TD026,TD027,TD028,TD029,TD030,
                                    TD031,TD032,TD033,TD034,TD035,TD036,TD037,TD038,TD039,TD040,
                                    TD041,TD042,TD043,TD044,TD045,TD046,TD047,TD048,TD049,TD050,
                                    TD051,TD052,TD053,TD054,TD055,TD056,TD057,TD058,TD059,TD060,
                                    TD061,TD062,TD063,TD064,TD065,TD066,TD067,TD068,TD069,TD070,
                                    TD071,TD072,TD073,TD074,TD075,TD076,TD077,TD078,TD079,TD080,
                                    TD081,TD082,TD083,TD084,TD085,TD086,TD087,TD088,TD089,TD090,
                                    TD091,TD092,TD093,TD094,TD095,TD096,TD097,TD098,TD099,TD100,
                                    TD101,TD102,TD103,TD104,TD105,TD106,TD107,TD108,TD109,TD110,
                                    TD111,TD112,TD113,
                                    COPTDUDF01,COPTDUDF02,COPTDUDF03,COPTDUDF04,COPTDUDF05,COPTDUDF06,COPTDUDF07,COPTDUDF08,COPTDUDF09,COPTDUDF10,TD200,
                                    USER_GUID,NAME,
                                    (SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID=TEMP.USER_GUID) AS GROUP_ID,
                                    (SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID=TEMP.USER_GUID) AS TITLE_ID,
                                    MA002,
                                    CASE WHEN TC016='1' THEN '1.應稅內含'  
                                         WHEN TC016='2' THEN '2.應稅外加'  
                                         WHEN TC016='3' THEN '3.零稅率'  
                                         WHEN TC016='4' THEN '4.免稅'  
                                         WHEN TC016='9' THEN '9.不計稅'  
                                         ELSE '' END AS NEWTC016,
                                    CASE WHEN TC121='1' THEN '1.二聯式' 
                                         WHEN TC121='2' THEN '2.三聯式' 
                                         WHEN TC121='3' THEN '3.二聯式收銀機發票' 
                                         WHEN TC121='4' THEN '4.三聯式收銀機發票' 
                                         WHEN TC121='5' THEN '5.電子計算機發票' 
                                         WHEN TC121='6' THEN '6.免用統一發票' 
                                         WHEN TC121='7' THEN '7.電子發票' 
                                         ELSE '' END AS NEWTC121,
                                    BA,
                                    BANAME,
                                    (SELECT TOP 1 USER_GUID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_USER] WHERE ACCOUNT=BA COLLATE Chinese_Taiwan_Stroke_BIN) AS BA_USER_GUID
                                FROM 
                                (
                                    SELECT 
                                        COPTC.COMPANY,COPTC.CREATOR,COPTC.USR_GROUP,COPTC.CREATE_DATE,COPTC.MODIFIER,COPTC.MODI_DATE,COPTC.FLAG,COPTC.CREATE_TIME,COPTC.MODI_TIME,COPTC.TRANS_TYPE,COPTC.TRANS_NAME,
                                        COPTC.sync_date,COPTC.sync_time,COPTC.sync_mark,COPTC.sync_count,COPTC.DataUser,COPTC.DataGroup,
                                        COPTC.TC001,COPTC.TC002,COPTC.TC003,COPTC.TC004,COPTC.TC005,COPTC.TC006,COPTC.TC007,COPTC.TC008,COPTC.TC009,COPTC.TC010,
                                        COPTC.TC011,COPTC.TC012,COPTC.TC013,COPTC.TC014,COPTC.TC015,COPTC.TC016,COPTC.TC017,COPTC.TC018,COPTC.TC019,COPTC.TC020,
                                        COPTC.TC021,COPTC.TC022,COPTC.TC023,COPTC.TC024,COPTC.TC025,COPTC.TC026,COPTC.TC027,COPTC.TC028,COPTC.TC029,COPTC.TC030,
                                        COPTC.TC031,COPTC.TC032,COPTC.TC033,COPTC.TC034,COPTC.TC035,COPTC.TC036,COPTC.TC037,COPTC.TC038,COPTC.TC039,COPTC.TC040,
                                        COPTC.TC041,COPTC.TC042,COPTC.TC043,COPTC.TC044,COPTC.TC045,COPTC.TC046,COPTC.TC047,COPTC.TC048,COPTC.TC049,COPTC.TC050,
                                        COPTC.TC051,COPTC.TC052,COPTC.TC053,COPTC.TC054,COPTC.TC055,COPTC.TC056,COPTC.TC057,COPTC.TC058,COPTC.TC059,COPTC.TC060,
                                        COPTC.TC061,COPTC.TC062,COPTC.TC063,COPTC.TC064,COPTC.TC065,COPTC.TC066,COPTC.TC067,COPTC.TC068,COPTC.TC069,COPTC.TC070,
                                        COPTC.TC071,COPTC.TC072,COPTC.TC073,COPTC.TC074,COPTC.TC075,COPTC.TC076,COPTC.TC077,COPTC.TC078,COPTC.TC079,COPTC.TC080,
                                        COPTC.TC081,COPTC.TC082,COPTC.TC083,COPTC.TC084,COPTC.TC085,COPTC.TC086,COPTC.TC087,COPTC.TC088,COPTC.TC089,COPTC.TC090,
                                        COPTC.TC091,COPTC.TC092,COPTC.TC093,COPTC.TC094,COPTC.TC095,COPTC.TC096,COPTC.TC097,COPTC.TC098,COPTC.TC099,COPTC.TC100,
                                        COPTC.TC101,COPTC.TC102,COPTC.TC103,COPTC.TC104,COPTC.TC105,COPTC.TC106,COPTC.TC107,COPTC.TC108,COPTC.TC109,COPTC.TC110,
                                        COPTC.TC111,COPTC.TC112,COPTC.TC113,COPTC.TC114,COPTC.TC115,COPTC.TC116,COPTC.TC117,COPTC.TC118,COPTC.TC119,COPTC.TC120,
                                        COPTC.TC121,COPTC.TC122,COPTC.TC123,COPTC.TC124,COPTC.TC125,COPTC.TC126,COPTC.TC127,COPTC.TC128,COPTC.TC129,COPTC.TC130,
                                        COPTC.TC131,COPTC.TC132,COPTC.TC133,COPTC.TC134,COPTC.TC135,COPTC.TC136,COPTC.TC137,COPTC.TC138,COPTC.TC139,COPTC.TC140,
                                        COPTC.TC141,COPTC.TC142,COPTC.TC143,COPTC.TC144,COPTC.TC145,COPTC.TC146,
                                        COPTC.UDF01,COPTC.UDF02,COPTC.UDF03,COPTC.UDF04,COPTC.UDF05,COPTC.UDF06,COPTC.UDF07,COPTC.UDF08,COPTC.UDF09,COPTC.UDF10,
                                        COPTD.TD001,COPTD.TD002,COPTD.TD003,COPTD.TD004,COPTD.TD005,COPTD.TD006,COPTD.TD007,COPTD.TD008,COPTD.TD009,COPTD.TD010,
                                        COPTD.TD011,COPTD.TD012,COPTD.TD013,COPTD.TD014,COPTD.TD015,COPTD.TD016,COPTD.TD017,COPTD.TD018,COPTD.TD019,COPTD.TD020,
                                        COPTD.TD021,COPTD.TD022,COPTD.TD023,COPTD.TD024,COPTD.TD025,COPTD.TD026,COPTD.TD027,COPTD.TD028,COPTD.TD029,COPTD.TD030,
                                        COPTD.TD031,COPTD.TD032,COPTD.TD033,COPTD.TD034,COPTD.TD035,COPTD.TD036,COPTD.TD037,COPTD.TD038,COPTD.TD039,COPTD.TD040,
                                        COPTD.TD041,COPTD.TD042,COPTD.TD043,COPTD.TD044,COPTD.TD045,COPTD.TD046,COPTD.TD047,COPTD.TD048,COPTD.TD049,COPTD.TD050,
                                        COPTD.TD051,COPTD.TD052,COPTD.TD053,COPTD.TD054,COPTD.TD055,COPTD.TD056,COPTD.TD057,COPTD.TD058,COPTD.TD059,COPTD.TD060,
                                        COPTD.TD061,COPTD.TD062,COPTD.TD063,COPTD.TD064,COPTD.TD065,COPTD.TD066,COPTD.TD067,COPTD.TD068,COPTD.TD069,COPTD.TD070,
                                        COPTD.TD071,COPTD.TD072,COPTD.TD073,COPTD.TD074,COPTD.TD075,COPTD.TD076,COPTD.TD077,COPTD.TD078,COPTD.TD079,COPTD.TD080,
                                        COPTD.TD081,COPTD.TD082,COPTD.TD083,COPTD.TD084,COPTD.TD085,COPTD.TD086,COPTD.TD087,COPTD.TD088,COPTD.TD089,COPTD.TD090,
                                        COPTD.TD091,COPTD.TD092,COPTD.TD093,COPTD.TD094,COPTD.TD095,COPTD.TD096,COPTD.TD097,COPTD.TD098,COPTD.TD099,COPTD.TD100,
                                        COPTD.TD101,COPTD.TD102,COPTD.TD103,COPTD.TD104,COPTD.TD105,COPTD.TD106,COPTD.TD107,COPTD.TD108,COPTD.TD109,COPTD.TD110,
                                        COPTD.TD111,COPTD.TD112,COPTD.TD113,
                                        COPTD.UDF01 AS COPTDUDF01,COPTD.UDF02 AS COPTDUDF02,COPTD.UDF03 AS COPTDUDF03,COPTD.UDF04 AS COPTDUDF04,COPTD.UDF05 AS COPTDUDF05,
                                        COPTD.UDF06 AS COPTDUDF06,COPTD.UDF07 AS COPTDUDF07,COPTD.UDF08 AS COPTDUDF08,COPTD.UDF09 AS COPTDUDF09,COPTD.UDF10 AS COPTDUDF10,
                                        COPTD.TD200,
                                        TB_EB_USER.USER_GUID, TB_EB_USER.NAME,
                                        (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=TC006) AS MV002,
                                        (SELECT TOP 1 MA002 FROM [TK].dbo.COPMA WHERE MA001=TC004) AS MA002,
                                        (SELECT TOP 1 COPMA.UDF04 FROM [TK].dbo.COPMA,[TK].dbo.CMSMV WHERE COPMA.UDF04=CMSMV.MV001 AND COPMA.MA001=TC004) AS BA,
                                        (SELECT TOP 1 CMSMV.MV002 FROM [TK].dbo.COPMA,[TK].dbo.CMSMV WHERE COPMA.UDF04=CMSMV.MV001 AND COPMA.MA001=TC004) AS BANAME
                                    FROM [TK].dbo.COPTD
                                    INNER JOIN [TK].dbo.COPTC ON TC001=TD001 AND TC002=TD002
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON TB_EB_USER.ACCOUNT = TC006 COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE TC001 = @TC001 AND TC002 = @TC002
                                ) AS TEMP
                            ");

                    using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@TC001", TC001);
                        cmd.Parameters.AddWithValue("@TC002", TC002);

                        using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                        {
                            sqlConn.Open();
                            adapter.Fill(dtResult);
                            sqlConn.Close();
                        }
                    }
                }

                if (dtResult.Rows.Count > 0)
                    return dtResult;
                else
                    return null;
            }
            catch (Exception ex)
            {
                Console.WriteLine("錯誤: " + ex.Message);
                return null;
            }
        }

        /// <summary>
        /// ERP訂單變更單 轉到UOF簽核
        /// 取消不用了，因為改用生管做訂單變更 協調
        /// </summary>
        public void ADDCOPTECOPTF()
        {
            //try
            //{
            //    Class1 TKID = new Class1(); // 用new建立類別實體
            //    SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

            //    // 資料庫使用者密碼解密
            //    sqlsb.Password = TKID.Decryption(sqlsb.Password);
            //    sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            //    using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
            //    {
            //        DataSet ds1 = new DataSet();
            //        StringBuilder sbSql = new StringBuilder();

            //        sbSql.Append(@"
            //                        SELECT TE001, TE002, TE003
            //                        FROM [TK].dbo.COPTE
            //                        WHERE TE029 = 'N' AND UDF01 IN ('Y','y')
            //                    ");

            //        using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
            //        {
            //            sqlConn.Open();
            //            ds1.Clear();
            //            adapter1.Fill(ds1, "ds1");
            //        }

            //        if (ds1.Tables["ds1"].Rows.Count > 0)
            //        {
            //            foreach (DataRow dr in ds1.Tables["ds1"].Rows)
            //            {
            //                string te001 = dr["TE001"].ToString().Trim();
            //                string te002 = dr["TE002"].ToString().Trim();
            //                string te003 = dr["TE003"].ToString().Trim();

            //                ADDTB_WKF_EXTERNAL_TASK_COPTECOPTF(te001, te002, te003);
            //            }
            //        }
            //    }
            //}
            //catch (Exception ex)
            //{
            //    // 你可以改成log檔寫入，這裡暫時用Console輸出
            //    Console.WriteLine("ADD COPT ECOPTF 發生錯誤：" + ex.Message);
            //}
            //finally
            //{
            //    if (sqlConn != null && sqlConn.State != System.Data.ConnectionState.Closed)
            //    {
            //        sqlConn.Close();
            //    }
            //}

            //UPDATECOPTEUDF01();
        }


        public void ADDTB_WKF_EXTERNAL_TASK_COPTECOPTF(string TE001, string TE002, string TE003)
        {
            DataTable DT = SEARCHCOPTECOPTF(TE001, TE002, TE003);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["TE009"].ToString());

            string account = DT.Rows[0]["TE009"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["NAME"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string BA = DT.Rows[0]["BA"].ToString();
            string BANAME = DT.Rows[0]["BANAME"].ToString();
            string BA_USER_GUID = DT.Rows[0]["BA_USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TE001"].ToString().Trim() + DT.Rows[0]["TE002"].ToString().Trim() + DT.Rows[0]["TE003"].ToString().Trim();

            COPTCUDF01 = "N";
            foreach (DataRow od in DT.Rows)
            {
                if (od["COPTDUDF01"].ToString() == "Y")
                {
                    COPTCUDF01 = "Y";
                    break;
                }
            }
           
            COPCHANGEID = SEARCHFORM_UOF_VERSION_ID("COP20.訂單變更單");          

            // 建立XML
            XmlDocument xmlDoc = new XmlDocument();
            XmlElement form = xmlDoc.CreateElement("Form");
            if (!string.IsNullOrEmpty(COPCHANGEID)) form.SetAttribute("formVersionId", COPCHANGEID);
            form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(form);
            //建立XML的 applicant 節點
            XmlElement applicant = CreateApplicant(xmlDoc, account, groupId, jobTitleId);
            form.AppendChild(applicant);
            //建立XML的 Comment 節點
            XmlElement comment = xmlDoc.CreateElement("Comment");
            comment.InnerText = "申請者意見";
            applicant.AppendChild(comment);

            //建立節點 FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            //加入至節點底下
            form.AppendChild(FormFieldValue);

            //建立節點FieldItem
            //ID 表單編號	
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE006", DT.Rows[0]["TE006"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE001", DT.Rows[0]["TE001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE002", DT.Rows[0]["TE002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE003", DT.Rows[0]["TE003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "COPTCUDF01", COPTCUDF01, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE038", DT.Rows[0]["TE038"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE007", DT.Rows[0]["TE007"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MA002", DT.Rows[0]["MA002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE011", DT.Rows[0]["TE011"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE111", DT.Rows[0]["TE111"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE012", DT.Rows[0]["TE012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE112", DT.Rows[0]["TE112"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE041", DT.Rows[0]["TE041"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE041C", DT.Rows[0]["TE017"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE137", DT.Rows[0]["TE137"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE137C", DT.Rows[0]["TE117"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE015", DT.Rows[0]["TE015"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE115", DT.Rows[0]["TE115"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE018", DT.Rows[0]["NEWTE018"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE118", DT.Rows[0]["NEWTE118"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE008", DT.Rows[0]["TE008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "CMSME002A", DT.Rows[0]["CMSME002A"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE108", DT.Rows[0]["TE108"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "CMSME002B", DT.Rows[0]["CMSME002B"].ToString(), fillerName, fillerUserGuid, account);

            var xElement = new XElement(
                new XElement("UserSet",
                    new XElement("Element", new XAttribute("type", "user"),
                        new XElement("userId", BA_USER_GUID)
                    )
                )
            );

            AddFieldItem(xmlDoc, FormFieldValue, "TE009",
                DT.Rows[0]["CMSMV002A"].ToString() + "(" + DT.Rows[0]["TE009"].ToString() + ")",
                xElement.ToString(),
                fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "CMSMV002A", DT.Rows[0]["CMSMV002A"].ToString(), "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE109", DT.Rows[0]["TE109"].ToString(), "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "CMSMV002B", DT.Rows[0]["CMSMV002B"].ToString(), "", fillerName, fillerUserGuid, account);

            // 建立 userset 範例
            var xElement_BA = new XElement(
                new XElement("UserSet",
                    new XElement("Element", new XAttribute("type", "user"),
                        new XElement("userId", BA_USER_GUID)
                    )
                )
            );

            // 依序新增 FieldItem
            AddFieldItem(xmlDoc, FormFieldValue, "BA", BANAME + "(" + BA + ")", xElement_BA.ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "BANAME", BANAME, "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE040", DT.Rows[0]["TE040"].ToString(), "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE136", DT.Rows[0]["TE136"].ToString(), "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE013", DT.Rows[0]["TE013"].ToString(), "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE113", DT.Rows[0]["TE113"].ToString(), "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE050", DT.Rows[0]["TE050"].ToString(), "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "UDF05", DT.Rows[0]["COPTCUDF05"].ToString(), "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MOC", "", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "PUR", "", "", fillerName, fillerUserGuid, account);


            // 建立 DataGrid
            XmlElement tbField = AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);
            XmlElement dataGrid = xmlDoc.CreateElement("DataGrid");
            tbField.AppendChild(dataGrid);

            int rowIndex = 0;

            foreach (DataRow od in DT.Rows)
            {
                XmlElement row = xmlDoc.CreateElement("Row");
                row.SetAttribute("order", rowIndex.ToString());

                // 用 AppendCellToRow 依序加入各欄位 Cell
                AppendCellToRow(xmlDoc, row, od, "TF004");
                AppendCellToRow(xmlDoc, row, od, "TF005");
                AppendCellToRow(xmlDoc, row, od, "TF006");
                AppendCellToRow(xmlDoc, row, od, "TF007");
                AppendCellToRow(xmlDoc, row, od, "TF009");
                AppendCellToRow(xmlDoc, row, od, "TF020");
                AppendCellToRow(xmlDoc, row, od, "TF010");
                AppendCellToRow(xmlDoc, row, od, "TF013");
                AppendCellToRow(xmlDoc, row, od, "TF021");
                AppendCellToRow(xmlDoc, row, od, "TF014");
                AppendCellToRow(xmlDoc, row, od, "TF015");
                AppendCellToRow(xmlDoc, row, od, "TF024");
                AppendCellToRow(xmlDoc, row, od, "TF025");
                AppendCellToRow(xmlDoc, row, od, "TF018");
                AppendCellToRow(xmlDoc, row, od, "TF105");
                AppendCellToRow(xmlDoc, row, od, "TF106");
                AppendCellToRow(xmlDoc, row, od, "TF107");
                AppendCellToRow(xmlDoc, row, od, "TF109");
                AppendCellToRow(xmlDoc, row, od, "TF120");
                AppendCellToRow(xmlDoc, row, od, "TF110");
                AppendCellToRow(xmlDoc, row, od, "TF113");
                AppendCellToRow(xmlDoc, row, od, "TF121");
                AppendCellToRow(xmlDoc, row, od, "TF114");
                AppendCellToRow(xmlDoc, row, od, "TF115");
                AppendCellToRow(xmlDoc, row, od, "TF126");
                AppendCellToRow(xmlDoc, row, od, "TF127");

                dataGrid.AppendChild(row);
                rowIndex++;
            }

            ////用ADDTACK，直接啟動起單
            //ADDTACK(Form);

            //ADD TO DB
            //string connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ToString();

            //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
            //sqlConn = new SqlConnection(connectionString);

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            // 資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                    (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES (NEWID(), @XML, 2, '{0}')
                                    ", EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                using (SqlCommand command = new SqlCommand(queryString.ToString(), connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = form.OuterXml;

                    connection.Open();
                    int count = command.ExecuteNonQuery();
                    // 可依需求輸出執行結果，例如：
                    // Console.WriteLine($"新增筆數: {count}");
                }
            }
            catch (Exception ex)
            {
                // 記錄或顯示例外訊息，方便除錯
                Console.WriteLine("資料庫寫入錯誤: " + ex.Message);
            }

        }


        public void UPDATECOPTEUDF01()
        {
            StringBuilder sql = new StringBuilder();

            sbSql.AppendFormat(@"
                                    UPDATE  [TK].dbo.COPTE 
                                    SET UDF01 = 'UOF'
                                    WHERE TE029='N' AND UDF01='Y'                                             

                                    ");

            using (SqlConnection conn = new SqlConnection(BuildDecryptedConnection("dberp")))
            {
                int result = ExecuteSqlWithTransaction(conn, sql.ToString());
                //Console.WriteLine("更新筆數：" + result.ToString());
            }
        }
        public DataTable SEARCHCOPTECOPTF(string TE001, string TE002, string TE003)
        {
            try
            {
                string connectionString = BuildDecryptedConnection("dberp");

                string sql = @"
                                SELECT 
                                    [COMPANY],[CREATOR],[USR_GROUP],[CREATE_DATE],[MODIFIER],[MODI_DATE],[FLAG],[CREATE_TIME],[MODI_TIME],[TRANS_TYPE],[TRANS_NAME]
                                    ,[sync_date],[sync_time],[sync_mark],[sync_count],[DataUser],[DataGroup]
                                    ,[TE001],[TE002],[TE003],[TE004],[TE005],[TE006],[TE007],[TE008],[TE009],[TE010]
                                    ,[TE011],[TE012],[TE013],[TE014],[TE015],[TE016],[TE017],[TE018],[TE019],[TE020]
                                    ,[TE021],[TE022],[TE023],[TE024],[TE025],[TE026],[TE027],[TE028],[TE029],[TE030]
                                    ,[TE031],[TE032],[TE033],[TE034],[TE035],[TE036],[TE037],[TE038],[TE039],[TE040]
                                    ,[TE041],[TE042],[TE043],[TE044],[TE045],[TE046],[TE047],[TE048],[TE049],[TE050]
                                    ,[TE051],[TE052],[TE053],[TE054],[TE055],[TE056],[TE057],[TE058],[TE059],[TE060]
                                    ,[TE061],[TE062],[TE063],[TE064],[TE065],[TE066],[TE067],[TE068],[TE069],[TE070]
                                    ,[TE071],[TE072],[TE073],[TE074],[TE075],[TE076],[TE077],[TE078],[TE079],[TE080]
                                    ,[TE081],[TE082],[TE083],[TE084],[TE085],[TE086],[TE087],[TE088]
                                    ,[TE103],[TE107],[TE108],[TE109],[TE110]
                                    ,[TE111],[TE112],[TE113],[TE114],[TE115],[TE116],[TE117],[TE118],[TE119],[TE120]
                                    ,[TE121],[TE122],[TE123],[TE124],[TE125],[TE126],[TE127],[TE128],[TE129],[TE130]
                                    ,[TE131],[TE132],[TE133],[TE134],[TE135],[TE136],[TE137],[TE138],[TE139],[TE140]
                                    ,[TE141],[TE142],[TE143],[TE144],[TE145],[TE146],[TE147],[TE148],[TE149],[TE150]
                                    ,[TE151],[TE152],[TE163],[TE164],[TE165],[TE166],[TE167],[TE168],[TE169],[TE170]
                                    ,[TE171],[TE172],[TE173],[TE174],[TE175],[TE176],[TE177],[TE178],[TE179],[TE180]
                                    ,[TE181],[TE182],[TE183],[TE184],[TE185],[TE186],[TE187],[TE188],[TE189],[TE190]
                                    ,[TE191],[TE192],[TE193],[TE194],[TE195],[TE196],[TE197],[TE198],[TE199]
                                    ,[UDF01],[UDF02],[UDF03],[UDF04],[UDF05],[UDF06],[UDF07],[UDF08],[UDF09],[UDF10]
                                    ,[TF001],[TF002],[TF003],[TF004],[TF005],[TF006],[TF007],[TF008],[TF009],[TF010]
                                    ,[TF011],[TF012],[TF013],[TF014],[TF015],[TF016],[TF017],[TF018],[TF019],[TF020]
                                    ,[TF021],[TF022],[TF023],[TF024],[TF025],[TF026],[TF027],[TF028],[TF029],[TF030]
                                    ,[TF031],[TF032],[TF034],[TF035],[TF036],[TF037],[TF038],[TF039],[TF040],[TF041]
                                    ,[TF042],[TF043],[TF044],[TF045],[TF046],[TF048],[TF049],[TF050]
                                    ,[TF051],[TF052],[TF053],[TF054],[TF055],[TF056],[TF057],[TF058],[TF059],[TF060]
                                    ,[TF061],[TF062],[TF063],[TF064],[TF065],[TF066],[TF067],[TF068],[TF069],[TF070]
                                    ,[TF071],[TF072],[TF073],[TF074],[TF075],[TF076],[TF077],[TF078],[TF079],[TF080]
                                    ,[TF104],[TF105],[TF106],[TF107],[TF108],[TF109],[TF110]
                                    ,[TF111],[TF112],[TF113],[TF114],[TF115],[TF116],[TF117],[TF120]
                                    ,[TF121],[TF122],[TF123],[TF124],[TF125],[TF126],[TF127],[TF128],[TF129],[TF130]
                                    ,[TF131],[TF132],[TF133],[TF134],[TF135],[TF136],[TF137],[TF138],[TF139],[TF140]
                                    ,[TF141],[TF142],[TF143],[TF144],[TF145],[TF146],[TF147],[TF148],[TF149],[TF150]
                                    ,[TF151],[TF152],[TF153],[TF154],[TF155],[TF156],[TF157],[TF158],[TF159],[TF160]
                                    ,[TF161],[TF162],[TF163],[TF164],[TF165],[TF166],[TF167],[TF168],[TF169],[TF170]
                                    ,[TF171],[TF172],[TF173],[TF174],[TF175],[TF176],[TF177],[TF178],[TF179],[TF180]
                                    ,[TF181],[TF182],[TF183],[TF184],[TF185],[TF186],[TF187],[TF188],[TF189],[TF190]
                                    ,[TF191],[TF192],[TF193],[TF194],[TF195],[TF196],[TF197],[TF198],[TF199]
                                    ,[TF200],[TF300]
                                    ,COPTFUDF01,COPTFUDF02,COPTFUDF03,COPTFUDF04,COPTFUDF05,COPTFUDF06,COPTFUDF07,COPTFUDF08,COPTFUDF09,COPTFUDF10
                                    ,USER_GUID,NAME
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    ,MA002
                                    ,CASE WHEN TE018='1' THEN '1.應稅內含'  ELSE (CASE WHEN TE018='2' THEN '2.應稅外加'  ELSE (CASE WHEN TE018='3' THEN '3.零稅率'  ELSE (CASE WHEN TE018='4' THEN '4.免稅'  ELSE (CASE WHEN TE018='9' THEN '9.不計稅'  ELSE '' END) END) END) END ) END AS 'NEWTE018'
                                    ,CASE WHEN TE118='1' THEN '1.應稅內含'  ELSE (CASE WHEN TE118='2' THEN '2.應稅外加'  ELSE (CASE WHEN TE118='3' THEN '3.零稅率'  ELSE (CASE WHEN TE118='4' THEN '4.免稅'  ELSE (CASE WHEN TE118='9' THEN '9.不計稅'  ELSE '' END) END) END) END ) END AS 'NEWTE118'
                                    ,(SELECT TOP 1 ME002 FROM [TK].dbo.CMSME WHERE ME001=TE008) AS 'CMSME002A'
                                    ,(SELECT TOP 1 ME002 FROM [TK].dbo.CMSME WHERE ME001=TE108) AS 'CMSME002B'
                                    ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=TE009) AS 'CMSMV002A'
                                    ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=TE109) AS 'CMSMV002B'
                                    ,(SELECT TOP 1 COPTC.UDF05 FROM [TK].dbo.COPTC WHERE TC001=TE001 AND TC002=TE002) AS 'COPTCUDF05'
                                    ,ISNULL((SELECT TOP 1 COPTD.UDF01 FROM [TK].dbo.COPTD WHERE TD001=TE001 AND TD002=TE002 AND COPTD.UDF01='Y'),'N') AS 'COPTDUDF01'
                                    ,BA
                                    ,BANAME
                                    ,(SELECT TOP 1 [USER_GUID] FROM [192.168.1.223].[UOF].[dbo].[TB_EB_USER] WHERE [ACCOUNT]=BA COLLATE Chinese_Taiwan_Stroke_BIN) AS 'BA_USER_GUID'
                                FROM 
                                (
                                    SELECT 
                                        [COPTE].[COMPANY],[COPTE].[CREATOR],[COPTE].[USR_GROUP],[COPTE].[CREATE_DATE],[COPTE].[MODIFIER],[COPTE].[MODI_DATE],[COPTE].[FLAG],[COPTE].[CREATE_TIME],[COPTE].[MODI_TIME],[COPTE].[TRANS_TYPE],[COPTE].[TRANS_NAME]
                                        ,[COPTE].[sync_date],[COPTE].[sync_time],[COPTE].[sync_mark],[COPTE].[sync_count],[COPTE].[DataUser],[COPTE].[DataGroup]
                                        ,[COPTE].[TE001],[COPTE].[TE002],[COPTE].[TE003],[COPTE].[TE004],[COPTE].[TE005],[COPTE].[TE006],[COPTE].[TE007],[COPTE].[TE008],[COPTE].[TE009],[COPTE].[TE010]
                                        ,[COPTE].[TE011],[COPTE].[TE012],[COPTE].[TE013],[COPTE].[TE014],[COPTE].[TE015],[COPTE].[TE016],[COPTE].[TE017],[COPTE].[TE018],[COPTE].[TE019],[COPTE].[TE020]
                                        ,[COPTE].[TE021],[COPTE].[TE022],[COPTE].[TE023],[COPTE].[TE024],[COPTE].[TE025],[COPTE].[TE026],[COPTE].[TE027],[COPTE].[TE028],[COPTE].[TE029],[COPTE].[TE030]
                                        ,[COPTE].[TE031],[COPTE].[TE032],[COPTE].[TE033],[COPTE].[TE034],[COPTE].[TE035],[COPTE].[TE036],[COPTE].[TE037],[COPTE].[TE038],[COPTE].[TE039],[COPTE].[TE040]
                                        ,[COPTE].[TE041],[COPTE].[TE042],[COPTE].[TE043],[COPTE].[TE044],[COPTE].[TE045],[COPTE].[TE046],[COPTE].[TE047],[COPTE].[TE048],[COPTE].[TE049],[COPTE].[TE050]
                                        ,[COPTE].[TE051],[COPTE].[TE052],[COPTE].[TE053],[COPTE].[TE054],[COPTE].[TE055],[COPTE].[TE056],[COPTE].[TE057],[COPTE].[TE058],[COPTE].[TE059],[COPTE].[TE060]
                                        ,[COPTE].[TE061],[COPTE].[TE062],[COPTE].[TE063],[COPTE].[TE064],[COPTE].[TE065],[COPTE].[TE066],[COPTE].[TE067],[COPTE].[TE068],[COPTE].[TE069],[COPTE].[TE070]
                                        ,[COPTE].[TE071],[COPTE].[TE072],[COPTE].[TE073],[COPTE].[TE074],[COPTE].[TE075],[COPTE].[TE076],[COPTE].[TE077],[COPTE].[TE078],[COPTE].[TE079],[COPTE].[TE080]
                                        ,[COPTE].[TE081],[COPTE].[TE082],[COPTE].[TE083],[COPTE].[TE084],[COPTE].[TE085],[COPTE].[TE086],[COPTE].[TE087],[COPTE].[TE088]
                                        ,[COPTE].[TE103],[COPTE].[TE107],[COPTE].[TE108],[COPTE].[TE109],[COPTE].[TE110]
                                        ,[COPTE].[TE111],[COPTE].[TE112],[COPTE].[TE113],[COPTE].[TE114],[COPTE].[TE115],[COPTE].[TE116],[COPTE].[TE117],[COPTE].[TE118],[COPTE].[TE119],[COPTE].[TE120]
                                        ,[COPTE].[TE121],[COPTE].[TE122],[COPTE].[TE123],[COPTE].[TE124],[COPTE].[TE125],[COPTE].[TE126],[COPTE].[TE127],[COPTE].[TE128],[COPTE].[TE129],[COPTE].[TE130]
                                        ,[COPTE].[TE131],[COPTE].[TE132],[COPTE].[TE133],[COPTE].[TE134],[COPTE].[TE135],[COPTE].[TE136],[COPTE].[TE137],[COPTE].[TE138],[COPTE].[TE139],[COPTE].[TE140]
                                        ,[COPTE].[TE141],[COPTE].[TE142],[COPTE].[TE143],[COPTE].[TE144],[COPTE].[TE145],[COPTE].[TE146],[COPTE].[TE147],[COPTE].[TE148],[COPTE].[TE149],[COPTE].[TE150]
                                        ,[COPTE].[TE151],[COPTE].[TE152],[COPTE].[TE163],[COPTE].[TE164],[COPTE].[TE165],[COPTE].[TE166],[COPTE].[TE167],[COPTE].[TE168],[COPTE].[TE169],[COPTE].[TE170]
                                        ,[COPTE].[TE171],[COPTE].[TE172],[COPTE].[TE173],[COPTE].[TE174],[COPTE].[TE175],[COPTE].[TE176],[COPTE].[TE177],[COPTE].[TE178],[COPTE].[TE179],[COPTE].[TE180]
                                        ,[COPTE].[TE181],[COPTE].[TE182],[COPTE].[TE183],[COPTE].[TE184],[COPTE].[TE185],[COPTE].[TE186],[COPTE].[TE187],[COPTE].[TE188],[COPTE].[TE189],[COPTE].[TE190]
                                        ,[COPTE].[TE191],[COPTE].[TE192],[COPTE].[TE193],[COPTE].[TE194],[COPTE].[TE195],[COPTE].[TE196],[COPTE].[TE197],[COPTE].[TE198],[COPTE].[TE199]
                                        ,[COPTE].[UDF01],[COPTE].[UDF02],[COPTE].[UDF03],[COPTE].[UDF04],[COPTE].[UDF05],[COPTE].[UDF06],[COPTE].[UDF07],[COPTE].[UDF08],[COPTE].[UDF09],[COPTE].[UDF10]
                                        ,[COPTF].[TF001],[COPTF].[TF002],[COPTF].[TF003],[COPTF].[TF004],[COPTF].[TF005],[COPTF].[TF006],[COPTF].[TF007],[COPTF].[TF008],[COPTF].[TF009],[COPTF].[TF010]
                                        ,[COPTF].[TF011],[COPTF].[TF012],[COPTF].[TF013],[COPTF].[TF014],[COPTF].[TF015],[COPTF].[TF016],[COPTF].[TF017],[COPTF].[TF018],[COPTF].[TF019],[COPTF].[TF020]
                                        ,[COPTF].[TF021],[COPTF].[TF022],[COPTF].[TF023],[COPTF].[TF024],[COPTF].[TF025],[COPTF].[TF026],[COPTF].[TF027],[COPTF].[TF028],[COPTF].[TF029],[COPTF].[TF030]
                                        ,[COPTF].[TF031],[COPTF].[TF032],[COPTF].[TF034],[COPTF].[TF035],[COPTF].[TF036],[COPTF].[TF037],[COPTF].[TF038],[COPTF].[TF039],[COPTF].[TF040],[COPTF].[TF041]
                                        ,[COPTF].[TF042],[COPTF].[TF043],[COPTF].[TF044],[COPTF].[TF045],[COPTF].[TF046],[COPTF].[TF048],[COPTF].[TF049],[COPTF].[TF050]
                                        ,[COPTF].[TF051],[COPTF].[TF052],[COPTF].[TF053],[COPTF].[TF054],[COPTF].[TF055],[COPTF].[TF056],[COPTF].[TF057],[COPTF].[TF058],[COPTF].[TF059],[COPTF].[TF060]
                                        ,[COPTF].[TF061],[COPTF].[TF062],[COPTF].[TF063],[COPTF].[TF064],[COPTF].[TF065],[COPTF].[TF066],[COPTF].[TF067],[COPTF].[TF068],[COPTF].[TF069],[COPTF].[TF070]
                                        ,[COPTF].[TF071],[COPTF].[TF072],[COPTF].[TF073],[COPTF].[TF074],[COPTF].[TF075],[COPTF].[TF076],[COPTF].[TF077],[COPTF].[TF078],[COPTF].[TF079],[COPTF].[TF080]
                                        ,[COPTF].[TF104],[COPTF].[TF105],[COPTF].[TF106],[COPTF].[TF107],[COPTF].[TF108],[COPTF].[TF109],[COPTF].[TF110]
                                        ,[COPTF].[TF111],[COPTF].[TF112],[COPTF].[TF113],[COPTF].[TF114],[COPTF].[TF115],[COPTF].[TF116],[COPTF].[TF117],[COPTF].[TF120]
                                        ,[COPTF].[TF121],[COPTF].[TF122],[COPTF].[TF123],[COPTF].[TF124],[COPTF].[TF125],[COPTF].[TF126],[COPTF].[TF127],[COPTF].[TF128],[COPTF].[TF129],[COPTF].[TF130]
                                        ,[COPTF].[TF131],[COPTF].[TF132],[COPTF].[TF133],[COPTF].[TF134],[COPTF].[TF135],[COPTF].[TF136],[COPTF].[TF137],[COPTF].[TF138],[COPTF].[TF139],[COPTF].[TF140]
                                        ,[COPTF].[TF141],[COPTF].[TF142],[COPTF].[TF143],[COPTF].[TF144],[COPTF].[TF145],[COPTF].[TF146],[COPTF].[TF147],[COPTF].[TF148],[COPTF].[TF149],[COPTF].[TF150]
                                        ,[COPTF].[TF151],[COPTF].[TF152],[COPTF].[TF153],[COPTF].[TF154],[COPTF].[TF155],[COPTF].[TF156],[COPTF].[TF157],[COPTF].[TF158],[COPTF].[TF159],[COPTF].[TF160]
                                        ,[COPTF].[TF161],[COPTF].[TF162],[COPTF].[TF163],[COPTF].[TF164],[COPTF].[TF165],[COPTF].[TF166],[COPTF].[TF167],[COPTF].[TF168],[COPTF].[TF169],[COPTF].[TF170]
                                        ,[COPTF].[TF171],[COPTF].[TF172],[COPTF].[TF173],[COPTF].[TF174],[COPTF].[TF175],[COPTF].[TF176],[COPTF].[TF177],[COPTF].[TF178],[COPTF].[TF179],[COPTF].[TF180]
                                        ,[COPTF].[TF181],[COPTF].[TF182],[COPTF].[TF183],[COPTF].[TF184],[COPTF].[TF185],[COPTF].[TF186],[COPTF].[TF187],[COPTF].[TF188],[COPTF].[TF189],[COPTF].[TF190]
                                        ,[COPTF].[TF191],[COPTF].[TF192],[COPTF].[TF193],[COPTF].[TF194],[COPTF].[TF195],[COPTF].[TF196],[COPTF].[TF197],[COPTF].[TF198],[COPTF].[TF199]
                                        ,[COPTF].[TF200],[COPTF].[TF300]
                                        ,[COPTF].[UDF01] AS 'COPTFUDF01',[COPTF].[UDF02] AS 'COPTFUDF02',[COPTF].[UDF03] AS 'COPTFUDF03',[COPTF].[UDF04] AS 'COPTFUDF04',[COPTF].[UDF05] AS 'COPTFUDF05',[COPTF].[UDF06] AS 'COPTFUDF06',[COPTF].[UDF07] AS 'COPTFUDF07',[COPTF].[UDF08] AS 'COPTFUDF08',[COPTF].[UDF09] AS 'COPTFUDF09',[COPTF].[UDF10] AS 'COPTFUDF10'
                                        ,[TB_EB_USER].USER_GUID,NAME
                                        ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=TE009) AS 'MV002'
                                        ,(SELECT TOP 1 MA002 FROM [TK].dbo.COPMA WHERE MA001=TE007) AS 'MA002'
                                        ,(SELECT TOP 1 COPMA.UDF04 FROM [TK].dbo.COPMA,[TK].dbo.CMSMV WHERE COPMA.UDF04=CMSMV.MV001 AND COPMA.MA001=TE007) AS 'BA'
                                        ,(SELECT TOP 1 CMSMV.MV002 FROM [TK].dbo.COPMA,[TK].dbo.CMSMV WHERE COPMA.UDF04=CMSMV.MV001 AND COPMA.MA001=TE007) AS 'BANAME'
                                    FROM [TK].dbo.COPTF,[TK].dbo.COPTE
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT= TE009 COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE TE001=TF001 AND TE002=TF002 AND TE003=TF003
                                    AND TE001=@TE001 AND TE002=@TE002 AND TE003=@TE003
                                    ) AS TEMP
                                    ";

                using (SqlConnection conn = new SqlConnection(connectionString))
                using (SqlCommand cmd = new SqlCommand(sql, conn))
                {
                    cmd.Parameters.AddWithValue("@TE001", TE001);
                    cmd.Parameters.AddWithValue("@TE002", TE002);
                    cmd.Parameters.AddWithValue("@TE003", TE003);

                    using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                    {
                        DataTable dt = new DataTable();
                        adapter.Fill(dt);
                        return dt;
                    }
                }
            }
            catch (Exception ex)
            {
                // 你可以記錄例外 ex.Message
                throw; // 或回傳null，依需求調整
            }
        }


        /// <summary>
        /// 人資的表單申請，如果退回申請人就自動作廢
        /// </summary>
        public void UPDATE_TB_WKF_TASK_TASK_RESULT()
        {
            StringBuilder sql = new StringBuilder();
            
            //TASK_STATUS IN ('4')=退回申請者
            sql.Append(@"
                        UPDATE [UOF].[dbo].[TB_WKF_TASK]
                        SET  [TASK_RESULT]='2',TASK_STATUS='2',[CURRENT_SIGNER]=NULL,[CURRENT_SITE_ID]=NULL
                        WHERE  TASK_STATUS IN ('4')
                        AND [FORM_VERSION_ID] IN
                        (
	                        SELECT  [FORM_VERSION_ID]
	                        FROM [UOF].[dbo].[TB_WKF_FORM_VERSION]
	                        WHERE [FORM_ID] IN 
		                        (
		                        SELECT 
		                        [FORM_ID]      
		                        FROM [UOF].[dbo].[TB_WKF_FORM]
		                        WHERE [FORM_NAME] IN 
			                        (
			                        SELECT [FORM_NAME] FROM [UOF].[dbo].[Z_TK_FORM_NAME]
			                        )
		                        )
                        )
                        ");

            using (SqlConnection conn = new SqlConnection(BuildDecryptedConnection("dbUOF")))
            {
                int result = ExecuteSqlWithTransaction(conn, sql.ToString());
                // 可依需求 log result 或其他行為
            }
        }

        /// <summary>
        /// UOF門市督導轉入DB
        /// </summary>
        public void ADDTKMKdboTBSTORESCHECK()
        {
            string THISYEARS = DateTime.Now.ToString("yyyy");
            //取西元年後2位
            THISYEARS = THISYEARS.Substring(2, 2);

            DataTable dtResult = new DataTable();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@" 
                                SELECT DOC_NBR
                                FROM [UOF].dbo.TB_WKF_TASK 
                                WHERE DOC_NBR LIKE 'STORE{0}%'
                                AND TASK_RESULT='0'
                                AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN  NOT IN
                                (
	                                SELECT [ID] AS 'DOC_NBR'
	                                FROM [192.168.1.105].[TKMK].[dbo].[TBSTORESCHECK]
	                                WHERE [ID] LIKE 'STORE{0}%'
                                )
                                ORDER BY DOC_NBR
                            ", THISYEARS);

                    using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn))
                    {
                        using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                        {
                            sqlConn.Open();
                            adapter.Fill(dtResult);
                            sqlConn.Close();
                        }
                    }
                }

                if (dtResult.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtResult.Rows)
                    {
                        SEARCHUOFTB_WKF_TASK_STORE(dr["DOC_NBR"].ToString());
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("錯誤: " + ex.Message);
            }
            

        }

        //找出UOF表單的資料，將CURRENT_DOC的內容，轉成xmlDoc
        //從xmlDoc找出各節點的Attributes
        public void SEARCHUOFTB_WKF_TASK_STORE(string DOC_NBR)
        {            
            try
            {
                // 建立解密物件
                Class1 TKID = new Class1();

                // 取得並解密連線字串
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                // 建立 SQL 連線
                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    // 組合 SQL 查詢語句
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@"
                                        SELECT 
                                            [TB_EB_USER].NAME,
                                            DOC_NBR,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""ID""]/@fieldValue)[1]', 'nvarchar(50)') AS ID,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE1""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE1,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE2""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE2,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE3""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE3,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE4""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE4,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE5""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE5,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE6""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE6,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE7""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE7,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE8""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE8,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE9""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE9,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE10""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE10,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE11""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE11,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE12""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE12,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE13""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE13,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE14""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE14,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE15""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE15,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE16""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE16,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE17""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE17,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE18""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE18,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE19""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE19,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE20""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE20,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE21""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE21,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE22""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE22,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE23""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE23,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE24""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE24,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE25""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE25,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE26""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE26,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE27""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE27,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE28""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE28,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE29""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE29,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE30""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE30,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE31""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE31,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE32""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE32,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE33""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE33,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE34""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE34,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE35""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE35,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE36""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE36,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE37""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE37,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE38""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE38,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE39""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE39,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE40""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE40,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE41""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE41,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE42""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE42,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE43""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE43,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""STORE44""]/@fieldValue)[1]', 'nvarchar(50)') AS STORE44
                                        FROM [UOF].[dbo].[TB_WKF_TASK] 
                                        LEFT JOIN [UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].USER_GUID = TB_WKF_TASK.USER_GUID
                                        WHERE DOC_NBR LIKE '{0}%'
                                    ", DOC_NBR);


                    SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                    DataSet ds1 = new DataSet();

                    sqlConn.Open();
                    adapter1.Fill(ds1, "ds1");
                    sqlConn.Close();

                    if (ds1.Tables["ds1"].Rows.Count >= 1)
                    {
                        string NAME = ds1.Tables["ds1"].Rows[0]["NAME"].ToString();
                        string ID = ds1.Tables["ds1"].Rows[0]["ID"].ToString();

                        DataRow row = ds1.Tables["ds1"].Rows[0];
                        string STORE1 = row["STORE1"].ToString();
                        string STORE2 = row["STORE2"].ToString();
                        string STORE3 = row["STORE3"].ToString();
                        string STORE4 = row["STORE4"].ToString();
                        string STORE5 = row["STORE5"].ToString();
                        string STORE6 = row["STORE6"].ToString();
                        string STORE7 = row["STORE7"].ToString();
                        string STORE8 = row["STORE8"].ToString();
                        string STORE9 = row["STORE9"].ToString();
                        string STORE10 = row["STORE10"].ToString();
                        string STORE11 = row["STORE11"].ToString();
                        string STORE12 = row["STORE12"].ToString();
                        string STORE13 = row["STORE13"].ToString();
                        string STORE14 = row["STORE14"].ToString();
                        string STORE15 = row["STORE15"].ToString();
                        string STORE16 = row["STORE16"].ToString();
                        string STORE17 = row["STORE17"].ToString();
                        string STORE18 = row["STORE18"].ToString();
                        string STORE19 = row["STORE19"].ToString();
                        string STORE20 = row["STORE20"].ToString();
                        string STORE21 = row["STORE21"].ToString();
                        string STORE22 = row["STORE22"].ToString();
                        string STORE23 = row["STORE23"].ToString();
                        string STORE24 = row["STORE24"].ToString();
                        string STORE25 = row["STORE25"].ToString();
                        string STORE26 = row["STORE26"].ToString();
                        string STORE27 = row["STORE27"].ToString();
                        string STORE28 = row["STORE28"].ToString();
                        string STORE29 = row["STORE29"].ToString();
                        string STORE30 = row["STORE30"].ToString();
                        string STORE31 = row["STORE31"].ToString();
                        string STORE32 = row["STORE32"].ToString();
                        string STORE33 = row["STORE33"].ToString();
                        string STORE34 = row["STORE34"].ToString();
                        string STORE35 = row["STORE35"].ToString();
                        string STORE36 = row["STORE36"].ToString();
                        string STORE37 = row["STORE37"].ToString();
                        string STORE38 = row["STORE38"].ToString();
                        string STORE39 = row["STORE39"].ToString();
                        string STORE40 = row["STORE40"].ToString();
                        string STORE41 = row["STORE41"].ToString();
                        string STORE42 = row["STORE42"].ToString();
                        string STORE43 = row["STORE43"].ToString();
                        string STORE44 = row["STORE44"].ToString();

                        // STORE 字串中「@」符號後的部分去掉，如果有「@」就截取前面部分，沒「@」要避免例外
                        var storeValues = new Dictionary<string, string>()
                    {
                        {"STORE2", STORE2},
                        {"STORE8", STORE8},
                        {"STORE10", STORE10},
                        {"STORE11", STORE11},
                        {"STORE12", STORE12},
                        {"STORE13", STORE13},
                        {"STORE14", STORE14},
                        {"STORE17", STORE17},
                        {"STORE18", STORE18},
                        {"STORE19", STORE19},
                        {"STORE22", STORE22},
                        {"STORE23", STORE23},
                        {"STORE24", STORE24},
                        {"STORE26", STORE26},
                        {"STORE29", STORE29},
                        {"STORE30", STORE30},
                        {"STORE31", STORE31},
                        {"STORE32", STORE32},
                        {"STORE33", STORE33},
                        {"STORE35", STORE35},
                        {"STORE36", STORE36},
                    };

                        // 用迴圈呼叫函式處理所有字串
                        foreach (var key in storeValues.Keys.ToList())
                        {
                            storeValues[key] = RemoveAfterAt(storeValues[key]);
                        }

                        // 再把處理結果回填回變數
                        STORE2 = storeValues["STORE2"];
                        STORE8 = storeValues["STORE8"];
                        STORE10 = storeValues["STORE10"];
                        STORE11 = storeValues["STORE11"];
                        STORE12 = storeValues["STORE12"];
                        STORE13 = storeValues["STORE13"];
                        STORE14 = storeValues["STORE14"];
                        STORE17 = storeValues["STORE17"];
                        STORE18 = storeValues["STORE18"];
                        STORE19 = storeValues["STORE19"];
                        STORE22 = storeValues["STORE22"];
                        STORE23 = storeValues["STORE23"];
                        STORE24 = storeValues["STORE24"];
                        STORE26 = storeValues["STORE26"];
                        STORE29 = storeValues["STORE29"];
                        STORE30 = storeValues["STORE30"];
                        STORE31 = storeValues["STORE31"];
                        STORE32 = storeValues["STORE32"];
                        STORE33 = storeValues["STORE33"];
                        STORE35 = storeValues["STORE35"];
                        STORE36 = storeValues["STORE36"];

                        ADDTOTKMKTBSTORESCHECK(
                                                ID
                                                , STORE1
                                                , STORE2
                                                , STORE3
                                                , STORE4
                                                , STORE5
                                                , STORE6
                                                , STORE7
                                                , STORE8
                                                , STORE9
                                                , STORE10
                                                , STORE11
                                                , STORE12
                                                , STORE13
                                                , STORE14
                                                , STORE15
                                                , STORE16
                                                , STORE17
                                                , STORE18
                                                , STORE19
                                                , STORE20
                                                , STORE21
                                                , STORE22
                                                , STORE23
                                                , STORE24
                                                , STORE25
                                                , STORE26
                                                , STORE27
                                                , STORE28
                                                , STORE29
                                                , STORE30
                                                , STORE31
                                                , STORE32
                                                , STORE33
                                                , STORE34
                                                , STORE35
                                                , STORE36
                                                , STORE37
                                                , STORE38
                                                , STORE39
                                                , STORE40
                                                , STORE41
                                                , STORE42
                                                , STORE43
                                                , STORE44
                                                , NAME
                                                );

                    }
                }
            }            
            catch (Exception EX)
            {

            }
            finally
            {
                sqlConn.Close();
            }
        }

        // 小函式：去除字串中 '@' 及其後面部分
        string RemoveAfterAt(string input)
        {
            if (string.IsNullOrEmpty(input)) return input;
            int index = input.IndexOf("@");
            return index >= 0 ? input.Substring(0, index) : input;
        }
        //新增UOF門市督導轉入DB
        public void ADDTOTKMKTBSTORESCHECK(
                     string ID,
                     string STORE1, string STORE2, string STORE3, string STORE4, string STORE5,
                     string STORE6, string STORE7, string STORE8, string STORE9, string STORE10,
                     string STORE11, string STORE12, string STORE13, string STORE14, string STORE15,
                     string STORE16, string STORE17, string STORE18, string STORE19, string STORE20,
                     string STORE21, string STORE22, string STORE23, string STORE24, string STORE25,
                     string STORE26, string STORE27, string STORE28, string STORE29, string STORE30,
                     string STORE31, string STORE32, string STORE33, string STORE34, string STORE35,
                     string STORE36, string STORE37, string STORE38, string STORE39, string STORE40,
                     string STORE41, string STORE42, string STORE43, string STORE44,
                     string NAME)
        {
            try
            {
                var connString = BuildDecryptedConnection("dberp");

                using (var sqlConn = new SqlConnection(connString))
                {
                    sqlConn.Open();
                    using (var tran = sqlConn.BeginTransaction())
                    using (var cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        cmd.CommandText = @"
                                        INSERT INTO [TKMK].[dbo].[TBSTORESCHECK](
                                            [ID],[STORE1],[STORE2],[STORE3],[STORE4],[STORE5],
                                            [STORE6],[STORE7],[STORE8],[STORE9],[STORE10],[STORE11],
                                            [STORE12],[STORE13],[STORE14],[STORE15],[STORE16],[STORE17],
                                            [STORE18],[STORE19],[STORE20],[STORE21],[STORE22],[STORE23],
                                            [STORE24],[STORE25],[STORE26],[STORE27],[STORE28],[STORE29],
                                            [STORE30],[STORE31],[STORE32],[STORE33],[STORE34],[STORE35],
                                            [STORE36],[STORE37],[STORE38],[STORE39],[STORE40],[STORE41],
                                            [STORE42],[STORE43],[STORE44],[NAME]
                                        ) VALUES (
                                            @ID,@STORE1,@STORE2,@STORE3,@STORE4,@STORE5,
                                            @STORE6,@STORE7,@STORE8,@STORE9,@STORE10,@STORE11,
                                            @STORE12,@STORE13,@STORE14,@STORE15,@STORE16,@STORE17,
                                            @STORE18,@STORE19,@STORE20,@STORE21,@STORE22,@STORE23,
                                            @STORE24,@STORE25,@STORE26,@STORE27,@STORE28,@STORE29,
                                            @STORE30,@STORE31,@STORE32,@STORE33,@STORE34,@STORE35,
                                            @STORE36,@STORE37,@STORE38,@STORE39,@STORE40,@STORE41,
                                            @STORE42,@STORE43,@STORE44,@NAME
                                        )";

                        cmd.Parameters.AddWithValue("@ID", ID);
                        cmd.Parameters.AddWithValue("@STORE1", STORE1);
                        cmd.Parameters.AddWithValue("@STORE2", STORE2);
                        cmd.Parameters.AddWithValue("@STORE3", STORE3);
                        cmd.Parameters.AddWithValue("@STORE4", STORE4);
                        cmd.Parameters.AddWithValue("@STORE5", STORE5);
                        cmd.Parameters.AddWithValue("@STORE6", STORE6);
                        cmd.Parameters.AddWithValue("@STORE7", STORE7);
                        cmd.Parameters.AddWithValue("@STORE8", STORE8);
                        cmd.Parameters.AddWithValue("@STORE9", STORE9);
                        cmd.Parameters.AddWithValue("@STORE10", STORE10);
                        cmd.Parameters.AddWithValue("@STORE11", STORE11);
                        cmd.Parameters.AddWithValue("@STORE12", STORE12);
                        cmd.Parameters.AddWithValue("@STORE13", STORE13);
                        cmd.Parameters.AddWithValue("@STORE14", STORE14);
                        cmd.Parameters.AddWithValue("@STORE15", STORE15);
                        cmd.Parameters.AddWithValue("@STORE16", STORE16);
                        cmd.Parameters.AddWithValue("@STORE17", STORE17);
                        cmd.Parameters.AddWithValue("@STORE18", STORE18);
                        cmd.Parameters.AddWithValue("@STORE19", STORE19);
                        cmd.Parameters.AddWithValue("@STORE20", STORE20);
                        cmd.Parameters.AddWithValue("@STORE21", STORE21);
                        cmd.Parameters.AddWithValue("@STORE22", STORE22);
                        cmd.Parameters.AddWithValue("@STORE23", STORE23);
                        cmd.Parameters.AddWithValue("@STORE24", STORE24);
                        cmd.Parameters.AddWithValue("@STORE25", STORE25);
                        cmd.Parameters.AddWithValue("@STORE26", STORE26);
                        cmd.Parameters.AddWithValue("@STORE27", STORE27);
                        cmd.Parameters.AddWithValue("@STORE28", STORE28);
                        cmd.Parameters.AddWithValue("@STORE29", STORE29);
                        cmd.Parameters.AddWithValue("@STORE30", STORE30);
                        cmd.Parameters.AddWithValue("@STORE31", STORE31);
                        cmd.Parameters.AddWithValue("@STORE32", STORE32);
                        cmd.Parameters.AddWithValue("@STORE33", STORE33);
                        cmd.Parameters.AddWithValue("@STORE34", STORE34);
                        cmd.Parameters.AddWithValue("@STORE35", STORE35);
                        cmd.Parameters.AddWithValue("@STORE36", STORE36);
                        cmd.Parameters.AddWithValue("@STORE37", STORE37);
                        cmd.Parameters.AddWithValue("@STORE38", STORE38);
                        cmd.Parameters.AddWithValue("@STORE39", STORE39);
                        cmd.Parameters.AddWithValue("@STORE40", STORE40);
                        cmd.Parameters.AddWithValue("@STORE41", STORE41);
                        cmd.Parameters.AddWithValue("@STORE42", STORE42);
                        cmd.Parameters.AddWithValue("@STORE43", STORE43);
                        cmd.Parameters.AddWithValue("@STORE44", STORE44);
                        cmd.Parameters.AddWithValue("@NAME", NAME);

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();
                            throw new Exception("新增失敗，沒有資料被寫入。");
                        }
                        else
                        {
                            tran.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 可改成用你的 logging 機制記錄錯誤
                throw new Exception("新增TBSTORESCHECK時發生錯誤: " + ex.Message, ex);
            }
        }


        /// <summary>
        /// 匯入UOF的門市營業日誌
        /// </summary>
        public void ADDTKMKdboTBSTOREDAILY()
        {
            string THISYEARS = DateTime.Now.ToString("yyyy").Substring(2, 2);
            DataTable dtResult = new DataTable();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();
                    sbSql.AppendFormat(@"
                                        SELECT DOC_NBR
                                        FROM [UOF].DBO.TB_WKF_TASK 
                                        WHERE DOC_NBR LIKE 'STOREDAILY{0}%'
                                        AND TASK_RESULT='0'
                                        AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN
                                        (
                                            SELECT [ID] AS 'DOC_NBR'
                                            FROM [TKMK].[dbo].[TBSTOREDAILY]
                                        )
                                    ", THISYEARS);

                    using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn))
                    {
                        using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                        {
                            adapter.Fill(dtResult);
                        }
                    }
                }

                if (dtResult.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtResult.Rows)
                    {
                        SEARCHUOFTB_WKF_TASK_FRO_STOREDAILY(dr["DOC_NBR"].ToString());
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("錯誤: " + ex.Message);
            }
        }


        //找出UOF表單的資料，將CURRENT_DOC的內容，轉成xmlDoc
        //從xmlDoc找出各節點的Attributes
        public void SEARCHUOFTB_WKF_TASK_FRO_STOREDAILY(string DOC_NBR)
        {     
            try
            {
                // 建立解密物件
                Class1 TKID = new Class1();

                // 取得並解密連線字串
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                // 建立 SQL 連線
                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    // 組合 SQL 查詢語句
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@"
                                       SELECT 
                                        T.DOC_NBR,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""ID""]/@fieldValue)[1]', 'nvarchar(200)') AS ID,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD1""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD1,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD2""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD2,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD3""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD3,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD4""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD4,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD5""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD5,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD6""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD6,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD7""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD7,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD8""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD8,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD9""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD9,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD10""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD10,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD11""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD11,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD12""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD12,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD13""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD13,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD14""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD14,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD15""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD15,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD16""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD16,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD17""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD17,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD18""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD18,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD19""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD19,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD20""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD20,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD21""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD21,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD22""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD22,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD23""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD23,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD24""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD24,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD25""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD25,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD26""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD26,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD27""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD27,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD28""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD28,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD29a""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD29a,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD30""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD30,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD31""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD31,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD32""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD32,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD33""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD33,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD34""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD34,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD35""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD35,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD36""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD36,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD37""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD37,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD38""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD38,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD39""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD39,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD40""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD40,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD41""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD41,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD42""]/@fieldValue)[1]', 'nvarchar(200)') AS FIELD42
                                    FROM 
                                        [UOF].dbo.TB_WKF_TASK T
                                    WHERE 
                                        T.DOC_NBR LIKE 'STORE25%' 
                                        AND T.TASK_RESULT = '0'

                                    ", DOC_NBR);


                    SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                    DataSet ds1 = new DataSet();

                    sqlConn.Open();
                    adapter1.Fill(ds1, "ds1");
                    sqlConn.Close();


                    if (ds1.Tables["ds1"].Rows.Count >= 1)
                    {
                        string NAME = ds1.Tables["ds1"].Rows[0]["NAME"].ToString();

                        XmlDocument xmlDoc = new XmlDocument();
                        xmlDoc.LoadXml(ds1.Tables["ds1"].Rows[0]["CURRENT_DOC"].ToString());

                        //XmlNode node = xmlDoc.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='ID']");
                        string ID = ds1.Tables["ds1"].Rows[0]["ID"].ToString();
                        string FIELD1 = ds1.Tables["ds1"].Rows[0]["FIELD1"].ToString();
                        string FIELD2 = ds1.Tables["ds1"].Rows[0]["FIELD2"].ToString();
                        string FIELD3 = ds1.Tables["ds1"].Rows[0]["FIELD3"].ToString();
                        string FIELD4 = ds1.Tables["ds1"].Rows[0]["FIELD4"].ToString();
                        string FIELD5 = ds1.Tables["ds1"].Rows[0]["FIELD5"].ToString();
                        string FIELD6 = ds1.Tables["ds1"].Rows[0]["FIELD6"].ToString();
                        string FIELD7 = ds1.Tables["ds1"].Rows[0]["FIELD7"].ToString();
                        string FIELD8 = ds1.Tables["ds1"].Rows[0]["FIELD8"].ToString();
                        string FIELD9 = ds1.Tables["ds1"].Rows[0]["FIELD9"].ToString();
                        string FIELD10 = ds1.Tables["ds1"].Rows[0]["FIELD10"].ToString();
                        string FIELD11 = ds1.Tables["ds1"].Rows[0]["FIELD11"].ToString();
                        string FIELD12 = ds1.Tables["ds1"].Rows[0]["FIELD12"].ToString();
                        string FIELD13 = ds1.Tables["ds1"].Rows[0]["FIELD13"].ToString();
                        string FIELD14 = ds1.Tables["ds1"].Rows[0]["FIELD14"].ToString();
                        string FIELD15 = ds1.Tables["ds1"].Rows[0]["FIELD15"].ToString();
                        string FIELD16 = ds1.Tables["ds1"].Rows[0]["FIELD16"].ToString();
                        string FIELD17 = ds1.Tables["ds1"].Rows[0]["FIELD17"].ToString();
                        string FIELD18 = ds1.Tables["ds1"].Rows[0]["FIELD18"].ToString();
                        string FIELD19 = ds1.Tables["ds1"].Rows[0]["FIELD19"].ToString();
                        string FIELD20 = ds1.Tables["ds1"].Rows[0]["FIELD20"].ToString();
                        string FIELD21 = ds1.Tables["ds1"].Rows[0]["FIELD21"].ToString();
                        string FIELD22 = ds1.Tables["ds1"].Rows[0]["FIELD22"].ToString();
                        string FIELD23 = ds1.Tables["ds1"].Rows[0]["FIELD23"].ToString();
                        string FIELD24 = ds1.Tables["ds1"].Rows[0]["FIELD24"].ToString();
                        string FIELD25 = ds1.Tables["ds1"].Rows[0]["FIELD25"].ToString();
                        string FIELD26 = ds1.Tables["ds1"].Rows[0]["FIELD26"].ToString();
                        string FIELD27 = ds1.Tables["ds1"].Rows[0]["FIELD27"].ToString();
                        string FIELD28 = ds1.Tables["ds1"].Rows[0]["FIELD28"].ToString();
                        string FIELD29 = ds1.Tables["ds1"].Rows[0]["FIELD29"].ToString();
                        string FIELD29a = ds1.Tables["ds1"].Rows[0]["FIELD29a"].ToString();
                        string FIELD30 = ds1.Tables["ds1"].Rows[0]["FIELD30"].ToString();
                        string FIELD31 = ds1.Tables["ds1"].Rows[0]["FIELD31"].ToString();
                        string FIELD32 = ds1.Tables["ds1"].Rows[0]["FIELD32"].ToString();
                        string FIELD33 = ds1.Tables["ds1"].Rows[0]["FIELD33"].ToString();
                        string FIELD34 = ds1.Tables["ds1"].Rows[0]["FIELD34"].ToString();
                        string FIELD35 = ds1.Tables["ds1"].Rows[0]["FIELD35"].ToString();
                        string FIELD36 = ds1.Tables["ds1"].Rows[0]["FIELD36"].ToString();
                        string FIELD37 = ds1.Tables["ds1"].Rows[0]["FIELD37"].ToString();
                        string FIELD38 = ds1.Tables["ds1"].Rows[0]["FIELD38"].ToString();
                        string FIELD39 = ds1.Tables["ds1"].Rows[0]["FIELD39"].ToString();
                        string FIELD40 = ds1.Tables["ds1"].Rows[0]["FIELD40"].ToString();
                        string FIELD41 = ds1.Tables["ds1"].Rows[0]["FIELD41"].ToString();
                        string FIELD42 = ds1.Tables["ds1"].Rows[0]["FIELD42"].ToString();

                      

                        // STORE 字串中「@」符號後的部分去掉，如果有「@」就截取前面部分，沒「@」要避免例外
                        var storeValues = new Dictionary<string, string>()
                        {
                            {"FIELD1", FIELD1},
                            {"FIELD6", FIELD6},
                            {"FIELD7", FIELD7},                          
                        };

                        // 用迴圈呼叫函式處理所有字串
                        foreach (var key in storeValues.Keys.ToList())
                        {
                            storeValues[key] = RemoveAfterAt(storeValues[key]);
                        }

                        // 再把處理結果回填回變數
                        FIELD1 = storeValues["FIELD1"];
                        FIELD6 = storeValues["FIELD6"];
                        FIELD7 = storeValues["FIELD7"];
                        //string OK = "";
                        ADDTOTKMKTBSTOREDAILY(
                                                 ID
                                                , FIELD1
                                                , FIELD2
                                                , FIELD3
                                                , FIELD4
                                                , FIELD5
                                                , FIELD6
                                                , FIELD7
                                                , FIELD8
                                                , FIELD9
                                                , FIELD10
                                                , FIELD11
                                                , FIELD12
                                                , FIELD13
                                                , FIELD14
                                                , FIELD15
                                                , FIELD16
                                                , FIELD17
                                                , FIELD18
                                                , FIELD19
                                                , FIELD20
                                                , FIELD21
                                                , FIELD22
                                                , FIELD23
                                                , FIELD24
                                                , FIELD25
                                                , FIELD26
                                                , FIELD27
                                                , FIELD28
                                                , FIELD29
                                                , FIELD29a
                                                , FIELD30
                                                , FIELD31
                                                , FIELD32
                                                , FIELD33
                                                , FIELD34
                                                , FIELD35
                                                , FIELD36
                                                , FIELD37
                                                , FIELD38
                                                , FIELD39
                                                , FIELD40
                                                , FIELD41
                                                , FIELD42
                                                , NAME
                                                );
                        
                    }
                    else
                    {

                    }
                }

            }
            catch (Exception EX)
            {

            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void ADDTOTKMKTBSTOREDAILY(
            string ID, string FIELD1, string FIELD2, string FIELD3, string FIELD4, string FIELD5,
            string FIELD6, string FIELD7, string FIELD8, string FIELD9, string FIELD10,
            string FIELD11, string FIELD12, string FIELD13, string FIELD14, string FIELD15,
            string FIELD16, string FIELD17, string FIELD18, string FIELD19, string FIELD20,
            string FIELD21, string FIELD22, string FIELD23, string FIELD24, string FIELD25,
            string FIELD26, string FIELD27, string FIELD28, string FIELD29, string FIELD29a,
            string FIELD30, string FIELD31, string FIELD32, string FIELD33, string FIELD34,
            string FIELD35, string FIELD36, string FIELD37, string FIELD38, string FIELD39,
            string FIELD40, string FIELD41, string FIELD42, string NAME
            )
        {
            string connString = BuildDecryptedConnection("dberp");

            using (SqlConnection sqlConn = new SqlConnection(connString))
            {
                sqlConn.Open();
                using (SqlTransaction tran = sqlConn.BeginTransaction())
                using (SqlCommand cmd = sqlConn.CreateCommand())
                {
                    cmd.Transaction = tran;
                    cmd.CommandTimeout = 60;
                    cmd.CommandText = @"
                                        INSERT INTO [TKMK].[dbo].[TBSTOREDAILY] (
                                            [ID],[FIELD1],[FIELD2],[FIELD3],[FIELD4],[FIELD5],
                                            [FIELD6],[FIELD7],[FIELD8],[FIELD9],[FIELD10],[FIELD11],
                                            [FIELD12],[FIELD13],[FIELD14],[FIELD15],[FIELD16],[FIELD17],
                                            [FIELD18],[FIELD19],[FIELD20],[FIELD21],[FIELD22],[FIELD23],
                                            [FIELD24],[FIELD25],[FIELD26],[FIELD27],[FIELD28],[FIELD29],[FIELD29a],
                                            [FIELD30],[FIELD31],[FIELD32],[FIELD33],[FIELD34],[FIELD35],[FIELD36],
                                            [FIELD37],[FIELD38],[FIELD39],[FIELD40],[FIELD41],[FIELD42],[NAME]
                                        ) VALUES (
                                            @ID,@FIELD1,@FIELD2,@FIELD3,@FIELD4,@FIELD5,
                                            @FIELD6,@FIELD7,@FIELD8,@FIELD9,@FIELD10,@FIELD11,
                                            @FIELD12,@FIELD13,@FIELD14,@FIELD15,@FIELD16,@FIELD17,
                                            @FIELD18,@FIELD19,@FIELD20,@FIELD21,@FIELD22,@FIELD23,
                                            @FIELD24,@FIELD25,@FIELD26,@FIELD27,@FIELD28,@FIELD29,@FIELD29a,
                                            @FIELD30,@FIELD31,@FIELD32,@FIELD33,@FIELD34,@FIELD35,@FIELD36,
                                            @FIELD37,@FIELD38,@FIELD39,@FIELD40,@FIELD41,@FIELD42,@NAME
                                        );
                                    ";

                    cmd.Parameters.AddWithValue("@ID", ID ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD1", FIELD1 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD2", FIELD2 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD3", FIELD3 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD4", FIELD4 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD5", FIELD5 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD6", FIELD6 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD7", FIELD7 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD8", FIELD8 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD9", FIELD9 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD10", FIELD10 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD11", FIELD11 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD12", FIELD12 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD13", FIELD13 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD14", FIELD14 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD15", FIELD15 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD16", FIELD16 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD17", FIELD17 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD18", FIELD18 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD19", FIELD19 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD20", FIELD20 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD21", FIELD21 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD22", FIELD22 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD23", FIELD23 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD24", FIELD24 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD25", FIELD25 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD26", FIELD26 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD27", FIELD27 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD28", FIELD28 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD29", FIELD29 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD29a", FIELD29a ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD30", FIELD30 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD31", FIELD31 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD32", FIELD32 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD33", FIELD33 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD34", FIELD34 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD35", FIELD35 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD36", FIELD36 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD37", FIELD37 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD38", FIELD38 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD39", FIELD39 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD40", FIELD40 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD41", FIELD41 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD42", FIELD42 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@NAME", NAME ?? (object)DBNull.Value);

                    int result = cmd.ExecuteNonQuery();

                    if (result == 0)
                    {
                        tran.Rollback();
                        throw new Exception("新增失敗，無資料寫入");
                    }
                    else
                    {
                        tran.Commit();
                    }
                }
            }
        }
        /// <summary>
        /// 02.老楊出差訓練及外出申請單 轉 2001.教育訓練課程心得報告
        /// </summary>
        public void CHECKADDTOUOFFORMEDUCATION()
        {
            DataSet ds1 = new DataSet();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();

                    sbSql.AppendFormat(@"  
                                        SELECT *
                                        FROM [UOF].[dbo].[Z_SCSHR_LEAVE], [UOF].dbo.TB_WKF_TASK
                                        WHERE 1=1
                                        AND [Z_SCSHR_LEAVE].DOC_NBR = TB_WKF_TASK.DOC_NBR
                                        AND [Z_SCSHR_LEAVE].TASK_STATUS = '2' 
                                        AND [Z_SCSHR_LEAVE].TASK_RESULT = '0'
                                        AND [LEACODE] = '050B1'
                                        AND [Z_SCSHR_LEAVE].DOC_NBR LIKE 'FT101%'
                                        AND CONVERT(datetime, STARTTIME, 112) >= '20220427'
                                        AND APPLICANT NOT IN (SELECT [APPLICANT] FROM [UOF].[dbo].[Z_SCSHR_NOT])
                                        AND [Z_SCSHR_LEAVE].DOC_NBR NOT IN 
                                            (SELECT EXTERNAL_FORM_NBR FROM [UOF].[dbo].[TB_WKF_EXTERNAL_TASK] 
                                             WHERE ISNULL(EXTERNAL_FORM_NBR,'')<>'' AND EXTERNAL_FORM_NBR LIKE 'FT%')
                                        ORDER BY [Z_SCSHR_LEAVE].DOC_NBR
                                    ");

                    using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        sqlConn.Open();
                        ds1.Clear();
                        adapter1.Fill(ds1, "ds1");
                    }
                }

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        ADDTOUOFFORMEDUCATION(dr["DOC_NBR"].ToString());
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("CHECKADDTOUOFFORMEDUCATION Error: " + ex.Message);
            }
        }


        public void ADDTOUOFFORMEDUCATION(string DOC_NBR)
        {            
            try
            {
                Class1 TKID = new Class1(); // 用 new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.Append(@"
                                    SELECT *,
                                        CONVERT(nvarchar, STARTTIME, 111) AS NEWSTARTTIME,
                                        CONVERT(nvarchar, ENDTIME, 111) AS NEWENDTIME,
                                        USER_GUID,
                                        (SELECT TOP 1 GROUP_ID FROM [UOF].[dbo].[TB_EB_EMPL_DEP] WHERE ORDERS = '0' AND USER_GUID = [Z_SCSHR_LEAVE].APPLICANTGUID) AS GROUP_ID,
                                        (SELECT TOP 1 TITLE_ID FROM [UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = [Z_SCSHR_LEAVE].APPLICANTGUID) AS TITLE_ID,
                                        (SELECT TOP 1 NAME FROM [UOF].[dbo].[TB_EB_USER] WHERE USER_GUID = [Z_SCSHR_LEAVE].APPLICANTGUID) AS NAME
                                    FROM [UOF].[dbo].[Z_SCSHR_LEAVE], [UOF].dbo.TB_WKF_TASK
                                    WHERE 1=1
                                        AND [Z_SCSHR_LEAVE].DOC_NBR = TB_WKF_TASK.DOC_NBR
                                        AND [Z_SCSHR_LEAVE].TASK_STATUS = '2'
                                        AND [Z_SCSHR_LEAVE].TASK_RESULT = '0'
                                        AND [LEACODE] = '050B1'
                                        AND [Z_SCSHR_LEAVE].DOC_NBR NOT IN (
                                            SELECT EXTERNAL_FORM_NBR
                                            FROM [UOF].[dbo].[TB_WKF_EXTERNAL_TASK]
                                            WHERE ISNULL(EXTERNAL_FORM_NBR, '') <> '' AND EXTERNAL_FORM_NBR LIKE 'FT%'
                                        )
                                        AND [Z_SCSHR_LEAVE].DOC_NBR = @DOC_NBR
                                    ORDER BY [Z_SCSHR_LEAVE].DOC_NBR
                                ");

                    using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@DOC_NBR", DOC_NBR);

                        SqlDataAdapter adapter1 = new SqlDataAdapter(cmd);
                        DataSet ds1 = new DataSet();

                        sqlConn.Open();
                        ds1.Clear();
                        adapter1.Fill(ds1, "ds1");
                        sqlConn.Close();

                        if (ds1.Tables["ds1"].Rows.Count >= 1)
                        {
                            //建立userset xml
                            XmlDocument XMLDOC = new XmlDocument();

                            //建立表單xml
                            XmlDocument xmlDoc = new XmlDocument();
                            XmlDocument xmlDocqQuery = new XmlDocument();
                            //建立根節點
                            XmlElement Form = xmlDoc.CreateElement("Form");

                            string account = ds1.Tables["ds1"].Rows[0]["APPLICANT"].ToString().Trim();
                            string groupId = ds1.Tables["ds1"].Rows[0]["GROUP_ID"].ToString().Trim();

                            string jobTitleId = ds1.Tables["ds1"].Rows[0]["TITLE_ID"].ToString().Trim();
                            string fillerName = ds1.Tables["ds1"].Rows[0]["NAME"].ToString().Trim();
                            string fillerUserGuid = ds1.Tables["ds1"].Rows[0]["USER_GUID"].ToString().Trim();

                            string EXTERNAL_FORM_NBR = DOC_NBR;

                            int rowscounts = 0;

                            xmlDocqQuery.LoadXml(ds1.Tables["ds1"].Rows[0]["CURRENT_DOC"].ToString());
                            //string LeaveType = xmlDoc.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='ID']").Attributes["fieldValue"].Value;
                            string APPLICANT = ds1.Tables["ds1"].Rows[0]["APPLICANT"].ToString();

                            //姓名(TrainUserName)
                            string TrainUserName = fillerName + "(" + account + ")";
                            //部門(TrainUserDept) fieldValue
                            string TrainUserDeptfieldValue = xmlDocqQuery.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='KY002']").Attributes["fieldValue"].Value;
                            //部門(TrainUserDept) realValue
                            string TrainUserDeptrealValue = xmlDocqQuery.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='KY002']").Attributes["realValue"].Value;
                            string str = TrainUserDeptrealValue;
                            string[] parts = str.Split(',');
                            string result = parts[0]; // 取得逗號之前的字串
                            groupId = result;
                            //職稱(TrainUserLevel)
                            string TrainUserLevel = xmlDocqQuery.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='KY003']").Attributes["fieldValue"].Value;
                            //假別(LeaveType )
                            string LeaveType = ds1.Tables["ds1"].Rows[0]["LEACODE"].ToString().Trim();
                            //假別名稱 LeaveName
                            string LeaveName = ds1.Tables["ds1"].Rows[0]["LEACODENAME"].ToString();
                            //時數(LeaveHours)
                            string LeaveHours = ds1.Tables["ds1"].Rows[0]["LEAHOURS"].ToString();
                            //請假天數(LeaveDay)
                            string LeaveDay = ds1.Tables["ds1"].Rows[0]["LEADAYS"].ToString();
                            //出差/公出/訓練地點(TrainLocation)
                            string TrainLocation = xmlDocqQuery.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='KY004']").Attributes["fieldValue"].Value;
                            //費用(TrainFee)
                            string TrainFee = xmlDocqQuery.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='KY005']").Attributes["fieldValue"].Value;
                            //課程日期_起(TrainDateStart)
                            string TrainDateStart = ds1.Tables["ds1"].Rows[0]["NEWSTARTTIME"].ToString();
                            //課程日期_迄(TrainDateEnd)
                            string TrainDateEnd = ds1.Tables["ds1"].Rows[0]["NEWENDTIME"].ToString();

                            //課程名稱(TrainCourse)
                            string TrainType = "專業課程";
                            //外申表單單號(SourceTableNum)
                            string SourceTableNum = DOC_NBR;
                            //課程名稱(TrainCourse)
                            string TrainCourse = "";
                            //講師(TrainLector)
                            string TrainLector = "";
                            //是否轉訓(TransferStatus)
                            string TransferStatus = "";
                            //轉訓時間(TransferDate)
                            string TransferDate = "";
                            //受訓單位(TransCompany)
                            string TransCompany = "";
                            //內容概要(TrainBrief)
                            string TrainBrief = "";
                            //心得(TrainGained)
                            string TrainGained = "";
                            //對公司建議(Suggestion)
                            string Suggestion = "";


                            //建立userset子節點
                            XmlElement XMLELEUserSet = XMLDOC.CreateElement("UserSet");
                            XMLDOC.AppendChild(XMLELEUserSet);
                            XmlElement XMLELEUElement = XMLDOC.CreateElement("Element");
                            XMLELEUElement.SetAttribute("type", "user");//設定屬性
                            XMLELEUserSet.AppendChild(XMLELEUElement);
                            XmlElement XMLELEUuserId = XMLDOC.CreateElement("userId");
                            XMLELEUuserId.InnerText = fillerUserGuid;
                            XMLELEUElement.AppendChild(XMLELEUuserId);
                            XMLDOC = XMLDOC;

                            //正式的id
                            string VERSION_ID = SEARCHFORM_UOF_VERSION_ID("2001.教育訓練課程心得報告");

                            if (!string.IsNullOrEmpty(VERSION_ID))
                            {
                                Form.SetAttribute("formVersionId", VERSION_ID);
                            }


                            //建立XML           
                            XmlElement form = xmlDoc.CreateElement("Form");
                            if (!string.IsNullOrEmpty(VERSION_ID)) form.SetAttribute("formVersionId", VERSION_ID);
                            form.SetAttribute("urgentLevel", "2");
                            xmlDoc.AppendChild(form);
                            //建立XML的 applicant 節點
                            XmlElement applicant = CreateApplicant(xmlDoc, account, groupId, jobTitleId);
                            form.AppendChild(applicant);
                            //建立XML的 Comment 節點
                            XmlElement comment = xmlDoc.CreateElement("Comment");
                            comment.InnerText = "申請者意見";
                            applicant.AppendChild(comment);
                            //建立XML的 FormFieldValue 節點
                            XmlElement formFieldValue = xmlDoc.CreateElement("FormFieldValue");
                            form.AppendChild(formFieldValue);

                            AddFieldItem(xmlDoc, formFieldValue, "2001", "", fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TrainUserName", TrainUserName, fillerName, fillerUserGuid, account, realValue: XMLDOC.InnerXml);
                            AddFieldItem(xmlDoc, formFieldValue, "TrainUserDept", TrainUserDeptfieldValue, fillerName, fillerUserGuid, account, realValue: TrainUserDeptrealValue);
                            AddFieldItem(xmlDoc, formFieldValue, "TrainUserLevel", TrainUserLevel, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "LeaveType", LeaveType, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "LeaveName", LeaveName, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "LeaveHours", LeaveHours, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "LeaveDay", LeaveDay, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TrainLocation", TrainLocation, fillerName, fillerUserGuid, account,"" ,"@null");
                            AddFieldItem(xmlDoc, formFieldValue, "TrainFee", TrainFee, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TrainType", TrainType, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TrainDateStart", TrainDateStart, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TrainDateEnd", TrainDateEnd, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "SourceTableNum", SourceTableNum, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TrainCourse", TrainCourse, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TrainLector", TrainLector, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TransferStatus", TransferStatus, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TransferDate", TransferDate, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TransCompany", TransCompany, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TrainBrief", TrainBrief, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "TrainGained", TrainGained, fillerName, fillerUserGuid, account);
                            AddFieldItem(xmlDoc, formFieldValue, "Suggestion", Suggestion, fillerName, fillerUserGuid, account);



                            // 解密連線字串
                            Class1 TKID2 = new Class1();
                            SqlConnectionStringBuilder sqlsb2 = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                            sqlsb2.Password = TKID2.Decryption(sqlsb2.Password);
                            sqlsb2.UserID = TKID2.Decryption(sqlsb2.UserID);

                            string connectionString2 = sqlsb2.ConnectionString;

                            string sql = $@"
                                            INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                            (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                            VALUES (NEWID(), @XML, 2, @EXTERNAL_FORM_NBR)";

                            try
                            {
                                using (SqlConnection connection = new SqlConnection(connectionString2))
                                using (SqlCommand command = new SqlCommand(sql, connection))
                                {
                                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                                    command.Parameters.Add("@EXTERNAL_FORM_NBR", SqlDbType.NVarChar).Value = EXTERNAL_FORM_NBR;

                                    connection.Open();
                                    int count = command.ExecuteNonQuery();
                                    // 可根據 count 判斷是否成功寫入
                                }
                            }
                            catch (Exception ex)
                            {
                                // TODO: 可加 logging 或 throw，方便除錯
                                Console.WriteLine("Insert error: " + ex.Message);
                                // throw; //視需求決定是否要往上拋
                            }

                        }
                    }
                }                   
                              
            }
            catch (Exception EX)
            {

            }
            finally
            {

            }

        }
        /// <summary>
        /// 出差報告單
        /// </summary>
        public void CHECKADDTOUOFFORBUSINESSTRIPS()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                StringBuilder sbSql = new StringBuilder();
                sbSql.AppendFormat(@"
                                    SELECT *
                                    FROM [UOF].[dbo].[Z_SCSHR_LEAVE]
                                    JOIN [UOF].dbo.TB_WKF_TASK ON [Z_SCSHR_LEAVE].DOC_NBR = TB_WKF_TASK.DOC_NBR
                                    WHERE [Z_SCSHR_LEAVE].TASK_STATUS = '2'
                                      AND [Z_SCSHR_LEAVE].TASK_RESULT = '0'
                                      AND [LEACODE] = '050A1'
                                      AND [Z_SCSHR_LEAVE].DOC_NBR LIKE 'FT%'
                                      AND CONVERT(datetime, STARTTIME, 112) >= '20220506'
                                      AND [Z_SCSHR_LEAVE].DOC_NBR NOT IN (
                                            SELECT EXTERNAL_FORM_NBR
                                            FROM [UOF].[dbo].[TB_WKF_EXTERNAL_TASK]
                                            WHERE ISNULL(EXTERNAL_FORM_NBR,'') <> ''
                                              AND EXTERNAL_FORM_NBR LIKE 'FT%'
                                      )
                                      AND APPLICANT NOT IN (
                                            SELECT [APPLICANT]
                                            FROM [UOF].[dbo].[Z_SCSHR_NOT]
                                      )
                                    ORDER BY [Z_SCSHR_LEAVE].DOC_NBR
                                ");

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                {
                    sqlConn.Open();
                    DataSet ds1 = new DataSet();
                    adapter1.Fill(ds1, "ds1");

                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        ADDTOUOFFORBUSINESSTRIPS(dr["DOC_NBR"].ToString());
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("發生錯誤：" + ex.Message);
            }
        }


        public void ADDTOUOFFORBUSINESSTRIPS(string DOC_NBR)
        {
            try
            {
                // 解密連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                // SQL 語法
                string sql = string.Format(@"
                                            SELECT *
                                                ,T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""KY004""]/@fieldValue)[1]', 'nvarchar(100)') AS KY004,
                                                ,T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""KY005""]/@fieldValue)[1]', 'nvarchar(100)') AS KY005
                                                ,CONVERT(nvarchar, STARTTIME, 111) AS NEWSTARTTIME
                                                ,CONVERT(nvarchar, ENDTIME, 111) AS NEWENDTIME
                                                ,USER_GUID
                                                ,(SELECT TOP 1 GROUP_ID FROM [UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = L.APPLICANTGUID) AS GROUP_ID
                                                ,(SELECT TOP 1 TITLE_ID FROM [UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = L.APPLICANTGUID) AS TITLE_ID
                                                ,(SELECT TOP 1 NAME FROM [UOF].[dbo].[TB_EB_USER] WHERE USER_GUID = L.APPLICANTGUID) AS NAME
                                            FROM [UOF].[dbo].[Z_SCSHR_LEAVE] L
                                            JOIN [UOF].dbo.TB_WKF_TASK T ON L.DOC_NBR = T.DOC_NBR
                                            WHERE L.TASK_STATUS = '2'
                                                AND L.TASK_RESULT = '0'
                                                AND L.LEACODE = '050A1'
                                                AND L.DOC_NBR NOT IN (
                                                    SELECT EXTERNAL_FORM_NBR 
                                                    FROM [UOF].[dbo].[TB_WKF_EXTERNAL_TASK] 
                                                    WHERE ISNULL(EXTERNAL_FORM_NBR, '') <> '' AND EXTERNAL_FORM_NBR LIKE 'FT%'
                                                )
                                                AND L.DOC_NBR = '{0}'
                                            ORDER BY L.DOC_NBR
                                        ", DOC_NBR);

                DataSet ds1 = new DataSet();

                using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
                using (SqlDataAdapter adapter = new SqlDataAdapter(sql, conn))
                {
                    conn.Open();
                    adapter.Fill(ds1, "ds1");
                }

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {

                    string KY004 = ds1.Tables["ds1"].Rows[0]["KY004"].ToString();
                    string KY005 = ds1.Tables["ds1"].Rows[0]["KY005"].ToString();  
                    string account = ds1.Tables["ds1"].Rows[0]["APPLICANT"].ToString().Trim();
                    string groupId = ds1.Tables["ds1"].Rows[0]["GROUP_ID"].ToString().Trim();
                    string jobTitleId = ds1.Tables["ds1"].Rows[0]["TITLE_ID"].ToString().Trim();
                    string fillerName = ds1.Tables["ds1"].Rows[0]["NAME"].ToString().Trim();
                    string fillerUserGuid = ds1.Tables["ds1"].Rows[0]["USER_GUID"].ToString().Trim();

                    string EXTERNAL_FORM_NBR = DOC_NBR;

                    int rowscounts = 0;

                    XmlDocument xmlDocqQuery = new XmlDocument();
                    xmlDocqQuery.LoadXml(ds1.Tables["ds1"].Rows[0]["CURRENT_DOC"].ToString());
                    //string LeaveType = xmlDoc.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='ID']").Attributes["fieldValue"].Value;
                    string APPLICANT = ds1.Tables["ds1"].Rows[0]["APPLICANT"].ToString();


                    //A01-01-009-01-A 出差報告單
                    //BTripUserName
                    string BTripUserName = fillerName + "(" + account + ")";
                    //部門(BTripUserDept) fieldValue
                    string BTripUserDeptfieldValue = xmlDocqQuery.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='KY002']").Attributes["fieldValue"].Value;
                    //部門(TBTripUserDept) realValue
                    string BTripUserDeptrealValue = xmlDocqQuery.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='KY002']").Attributes["realValue"].Value;

                    //BTripUserLevel
                    string BTripUserLevel = xmlDocqQuery.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='KY003']").Attributes["fieldValue"].Value;
                    //LeaveType
                    string LeaveType = ds1.Tables["ds1"].Rows[0]["LEACODE"].ToString().Trim();
                    //假別名稱 LeaveName
                    string LeaveName = ds1.Tables["ds1"].Rows[0]["LEACODENAME"].ToString();
                    //LeaveDay
                    string LeaveDay = ds1.Tables["ds1"].Rows[0]["LEADAYS"].ToString();
                    //BTripLocation
                    string BTripLocation = KY004;
                    //BTripCashAdvance
                    string BTripCashAdvance = KY005;
                    //SourceTableNum
                    string SourceTableNum = EXTERNAL_FORM_NBR;
                    //BTripDate
                    string BTripDate = ds1.Tables["ds1"].Rows[0]["NEWSTARTTIME"].ToString();
                    //BTripPurpose
                    string BTripPurpose = ds1.Tables["ds1"].Rows[0]["REMARK"].ToString();
                    //BTripContent
                    string BTripContent = "";



                    // 建立 XML 文件和根節點 Form
                    XmlDocument xmlDoc = new XmlDocument();
                    XmlElement form = xmlDoc.CreateElement("Form");

                    // 取得表單版本ID並設定
                    string versionId = SEARCHFORM_UOF_VERSION_ID("2002.出差報告單");
                    if (!string.IsNullOrEmpty(versionId))
                    {
                        form.SetAttribute("formVersionId", versionId);
                    }
                    form.SetAttribute("urgentLevel", "2");
                    xmlDoc.AppendChild(form);

                    // 建立 Applicant 節點 (用自訂方法)
                    XmlElement applicant = CreateApplicant(xmlDoc, account, groupId, jobTitleId);
                    form.AppendChild(applicant);

                    // 建立 Comment 節點並加入 Applicant
                    XmlElement comment = xmlDoc.CreateElement("Comment");
                    comment.InnerText = "申請者意見";
                    applicant.AppendChild(comment);

                    // 建立 FormFieldValue 節點
                    XmlElement formFieldValue = xmlDoc.CreateElement("FormFieldValue");
                    form.AppendChild(formFieldValue);

                    // 用 AddFieldItem 建立各個 FieldItem 節點
                    AddFieldItem(xmlDoc, formFieldValue, "2001", "", fillerName, fillerUserGuid, account);
                    AddFieldItem(xmlDoc, formFieldValue, "BTripUserName", BTripUserName, fillerName, fillerUserGuid, account);
                    AddFieldItem(xmlDoc, formFieldValue, "BTripUserDept", BTripUserDeptfieldValue, fillerName, fillerUserGuid, account);
                    AddFieldItem(xmlDoc, formFieldValue, "BTripUserLevel", BTripUserLevel, fillerName, fillerUserGuid, account);
                    AddFieldItem(xmlDoc, formFieldValue, "LeaveType", LeaveType, fillerName, fillerUserGuid, account);
                    AddFieldItem(xmlDoc, formFieldValue, "LeaveName", LeaveName, fillerName, fillerUserGuid, account);
                    AddFieldItem(xmlDoc, formFieldValue, "LeaveDay", LeaveDay, fillerName, fillerUserGuid, account);
                    AddFieldItem(xmlDoc, formFieldValue, "BTripLocation", BTripLocation, fillerName, fillerUserGuid, account, "",customValue: "@null");
                    AddFieldItem(xmlDoc, formFieldValue, "BTripCashAdvance", BTripCashAdvance, fillerName, fillerUserGuid, account,"" ,customValue: "@null");
                    AddFieldItem(xmlDoc, formFieldValue, "SourceTableNum", SourceTableNum, fillerName, fillerUserGuid, account);
                    AddFieldItem(xmlDoc, formFieldValue, "BTripDate", BTripDate, fillerName, fillerUserGuid, account);
                    AddFieldItem(xmlDoc, formFieldValue, "BTripPurpose", BTripPurpose, fillerName, fillerUserGuid, account);
                    AddFieldItem(xmlDoc, formFieldValue, "BTripContent", BTripContent, fillerName, fillerUserGuid, account);



                    ////用ADDTACK，直接啟動起單
                    //ADDTACK(Form);

                    //ADD TO DB
                    ////string connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ToString();

                    //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                    //sqlConn = new SqlConnection(connectionString);

                    //20210902密
                    Class1 TKID2 = new Class1();//用new 建立類別實體
                    SqlConnectionStringBuilder sqlsb2 = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                    //資料庫使用者密碼解密
                    sqlsb2.Password = TKID2.Decryption(sqlsb2.Password);
                    sqlsb2.UserID = TKID2.Decryption(sqlsb2.UserID);

                    String connectionString2;
                    sqlConn = new SqlConnection(sqlsb2.ConnectionString);
                    connectionString2 = sqlConn.ConnectionString.ToString();

                    StringBuilder queryString = new StringBuilder();




                    queryString.AppendFormat(@" 
                                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                            (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                            VALUES (NEWID(),@XML,2,@EXTERNAL_FORM_NBR)
                                            ");

                    try
                    {
                        using (SqlConnection connection = new SqlConnection(connectionString2))
                        {

                            SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                            command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = form.OuterXml;
                            command.Parameters.Add("@EXTERNAL_FORM_NBR", SqlDbType.NVarChar).Value = EXTERNAL_FORM_NBR;

                            command.Connection.Open();

                            int count = command.ExecuteNonQuery();

                            connection.Close();
                            connection.Dispose();

                        }
                    }
                    catch
                    {

                    }
                    finally
                    {

                    }
                }
                else
                {

                }
            }
            catch
            {

            }
            finally
            {

            }
        }
        public void NEWPURTCPURTD()
        {
            try
            {
                Class1 TKID = new Class1(); // 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string sql = @"
                                    SELECT TC001, TC002, UDF01
                                    FROM [TK].dbo.PURTC
                                    WHERE TC014 = 'N' AND UDF01 IN ('Y','y')
                                    ORDER BY TC001, TC002
                                ";

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sql, sqlConn))
                    {
                        DataSet ds = new DataSet();
                        sqlConn.Open();
                        adapter.Fill(ds, "ds1");

                        if (ds.Tables["ds1"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds.Tables["ds1"].Rows)
                            {
                                string tc001 = dr["TC001"].ToString().Trim();
                                string tc002 = dr["TC002"].ToString().Trim();
                                ADD_PURTCPURTD_TB_WKF_EXTERNAL_TASK(tc001, tc002);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 你可以在這裡加入 log，例如： Console.WriteLine(ex.Message);
            }

            UPDATEPURTCUDF01();
        }


        public void ADD_PURTCPURTD_TB_WKF_EXTERNAL_TASK(string TC001, string TC002)
        {
            DataTable DT = SEARCHPURTCPURTD(TC001, TC002);
            if (DT == null || DT.Rows.Count == 0)
            {
                // 找不到資料，適當處理或拋錯
                throw new Exception("找不到指定的PURTCPURTD資料");
            }

            string account = DT.Rows[0]["TC011"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            DataTable DTUPFDEP = SEARCHUOFDEP(account);
            if (DTUPFDEP == null || DTUPFDEP.Rows.Count == 0)
            {
                throw new Exception("找不到指定的部門資料");
            }

            string depName = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string depNo = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string externalFormNbr = DT.Rows[0]["TC001"].ToString().Trim() + DT.Rows[0]["TC002"].ToString().Trim();
            string EXTERNAL_FORM_NBR = TC001 + TC002;
            
            // 建立 XML
            XmlDocument xmlDoc = new XmlDocument();
            XmlElement form = xmlDoc.CreateElement("Form");
            //正式的id
            string PURTCID = SEARCHFORM_UOF_VERSION_ID("PUR40.採購單");

            if (!string.IsNullOrEmpty(PURTCID))
            {
                form.SetAttribute("formVersionId", PURTCID);
            }

            // 設定表單版本ID與急件等級
            if (!string.IsNullOrEmpty(PURTCID))
                form.SetAttribute("formVersionId", PURTCID);
            form.SetAttribute("urgentLevel", "2");

            // 加入根節點到 XML
            xmlDoc.AppendChild(form);

            // 建立 Applicant 節點（用自訂方法）
            XmlElement applicant = CreateApplicant(xmlDoc, account, groupId, jobTitleId);
            form.AppendChild(applicant);

            // 建立 Comment 節點並加入 Applicant 底下
            XmlElement comment = xmlDoc.CreateElement("Comment");
            comment.InnerText = "申請者意見";
            applicant.AppendChild(comment);

            // 建立 FormFieldValue 節點並加入 Form 底下
            XmlElement formFieldValue = xmlDoc.CreateElement("FormFieldValue");
            form.AppendChild(formFieldValue);

            // 假設有以下方法：
            // void AddFieldItem(XmlDocument doc, XmlElement parent, string fieldId, string fieldValue, string fillerName, string fillerUserGuid, string fillerAccount)

            AddFieldItem(xmlDoc, formFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC001", DT.Rows[0]["TC001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC002", DT.Rows[0]["TC002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC003", DT.Rows[0]["TC003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC004", DT.Rows[0]["TC004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC004NAME", DT.Rows[0]["TC004NAME"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC010", DT.Rows[0]["TC010"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC005", DT.Rows[0]["TC005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC006", DT.Rows[0]["TC006"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC027", DT.Rows[0]["TC027"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC008", DT.Rows[0]["TC008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC028", DT.Rows[0]["TC028"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC009", DT.Rows[0]["TC009"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC018", DT.Rows[0]["TC018"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC018NAME", DT.Rows[0]["TC018NAME"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC011", DT.Rows[0]["TC011"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC011NAME", DT.Rows[0]["TC011NAME"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC037", DT.Rows[0]["TC037"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC038", DT.Rows[0]["TC038"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TC021", DT.Rows[0]["TC021"].ToString(), fillerName, fillerUserGuid, account);
          

            // 建立 DataGrid
            XmlElement tbField = AddFieldItem(xmlDoc, formFieldValue, "PURTD", "", fillerName, fillerUserGuid, account);
            XmlElement dataGrid = xmlDoc.CreateElement("DataGrid");
            tbField.AppendChild(dataGrid);

            int rowIndex = 0;

            foreach (DataRow od in DT.Rows)
            {
                XmlElement row = xmlDoc.CreateElement("Row");
                row.SetAttribute("order", rowIndex.ToString());

                AppendCellToRow(xmlDoc, row, od, "TD003");
                AppendCellToRow(xmlDoc, row, od, "TB005");
                AppendCellToRow(xmlDoc, row, od, "TD004");
                AppendCellToRow(xmlDoc, row, od, "TD005");
                AppendCellToRow(xmlDoc, row, od, "TD006");
                AppendCellToRow(xmlDoc, row, od, "TD007");
                AppendCellToRow(xmlDoc, row, od, "TD008");
                AppendCellToRow(xmlDoc, row, od, "TD009");
                AppendCellToRow(xmlDoc, row, od, "TD010");
                AppendCellToRow(xmlDoc, row, od, "TD011");
                AppendCellToRow(xmlDoc, row, od, "TD012");
                AppendCellToRow(xmlDoc, row, od, "TD015");
                AppendCellToRow(xmlDoc, row, od, "TD019");
                AppendCellToRow(xmlDoc, row, od, "TD026");
                AppendCellToRow(xmlDoc, row, od, "TD027");
                AppendCellToRow(xmlDoc, row, od, "TD028");
                AppendCellToRow(xmlDoc, row, od, "TD014");

                dataGrid.AppendChild(row);
                rowIndex++;
            }

            // 使用 Class1 解密連線字串
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            // 解密帳號密碼
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            // 建立 SQL 指令，注意此處 DBNAME 與 EXTERNAL_FORM_NBR 需先定義
            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES 
                                        (NEWID(), @XML, 2, '{0}')
                                ", EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                using (SqlCommand command = new SqlCommand(queryString.ToString(), connection))
                {
                    // 傳入 XML 內容 (Form 是 XmlDocument 物件)
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = form.OuterXml;

                    connection.Open();

                    int count = command.ExecuteNonQuery();

                    // 可根據 count 來判斷是否新增成功
                }
            }
            catch (Exception ex)
            {
                // 建議加入例外日誌或處理 ex
            }

        }
        public void UPDATEPURTCUDF01()
        {
            StringBuilder sql = new StringBuilder();

            sql.AppendLine(@"
                            UPDATE [TK].dbo.PURTC  
                            SET UDF01 = 'UOF'
                            WHERE TC014 = 'N' AND (UDF01 IN ('Y','y'))
                        ");

            using (SqlConnection conn = new SqlConnection(BuildDecryptedConnection("dberp")))
            {
                int result = ExecuteSqlWithTransaction(conn, sql.ToString());
                // 可在這裡根據 result 進行後續判斷或紀錄
            }
        }


        public DataTable SEARCHPURTCPURTD(string TC001, string TC002)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);


                sbSql.Clear();
                sbSqlQuery.Clear();

                //庫存數量看LA009 IN ('20004','20006','20008','20019','20020'

                sbSql.AppendFormat(@"  
                                   SELECT *
                                    ,USER_GUID,NAME
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    ,SUMLA011
                                    ,MA002 AS TC004NAME
                                    ,(CASE WHEN TC018='1' THEN '1.應稅內含'  WHEN TC018='2' THEN '2.應稅外加'  WHEN TC018='3' THEN '3.零稅率' WHEN TC018='4' THEN '4.免稅' WHEN TC018='9' THEN '9.不計稅' END) AS TC018NAME
                                    ,NAME AS TC011NAME
                                    FROM 
                                    (
                                    SELECT 
                                    [PURTC].[COMPANY]
                                    ,[PURTC].[CREATOR]
                                    ,[PURTC].[USR_GROUP]
                                    ,[PURTC].[CREATE_DATE]
                                    ,[PURTC].[MODIFIER]
                                    ,[PURTC].[MODI_DATE]
                                    ,[PURTC].[FLAG]
                                    ,[PURTC].[CREATE_TIME]
                                    ,[PURTC].[MODI_TIME]
                                    ,[PURTC].[TRANS_TYPE]
                                    ,[PURTC].[TRANS_NAME]
                                    ,[PURTC].[sync_date]
                                    ,[PURTC].[sync_time]
                                    ,[PURTC].[sync_mark]
                                    ,[PURTC].[sync_count]
                                    ,[PURTC].[DataUser]
                                    ,[PURTC].[DataGroup]
                                    ,[PURTC].[TC001]
                                    ,[PURTC].[TC002]
                                    ,[PURTC].[TC003]
                                    ,[PURTC].[TC004]
                                    ,[PURTC].[TC005]
                                    ,[PURTC].[TC006]
                                    ,[PURTC].[TC007]
                                    ,[PURTC].[TC008]
                                    ,[PURTC].[TC009]
                                    ,[PURTC].[TC010]
                                    ,[PURTC].[TC011]
                                    ,[PURTC].[TC012]
                                    ,[PURTC].[TC013]
                                    ,[PURTC].[TC014]
                                    ,[PURTC].[TC015]
                                    ,[PURTC].[TC016]
                                    ,[PURTC].[TC017]
                                    ,[PURTC].[TC018]
                                    ,[PURTC].[TC019]
                                    ,[PURTC].[TC020]
                                    ,[PURTC].[TC021]
                                    ,[PURTC].[TC022]
                                    ,[PURTC].[TC023]
                                    ,[PURTC].[TC024]
                                    ,[PURTC].[TC025]
                                    ,[PURTC].[TC026]
                                    ,[PURTC].[TC027]
                                    ,[PURTC].[TC028]
                                    ,[PURTC].[TC029]
                                    ,[PURTC].[TC030]
                                    ,[PURTC].[TC031]
                                    ,[PURTC].[TC032]
                                    ,[PURTC].[TC033]
                                    ,[PURTC].[TC034]
                                    ,[PURTC].[TC035]
                                    ,[PURTC].[TC036]
                                    ,[PURTC].[TC037]
                                    ,[PURTC].[TC038]
                                    ,[PURTC].[TC039]
                                    ,[PURTC].[TC040]
                                    ,[PURTC].[TC041]
                                    ,[PURTC].[TC042]
                                    ,[PURTC].[TC043]
                                    ,[PURTC].[TC044]
                                    ,[PURTC].[TC045]
                                    ,[PURTC].[TC046]
                                    ,[PURTC].[TC047]
                                    ,[PURTC].[TC048]
                                    ,[PURTC].[TC049]
                                    ,[PURTC].[TC050]
                                    ,[PURTC].[TC051]
                                    ,[PURTC].[TC052]
                                    ,[PURTC].[TC053]
                                    ,[PURTC].[TC054]
                                    ,[PURTC].[TC055]
                                    ,[PURTC].[TC056]
                                    ,[PURTC].[TC057]
                                    ,[PURTC].[TC058]
                                    ,[PURTC].[TC059]
                                    ,[PURTC].[TC060]
                                    ,[PURTC].[TC061]
                                    ,[PURTC].[TC062]
                                    ,[PURTC].[TC063]
                                    ,[PURTC].[TC064]
                                    ,[PURTC].[TC065]
                                    ,[PURTC].[TC066]
                                    ,[PURTC].[TC067]
                                    ,[PURTC].[TC068]
                                    ,[PURTC].[TC069]
                                    ,[PURTC].[TC070]
                                    ,[PURTC].[TC071]
                                    ,[PURTC].[TC072]
                                    ,[PURTC].[TC073]
                                    ,[PURTC].[TC074]
                                    ,[PURTC].[TC075]
                                    ,[PURTC].[TC076]
                                    ,[PURTC].[TC077]
                                    ,[PURTC].[TC078]
                                    ,[PURTC].[TC079]
                                    ,[PURTC].[TC080]
                                    ,[PURTC].[UDF01] AS PURTCUDF01
                                    ,[PURTC].[UDF02] AS PURTCUDF02
                                    ,[PURTC].[UDF03] AS PURTCUDF03
                                    ,[PURTC].[UDF04] AS PURTCUDF04
                                    ,[PURTC].[UDF05] AS PURTCUDF05
                                    ,[PURTC].[UDF06] AS PURTCUDF06
                                    ,[PURTC].[UDF07] AS PURTCUDF07
                                    ,[PURTC].[UDF08] AS PURTCUDF08
                                    ,[PURTC].[UDF09] AS PURTCUDF09
                                    ,[PURTC].[UDF10] AS PURTCUDF10
                                    ,[PURTD].[TD001]
                                    ,[PURTD].[TD002]
                                    ,[PURTD].[TD003]
                                    ,[PURTD].[TD004]
                                    ,[PURTD].[TD005]
                                    ,[PURTD].[TD006]
                                    ,[PURTD].[TD007]
                                    ,[PURTD].[TD008]
                                    ,[PURTD].[TD009]
                                    ,[PURTD].[TD010]
                                    ,[PURTD].[TD011]
                                    ,[PURTD].[TD012]
                                    ,[PURTD].[TD013]
                                    ,[PURTD].[TD014]
                                    ,[PURTD].[TD015]
                                    ,[PURTD].[TD016]
                                    ,[PURTD].[TD017]
                                    ,[PURTD].[TD018]
                                    ,[PURTD].[TD019]
                                    ,[PURTD].[TD020]
                                    ,[PURTD].[TD021]
                                    ,[PURTD].[TD022]
                                    ,[PURTD].[TD023]
                                    ,[PURTD].[TD024]
                                    ,[PURTD].[TD025]
                                    ,[PURTD].[TD026]
                                    ,[PURTD].[TD027]
                                    ,[PURTD].[TD028]
                                    ,[PURTD].[TD029]
                                    ,[PURTD].[TD030]
                                    ,[PURTD].[TD031]
                                    ,[PURTD].[TD032]
                                    ,[PURTD].[TD033]
                                    ,[PURTD].[TD034]
                                    ,[PURTD].[TD035]
                                    ,[PURTD].[TD036]
                                    ,[PURTD].[TD037]
                                    ,[PURTD].[TD038]
                                    ,[PURTD].[TD039]
                                    ,[PURTD].[TD040]
                                    ,[PURTD].[TD041]
                                    ,[PURTD].[TD042]
                                    ,[PURTD].[TD043]
                                    ,[PURTD].[TD044]
                                    ,[PURTD].[TD045]
                                    ,[PURTD].[TD046]
                                    ,[PURTD].[TD047]
                                    ,[PURTD].[TD048]
                                    ,[PURTD].[TD049]
                                    ,[PURTD].[TD050]
                                    ,[PURTD].[TD051]
                                    ,[PURTD].[TD052]
                                    ,[PURTD].[TD053]
                                    ,[PURTD].[TD054]
                                    ,[PURTD].[TD055]
                                    ,[PURTD].[TD056]
                                    ,[PURTD].[TD057]
                                    ,[PURTD].[TD058]
                                    ,[PURTD].[TD059]
                                    ,[PURTD].[TD060]
                                    ,[PURTD].[TD061]
                                    ,[PURTD].[TD062]
                                    ,[PURTD].[TD063]
                                    ,[PURTD].[TD064]
                                    ,[PURTD].[TD065]
                                    ,[PURTD].[TD066]
                                    ,[PURTD].[TD067]
                                    ,[PURTD].[TD068]
                                    ,[PURTD].[TD069]
                                    ,[PURTD].[TD070]
                                    ,[PURTD].[TD071]
                                    ,[PURTD].[TD072]
                                    ,[PURTD].[TD073]
                                    ,[PURTD].[TD074]
                                    ,[PURTD].[TD075]
                                    ,[PURTD].[TD076]
                                    ,[PURTD].[TD077]
                                    ,[PURTD].[TD078]
                                    ,[PURTD].[TD079]
                                    ,[PURTD].[TD080]
                                    ,[PURTD].[TD081]
                                    ,[PURTD].[TD082]
                                    ,[PURTD].[TD083]
                                    ,[PURTD].[TD084]
                                    ,[PURTD].[TD085]
                                    ,[PURTD].[TD086]
                                    ,[PURTD].[TD087]
                                    ,[PURTD].[TD088]
                                    ,[PURTD].[TD089]
                                    ,[PURTD].[TD090]
                                    ,[PURTD].[TD091]
                                    ,[PURTD].[TD092]
                                    ,[PURTD].[TD093]
                                    ,[PURTD].[TD094]
                                    ,[PURTD].[TD095]
                                    ,[PURTD].[UDF01]  AS PURTDUDF01
                                    ,[PURTD].[UDF02]  AS PURTDUDF02
                                    ,[PURTD].[UDF03]  AS PURTDUDF03
                                    ,[PURTD].[UDF04]  AS PURTDUDF04
                                    ,[PURTD].[UDF05]  AS PURTDUDF05
                                    ,[PURTD].[UDF06]  AS PURTDUDF06
                                    ,[PURTD].[UDF07]  AS PURTDUDF07
                                    ,[PURTD].[UDF08]  AS PURTDUDF08
                                    ,[PURTD].[UDF09]  AS PURTDUDF09
                                    ,[PURTD].[UDF10]  AS PURTDUDF10
                                    ,[TB_EB_USER].USER_GUID,NAME
                                    ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=TC011) AS 'MV002'
                                    ,(SELECT TOP 1 MA002 FROM [TK].dbo.PURMA WHERE MA001=TC004) AS 'MA002'
                                    ,(SELECT ISNULL(SUM(LA005*LA011),0) FROM [TK].dbo.INVLA WITH(NOLOCK) WHERE LA001=TD004 AND LA009 IN ('20004','20006','20008','20019','20020')) AS SUMLA011
                                    ,(SELECT TOP 1 CONVERT(NVARCHAR,TB005)+',需求日:'+CONVERT(NVARCHAR,TB011)+',數量:'+CONVERT(NVARCHAR,TB009)+' '+CONVERT(NVARCHAR,TB007) FROM  [TK].dbo.PURTB WHERE TB001=[PURTD].TD026 AND TB002=[PURTD].TD027 AND TB003=[PURTD].TD028) AS TB005
                                    FROM [TK].dbo.PURTD,[TK].dbo.PURTC
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT= TC011 COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE TC001=TD001 AND TC002=TD002
                                    AND TC001='{0}' AND TC002='{1}'
                                    ) AS TEMP
                              
                                    ", TC001, TC002);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void NEWPURTEPURTF()
        {
            try
            {
                string connectionString = BuildDecryptedConnection("dberp");

                using (sqlConn = new SqlConnection(connectionString))
                {
                    DataTable purteData = new DataTable();
                    sbSql.Clear();
                    sbSql.AppendLine(@"
                                    SELECT TE001, TE002, TE003, UDF01
                                    FROM [TK].dbo.PURTE
                                    WHERE TE017 = 'N' AND (UDF01 IN ('Y', 'y'))
                                    ORDER BY TE001, TE002, TE003
                                ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        adapter.Fill(purteData);
                    }

                    if (purteData.Rows.Count > 0)
                    {
                        foreach (DataRow row in purteData.Rows)
                        {
                            string te001 = row["TE001"].ToString().Trim();
                            string te002 = row["TE002"].ToString().Trim();
                            string te003 = row["TE003"].ToString().Trim();

                            // 將 ERP 請購單轉入 UOF 表單
                            ADD_PURTEPURTF_TB_WKF_EXTERNAL_TASK(te001, te002, te003);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議可加入 log 紀錄錯誤訊息
                // Console.WriteLine("NEWPURTEPURTF 發生錯誤：" + ex.Message);
            }
            finally
            {
                if (sqlConn != null && sqlConn.State == ConnectionState.Open)
                {
                    sqlConn.Close();
                }
            }

            // 將已處理過的單據做標記
            UPDATEPURTEUDF01();
        }


        public void ADD_PURTEPURTF_TB_WKF_EXTERNAL_TASK(string TE001, string TE002, string TE003)
        {

            DataTable DT = SEARCHPURTEPURTF(TE001, TE002, TE003);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["TE037"].ToString());

            string account = DT.Rows[0]["TE037"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TE001"].ToString().Trim()
                                      + DT.Rows[0]["TE002"].ToString().Trim()
                                      + DT.Rows[0]["TE003"].ToString().Trim();

            string PURTEID = SEARCHFORM_UOF_VERSION_ID("PUR50.採購變更單");

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement form = xmlDoc.CreateElement("Form");

            if (!string.IsNullOrEmpty(PURTEID))
            {
                form.SetAttribute("formVersionId", PURTEID);
            }

            form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(form);

            // 建立 Applicant
            XmlElement applicant = CreateApplicant(xmlDoc, account, groupId, jobTitleId);
            form.AppendChild(applicant);

            XmlElement comment = xmlDoc.CreateElement("Comment");
            comment.InnerText = "申請者意見";
            applicant.AppendChild(comment);

            // 建立 FormFieldValue
            XmlElement formFieldValue = xmlDoc.CreateElement("FormFieldValue");
            form.AppendChild(formFieldValue);
            AddFieldItem(xmlDoc, formFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE001", DT.Rows[0]["TE001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE002", DT.Rows[0]["TE002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE003", DT.Rows[0]["TE003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE004", DT.Rows[0]["TE004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE006", DT.Rows[0]["TE006"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE005", DT.Rows[0]["TE005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE005NAME", DT.Rows[0]["TE005NAME"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE007", DT.Rows[0]["TE007"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE008", DT.Rows[0]["TE008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE009", DT.Rows[0]["TE009"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE010", DT.Rows[0]["TE010"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE023", DT.Rows[0]["TE023"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE011", DT.Rows[0]["TE011"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE012", DT.Rows[0]["TE012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE015", DT.Rows[0]["TE015"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE018", DT.Rows[0]["TE018"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE018NAME", DT.Rows[0]["TE018NAME"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE019", DT.Rows[0]["TE019"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE020", DT.Rows[0]["TE020"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE022", DT.Rows[0]["TE022"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE024", DT.Rows[0]["TE024"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE027", DT.Rows[0]["TE027"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE037", DT.Rows[0]["TE037"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE037NAME", DT.Rows[0]["TE037NAME"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE043", DT.Rows[0]["TE043"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE045", DT.Rows[0]["TE045"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TE046", DT.Rows[0]["TE046"].ToString(), fillerName, fillerUserGuid, account);



            AddFieldItem(xmlDoc, formFieldValue, "PURTF", "", fillerName, fillerUserGuid, account);
            XmlElement dataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode detailsNode = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='PURTF']");
            detailsNode.AppendChild(dataGrid);

            int rowIndex = 0;
            foreach (DataRow od in DT.Rows)
            {
                XmlElement row = xmlDoc.CreateElement("Row");
                row.SetAttribute("order", rowIndex.ToString());

                AppendCellToRow(xmlDoc, row, od, "TF004");
                AppendCellToRow(xmlDoc, row, od, "TF005");
                AppendCellToRow(xmlDoc, row, od, "TF006");
                AppendCellToRow(xmlDoc, row, od, "TF007");
                AppendCellToRow(xmlDoc, row, od, "TF008");
                AppendCellToRow(xmlDoc, row, od, "TF009");
                AppendCellToRow(xmlDoc, row, od, "TF010");
                AppendCellToRow(xmlDoc, row, od, "TF011");
                AppendCellToRow(xmlDoc, row, od, "TF012");
                AppendCellToRow(xmlDoc, row, od, "TF013");
                AppendCellToRow(xmlDoc, row, od, "TF014");
                AppendCellToRow(xmlDoc, row, od, "TF015");
                AppendCellToRow(xmlDoc, row, od, "TF017");
                AppendCellToRow(xmlDoc, row, od, "TF018");
                AppendCellToRow(xmlDoc, row, od, "TF021");
                AppendCellToRow(xmlDoc, row, od, "TF022");
                AppendCellToRow(xmlDoc, row, od, "TF030");

                dataGrid.AppendChild(row);
                rowIndex++;
            }



            ////用ADDTACK，直接啟動起單
            //ADDTACK(Form);

            //ADD TO DB
            ////string connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ToString();

            //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
            //sqlConn = new SqlConnection(connectionString);

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);
            connectionString = sqlConn.ConnectionString.ToString();

            StringBuilder queryString = new StringBuilder();

            queryString.AppendFormat(@" INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                         (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(),@XML,2,'{0}')
                                        ", EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = form.OuterXml;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public DataTable SEARCHPURTEPURTF(string TE001, string TE002, string TE003)
        {
            DataTable dt = new DataTable();

            try
            {
                Class1 TKID = new Class1(); // 解密類別
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.Append(@"
                                SELECT *
                                , USER_GUID, NAME
                                , (SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS GROUP_ID
                                , (SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS TITLE_ID
                                , SUMLA011
                                , MA002 AS TE005NAME
                                , (CASE 
                                    WHEN TE018='1' THEN '1.應稅內含'  
                                    WHEN TE018='2' THEN '2.應稅外加'  
                                    WHEN TE018='3' THEN '3.零稅率' 
                                    WHEN TE018='4' THEN '4.免稅' 
                                    WHEN TE018='9' THEN '9.不計稅' 
                                   END) AS TE018NAME
                                , NAME AS TE037NAME
                                FROM 
                                (
                                    SELECT 
                                    PURTE.[COMPANY]
                                    , PURTE.[CREATOR]
                                    , PURTE.[USR_GROUP]
                                    , PURTE.[CREATE_DATE]
                                    , PURTE.[MODIFIER]
                                    , PURTE.[MODI_DATE]
                                    , PURTE.[FLAG]
                                    , PURTE.[CREATE_TIME]
                                    , PURTE.[MODI_TIME]
                                    , PURTE.[TRANS_TYPE]
                                    , PURTE.[TRANS_NAME]
                                    , PURTE.[sync_date]
                                    , PURTE.[sync_time]
                                    , PURTE.[sync_mark]
                                    , PURTE.[sync_count]
                                    , PURTE.[DataUser]
                                    , PURTE.[DataGroup]
                                    ,[TE001]
                                    ,[TE002]
                                    ,[TE003]
                                    ,[TE004]
                                    ,[TE005]
                                    ,[TE006]
                                    ,[TE007]
                                    ,[TE008]
                                    ,[TE009]
                                    ,[TE010]
                                    ,[TE011]
                                    ,[TE012]
                                    ,[TE013]
                                    ,[TE014]
                                    ,[TE015]
                                    ,[TE016]
                                    ,[TE017]
                                    ,[TE018]
                                    ,[TE019]
                                    ,[TE020]
                                    ,[TE021]
                                    ,[TE022]
                                    ,[TE023]
                                    ,[TE024]
                                    ,[TE025]
                                    ,[TE026]
                                    ,[TE027]
                                    ,[TE028]
                                    ,[TE029]
                                    ,[TE030]
                                    ,[TE031]
                                    ,[TE032]
                                    ,[TE033]
                                    ,[TE034]
                                    ,[TE035]
                                    ,[TE036]
                                    ,[TE037]
                                    ,[TE038]
                                    ,[TE039]
                                    ,[TE040]
                                    ,[TE041]
                                    ,[TE042]
                                    ,[TE043]
                                    ,[TE045]
                                    ,[TE046]
                                    ,[TE047]
                                    ,[TE048]
                                    ,[TE103]
                                    ,[TE107]
                                    ,[TE108]
                                    ,[TE109]
                                    ,[TE110]
                                    ,[TE113]
                                    ,[TE114]
                                    ,[TE115]
                                    ,[TE118]
                                    ,[TE119]
                                    ,[TE120]
                                    ,[TE121]
                                    ,[TE122]
                                    ,[TE123]
                                    ,[TE124]
                                    ,[TE125]
                                    ,[TE134]
                                    ,[TE135]
                                    ,[TE136]
                                    ,[TE137]
                                    ,[TE138]
                                    ,[TE139]
                                    ,[TE140]
                                    ,[TE141]
                                    ,[TE142]
                                    ,[TE143]
                                    ,[TE144]
                                    ,[TE145]
                                    ,[TE146]
                                    ,[TE147]
                                    ,[TE148]
                                    ,[TE149]
                                    ,[TE150]
                                    ,[TE151]
                                    ,[TE152]
                                    ,[TE153]
                                    ,[TE154]
                                    ,[TE155]
                                    ,[TE156]
                                    ,[TE157]
                                    ,[TE158]
                                    ,[TE159]
                                    ,[TE160]
                                    ,[TE161]
                                    ,[TE162]
                                    ,PURTE.[UDF01]
                                    ,PURTE.[UDF02]
                                    ,PURTE.[UDF03]
                                    ,PURTE.[UDF04]
                                    ,PURTE.[UDF05]
                                    ,PURTE.[UDF06]
                                    ,PURTE.[UDF07]
                                    ,PURTE.[UDF08]
                                    ,PURTE.[UDF09]
                                    ,PURTE.[UDF10]		
                                    , PURTF.[TF001]
                                    ,[TF002]
                                    ,[TF003]
                                    ,[TF004]
                                    ,[TF005]
                                    ,[TF006]
                                    ,[TF007]
                                    ,[TF008]
                                    ,[TF009]
                                    ,[TF010]
                                    ,[TF011]
                                    ,[TF012]
                                    ,[TF013]
                                    ,[TF014]
                                    ,[TF015]
                                    ,[TF016]
                                    ,[TF017]
                                    ,[TF018]
                                    ,[TF019]
                                    ,[TF020]
                                    ,[TF021]
                                    ,[TF022]
                                    ,[TF023]
                                    ,[TF024]
                                    ,[TF025]
                                    ,[TF026]
                                    ,[TF027]
                                    ,[TF028]
                                    ,[TF029]
                                    ,[TF030]
                                    ,[TF031]
                                    ,[TF032]
                                    ,[TF033]
                                    ,[TF034]
                                    ,[TF035]
                                    ,[TF036]
                                    ,[TF037]
                                    ,[TF038]
                                    ,[TF039]
                                    ,[TF040]
                                    ,[TF041]
                                    ,[TF104]
                                    ,[TF105]
                                    ,[TF106]
                                    ,[TF107]
                                    ,[TF108]
                                    ,[TF109]
                                    ,[TF110]
                                    ,[TF111]
                                    ,[TF112]
                                    ,[TF113]
                                    ,[TF114]
                                    ,[TF118]
                                    ,[TF119]
                                    ,[TF120]
                                    ,[TF121]
                                    ,[TF122]
                                    ,[TF123]
                                    ,[TF124]
                                    ,[TF125]
                                    ,[TF126]
                                    ,[TF127]
                                    ,[TF128]
                                    ,[TF129]
                                    ,[TF130]
                                    ,[TF131]
                                    ,[TF132]
                                    ,[TF133]
                                    ,[TF134]
                                    ,[TF135]
                                    ,[TF136]
                                    ,[TF137]
                                    ,[TF138]
                                    ,[TF139]
                                    ,[TF140]
                                    ,[TF141]
                                    ,[TF142]
                                    ,[TF143]
                                    ,[TF144]
                                    ,[TF145]
                                    ,[TF146]
                                    ,[TF147]
                                    ,[TF148]
                                    ,[TF149]
                                    ,[TF150]
                                    ,[TF151]
                                    ,[TF152]
                                    ,[TF153]
                                    ,[TF154]
                                    ,[TF155]
                                    ,[TF156]
                                    ,[TF157]
                                    ,[TF158]
                                    ,[TF159]
                                    ,[TF160]
                                    ,[TF161]
                                    ,[TF162]
                                    ,[TF163]
                                    ,[TF164]
                                    ,[TF165]
                                    ,[TF166]
                                    ,[TF167]
                                    ,[TF168]
                                    ,[TF169]
                                    ,[TF170]
                                    ,[TF171]
                                    ,[TF172]
                                    ,[TF173]
                                    ,
                                        TB_EB_USER.USER_GUID,
                                        TB_EB_USER.NAME,
                                        (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=TE037) AS MV002,
                                        (SELECT TOP 1 MA002 FROM [TK].dbo.PURMA WHERE MA001=TE005) AS MA002,
                                        (SELECT ISNULL(SUM(LA005*LA011),0) FROM [TK].dbo.INVLA WITH(NOLOCK) WHERE LA001=TF005 AND LA009 IN ('20004','20006','20008','20019','20020')) AS SUMLA011
                                    FROM [TK].dbo.PURTF
                                    INNER JOIN [TK].dbo.PURTE ON TE001=TF001 AND TE002=TF002 AND TE003=TF003
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON TB_EB_USER.ACCOUNT = TE037 COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE TE001=@TE001 AND TE002=@TE002 AND TE003=@TE003
                                ) AS TEMP
                            ");

                    using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@TE001", TE001);
                        cmd.Parameters.AddWithValue("@TE002", TE002);
                        cmd.Parameters.AddWithValue("@TE003", TE003);

                        using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                        {
                            sqlConn.Open();
                            adapter.Fill(dt);
                            sqlConn.Close();
                        }
                    }
                }

                if (dt.Rows.Count > 0)
                    return dt;
                else
                    return null;
            }
            catch (Exception ex)
            {
                // 記錄錯誤（可改成你自己的 logging）
                Console.WriteLine("SEARCHPURTEPURTF Error: " + ex.Message);
                return null;
            }
        }

        public void UPDATEPURTEUDF01()
        {
            StringBuilder sql = new StringBuilder();

            sql.AppendLine(@"
                            UPDATE [TK].dbo.PURTE  
                            SET UDF01 = 'UOF'
                            WHERE TE017 = 'N' AND (UDF01 IN ('Y','y'))
                        ");

            using (SqlConnection conn = new SqlConnection(BuildDecryptedConnection("dberp")))
            {
                int result = ExecuteSqlWithTransaction(conn, sql.ToString());

                if (result == 0)
                {
                    // 沒有更新到資料，可以加日誌或其他處理
                    Console.WriteLine("UPDATEPURTEUDF01: No rows updated.");
                }
                else
                {
                    Console.WriteLine($"UPDATEPURTEUDF01: {result} rows updated.");
                }
            }
        }
        //將MOCMANULINEMERGE 預排的訂單，新增到MOCUE中
        //20250806 停用
        public void ADDTOERPTKMOCUE()
        {
            try
            {
                StringBuilder sql = new StringBuilder();

                sql.AppendLine(@"
                                INSERT INTO [TK].dbo.MOCUE (
                                    [COMPANY], [CREATOR], [USR_GROUP], [CREATE_DATE], [MODIFIER],
                                    [MODI_DATE], [FLAG], [CREATE_TIME], [MODI_TIME], [TRANS_TYPE],
                                    [TRANS_NAME], [sync_date], [sync_time], [sync_mark], [sync_count],
                                    [DataUser], [DataGroup], [UE001], [UE002], [UE003], [UE004], [UE005],
                                    [UE006], [UE007], [UE008], [UE009], [UE010], [UE011], [UE012], [UE013],
                                    [UE014], [UE015], [UE016], [UE017], [UE018], [UE019], [UE020], [UE021],
                                    [UE022], [UDF01], [UDF02], [UDF03], [UDF04], [UDF05], [UDF06], [UDF07],
                                    [UDF08], [UDF09], [UDF10]
                                )
                                SELECT 
                                    '' AS [COMPANY], '' AS [CREATOR], '' AS [USR_GROUP], '' AS [CREATE_DATE],
                                    '' AS [MODIFIER], '' AS [MODI_DATE], 0 AS [FLAG], '' AS [CREATE_TIME],
                                    '' AS [MODI_TIME], '' AS [TRANS_TYPE], '' AS [TRANS_NAME], '' AS [sync_date],
                                    '' AS [sync_time], '' AS [sync_mark], 0 AS [sync_count], '' AS [DataUser],
                                    '' AS [DataGroup],
                                    MOCTA.TA001 AS [UE001],
                                    MOCTA.TA002 AS [UE002],
                                    RIGHT('0000'+CAST(ROW_NUMBER() OVER(PARTITION BY MOCTA.TA001+MOCTA.TA002 ORDER BY MOCTA.TA001+MOCTA.TA002) AS nvarchar(50)),4) AS [UE003],
                                    MOCMANULINE.COPTD001 AS [UE004],
                                    MOCMANULINE.COPTD002 AS [UE005],
                                    MOCMANULINE.COPTD003 AS [UE006],
                                    '' AS [UE007],
                                    '0' AS [UE008],
                                    '' AS [UE009], '' AS [UE010], '' AS [UE011], '' AS [UE012],
                                    '' AS [UE013], '' AS [UE014], '' AS [UE015], '' AS [UE016],
                                    '' AS [UE017], 0 AS [UE018], 0 AS [UE019], 0 AS [UE020],
                                    '' AS [UE021], '' AS [UE022],
                                    '' AS [UDF01], '' AS [UDF02], '' AS [UDF03], '' AS [UDF04], '' AS [UDF05],
                                    0 AS [UDF06], 0 AS [UDF07], 0 AS [UDF08], 0 AS [UDF09], 0 AS [UDF10]
                                FROM [TKMOC].[dbo].[MOCMANULINEMERGE]
                                JOIN [TKMOC].[dbo].[MOCMANULINE] ON MOCMANULINEMERGE.SID = MOCMANULINE.ID
                                JOIN [TK].dbo.MOCTA ON MOCMANULINEMERGE.NO = MOCTA.TA033
                                WHERE MOCTA.TA013 = 'Y'
                                    AND MOCTA.TA033 LIKE CONVERT(nvarchar, DATEPART(YEAR, GETDATE())) + '%'
                                    AND MOCTA.TA001 + MOCTA.TA002 NOT IN (
                                        SELECT UE001 + UE002 FROM [TK].dbo.MOCUE GROUP BY UE001 + UE002
                                    )
                                ORDER BY MOCTA.TA001, MOCTA.TA002, MOCTA.TA033, MOCMANULINE.COPTD001, MOCMANULINE.COPTD002, MOCMANULINE.COPTD003
                            ");

                using (SqlConnection conn = new SqlConnection(BuildDecryptedConnection("dberp")))
                {
                    int result = ExecuteSqlWithTransaction(conn, sql.ToString());

                    // 這裡如果是 WinForm 可用 MessageBox 或 Label 顯示
                    Console.WriteLine($"新增筆數：{result}", "完成", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"執行失敗：{ex.Message}", "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        //停用-轉入進貨單到品保檢
        //20250806 停用
        public void ADDTKQCQCPURTH()
        {
            StringBuilder sql = new StringBuilder();

            sql.AppendLine(@"
                            INSERT INTO [TKQC].[dbo].[QCPURTH]
                            (
                                [TH001], [TH002], [TH003], [TG003], [TG005], [TG021],
                                [TH004], [TH005], [TH006], [TH007], [TH008], [TH009],
                                [SAMPLENUMS], [CARNO], [CHECKITEMS], [COA], [INNERCHECKS],
                                [INUMS], [BACKNUMS], [DATES], [QCMAN], [COMMENTS], [ISIN]
                            )
                            SELECT 
                                TH001, TH002, TH003, TG003, TG005, TG021,
                                TH004, TH005, TH006, TH007, TH008, TH009,
                                0 AS SAMPLENUMS, 
                                '' AS CARNO,
                                '' AS CHECKITEMS,
                                '' AS COA,
                                '' AS INNERCHECKS,
                                0 AS INUMS,
                                0 AS BACKNUMS,
                                '' AS DATES,
                                '' AS QCMAN,
                                '' AS COMMENTS,
                                'N' AS ISIN
                            FROM [TK].dbo.PURTG, [TK].dbo.PURTH
                            WHERE TG001 = TH001 AND TG002 = TH002
                                AND TG003 >= '20220726'
                                AND TH001 + TH002 + TH003 NOT IN (
                                    SELECT TH001 + TH002 + TH003 FROM [TKQC].[dbo].[QCPURTH]
                                )");

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
                {
                    conn.Open();
                    using (SqlTransaction tran = conn.BeginTransaction())
                    using (SqlCommand cmd = new SqlCommand(sql.ToString(), conn, tran))
                    {
                        cmd.CommandTimeout = 60;

                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                        {
                            tran.Commit();
                            Console.WriteLine("新增筆數：" + result);
                        }
                        else
                        {
                            tran.Rollback();
                            Console.WriteLine("未新增任何資料。");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("錯誤：" + ex.Message);
            }
        }

        //ERP採購核價單>轉入UOF簽核
        public void NEWPURTLPURTMPURTN()
        {
            try
            {
                // 解密連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
               

                StringBuilder sbSql = new StringBuilder();
                sbSql.AppendLine(@"
                                    SELECT TL001, TL002, UDF01
                                    FROM [TK].dbo.PURTL
                                    WHERE UDF01 = 'Y'
                                    ORDER BY TL001, TL002
                                ");

                using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
                using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), conn))
                {
                    DataSet ds = new DataSet();
                    conn.Open();
                    adapter.Fill(ds, "PURTL");

                    if (ds.Tables["PURTL"].Rows.Count > 0)
                    {
                        foreach (DataRow dr in ds.Tables["PURTL"].Rows)
                        {
                            string TL001 = dr["TL001"].ToString().Trim();
                            string TL002 = dr["TL002"].ToString().Trim();
                            ADD_PURTLPURTMPURTN_TB_WKF_EXTERNAL_TASK(TL001, TL002);
                        }
                    }
                    else
                    {
                        Console.WriteLine("沒有符合條件的 PURTL 資料。");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("發生錯誤：" + ex.Message);
            }

            // 無論是否成功，都執行更新
            UPDATEPURTLUDF01();
        }




        public void ADD_PURTLPURTMPURTN_TB_WKF_EXTERNAL_TASK(string TL001, string TL002)
        {

            DataTable DT = SEARCHPURTLPURTMPURTN(TL001, TL002);
            if (DT.Rows.Count == 0) return;

            DataRow first = DT.Rows[0];
            DataTable DTUPFDEP = SEARCHUOFDEP(first["CREATOR"].ToString());

            string account = first["CREATOR"].ToString();
            string groupId = first["GROUP_ID"].ToString();
            string jobTitleId = first["TITLE_ID"].ToString();
            string fillerName = first["MV002"].ToString();
            string fillerUserGuid = first["USER_GUID"].ToString();
            string EXTERNAL_FORM_NBR = first["TL001"].ToString().Trim() + first["TL002"].ToString().Trim();

            string formVersionId = SEARCHFORM_UOF_VERSION_ID("PUR30..採購核價單");

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement form = xmlDoc.CreateElement("Form");
            form.SetAttribute("formVersionId", formVersionId);
            form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(form);

            XmlElement applicant = CreateApplicant(xmlDoc, account, groupId, jobTitleId);
            form.AppendChild(applicant);

            XmlElement comment = xmlDoc.CreateElement("Comment");
            comment.InnerText = "申請者意見";
            applicant.AppendChild(comment);

            XmlElement formFieldValue = xmlDoc.CreateElement("FormFieldValue");
            form.AppendChild(formFieldValue);

            AddFieldItem(xmlDoc, formFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TL001", first["TL001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TL002", first["TL002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TL003", first["TL003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TL004", first["TL004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TL004NAME", first["TL004NAME"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TL005", first["TL005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TL008", first["TL008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TL007", first["TL007"].ToString(), fillerName, fillerUserGuid, account);

            XmlElement purtmField = AddFieldItem(xmlDoc, formFieldValue, "PURTM", "", fillerName, fillerUserGuid, account);
            XmlElement dataGrid = xmlDoc.CreateElement("DataGrid");
            purtmField.AppendChild(dataGrid);

            int rowIndex = 0;
            foreach (DataRow od in DT.Rows)
            {
                XmlElement row = xmlDoc.CreateElement("Row");
                row.SetAttribute("order", rowIndex.ToString());

                AppendCellToRow(xmlDoc, row, od, "TM003");
                AppendCellToRow(xmlDoc, row, od, "TM004");
                AppendCellToRow(xmlDoc, row, od, "TM005");
                AppendCellToRow(xmlDoc, row, od, "TM006");
                AppendCellToRow(xmlDoc, row, od, "TM009");
                AppendCellToRow(xmlDoc, row, od, "TM010");
                AppendCellToRow(xmlDoc, row, od, "TM014");
                AppendCellToRow(xmlDoc, row, od, "TM015");
                AppendCellToRow(xmlDoc, row, od, "TN007");
                AppendCellToRow(xmlDoc, row, od, "TN008");
                AppendCellToRow(xmlDoc, row, od, "TM012");

                dataGrid.AppendChild(row);
                rowIndex++;
            }

            // 以下直接寫入資料庫，整合在此方法內
            Class1 TKID = new Class1(); // 解密類別
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            string sql = $@"
                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                        VALUES (NEWID(), @XML, 2, @EXTERNAL_FORM_NBR)";

            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                using (SqlCommand cmd = new SqlCommand(sql, conn))
                {
                    cmd.Parameters.AddWithValue("@XML", form.OuterXml);
                    cmd.Parameters.AddWithValue("@EXTERNAL_FORM_NBR", EXTERNAL_FORM_NBR);
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                // 這邊可以 Log 錯誤或拋出例外
                throw new ApplicationException("寫入外部任務失敗", ex);
            }
        }

        public DataTable SEARCHPURTLPURTMPURTN(string TL001, string TL002)
        {
            DataTable dt = new DataTable();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                string connectionString = sqlsb.ConnectionString;

                string sql = @"
                                SELECT *
                                    ,USER_GUID,NAME
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS GROUP_ID
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS TITLE_ID
                                    ,MA002 AS TL004NAME
                                    ,NAME AS NAME
                                FROM 
                                (
                                    SELECT 
                                        PURMA.MA001
                                        ,PURMA.MA002
                                        ,PURMA.MA003
                                        ,PURTL.TL001
                                        ,PURTL.TL002
                                        ,PURTL.TL003
                                        ,PURTL.TL004
                                        ,PURTL.TL005
                                        ,PURTL.TL006
                                        ,PURTL.TL007
                                        ,PURTL.TL008
                                        ,PURTL.TL010
                                        ,PURTM.TM003
                                        ,PURTM.TM004
                                        ,PURTM.TM005
                                        ,PURTM.TM006
                                        ,PURTM.TM007
                                        ,PURTM.TM008
                                        ,PURTM.TM009
                                        ,PURTM.TM010
                                        ,PURTM.TM012
                                        ,PURTM.TM014
                                        ,PURTM.TM015
                                        ,PURTN.TN007
                                        ,PURTN.TN008
                                        ,PURTN.TN009
                                        ,PURTM.CREATOR
                                        ,[TB_EB_USER].USER_GUID
                                        ,[TB_EB_USER].NAME
                                        ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=PURTM.CREATOR) AS MV002
                                    FROM [TK].dbo.PURMA
                                    INNER JOIN [TK].dbo.PURTL ON MA001 = TL004
                                    INNER JOIN [TK].dbo.PURTM ON TL001 = TM001 AND TL002 = TM002
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT = PURTM.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    LEFT JOIN [TK].dbo.PURTN ON TM001 = TN001 AND TM002 = TN002 AND TM003 = TN003
                                    WHERE TL001 = @TL001 AND TL002 = @TL002
                                ) AS TEMP";

                using (SqlConnection conn = new SqlConnection(connectionString))
                using (SqlCommand cmd = new SqlCommand(sql, conn))
                {
                    cmd.Parameters.AddWithValue("@TL001", TL001);
                    cmd.Parameters.AddWithValue("@TL002", TL002);

                    using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                    {
                        conn.Open();
                        adapter.Fill(dt);
                    }
                }
            }
            catch (Exception ex)
            {
                // TODO: 加入錯誤記錄 (Log)
                // ex.Message 或 ex.ToString()
                dt.Clear(); // 出錯回傳空資料表
            }

            return dt;
        }


        public void UPDATEPURTLUDF01()
        {
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                using (SqlTransaction tran = conn.BeginTransaction())
                using (SqlCommand cmd = conn.CreateCommand())
                {
                    cmd.Transaction = tran;
                    cmd.CommandTimeout = 60;
                    cmd.CommandText = @"
                                    UPDATE [TK].dbo.PURTL
                                    SET UDF01 = 'UOF'
                                    WHERE UDF01 = 'Y'";

                    try
                    {
                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                        {
                            tran.Commit();
                        }
                        else
                        {
                            tran.Rollback();
                        }
                    }
                    catch (Exception ex)
                    {
                        tran.Rollback();
                        // TODO: 這邊建議加上 Log 記錄 ex.Message 或拋出例外
                        throw new ApplicationException("更新PURTL UDF01失敗", ex);
                    }
                }
            }
        }


        public void ADDPURMBPURMC()
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                 
                                    ");

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  
                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }
        }

        //PURA0.進貨-原物料品質驗收單
        public void NEWPURTGPURTH()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密使用者帳號與密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    string query = @"
                                    SELECT TG001, TG002, UDF01
                                    FROM [TK].dbo.PURTG
                                    WHERE TG013 = 'N'
                                    AND UDF01 IN ('Y', 'y')
                                    ORDER BY TG001, TG002
                                ";

                    using (SqlDataAdapter adapter = new SqlDataAdapter(query, sqlConn))
                    {
                        DataSet ds = new DataSet();
                        adapter.Fill(ds, "PURTG");

                        DataTable purtgTable = ds.Tables["PURTG"];

                        if (purtgTable.Rows.Count > 0)
                        {
                            foreach (DataRow dr in purtgTable.Rows)
                            {
                                string tg001 = dr["TG001"].ToString().Trim();
                                string tg002 = dr["TG002"].ToString().Trim();

                                // 根據你業務邏輯選擇一個方法
                                // ADD_PURTGPURTH_TB_WKF_EXTERNAL_TASK(tg001, tg002);
                                ADD_PURTGPURTH_TB_WKF_EXTERNAL_TASK2(tg001, tg002);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議寫入 log 或回傳錯誤訊息
                Console.WriteLine("錯誤發生：" + ex.Message);
            }

            // 成功或失敗都執行更新
            UPDATEPURTGUDF01();
        }
        public void ADD_PURTGPURTH_TB_WKF_EXTERNAL_TASK2(string TG001, string TG002)
        {
            DataTable dt = SEARCHPURTGPURTH(TG001, TG002);
            DataTable dtUpfdep = SEARCHUOFDEP(dt.Rows[0]["CREATOR"].ToString());

            string account = dt.Rows[0]["CREATOR"].ToString();
            string groupId = dt.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = dt.Rows[0]["TITLE_ID"].ToString();
            string fillerName = dt.Rows[0]["MV002"].ToString();
            string fillerUserGuid = dt.Rows[0]["USER_GUID"].ToString();

            string depName = dtUpfdep.Rows[0]["DEPNAME"].ToString();
            string depNo = dtUpfdep.Rows[0]["DEPNO"].ToString();

            string externalFormNbr = dt.Rows[0]["TG001"].ToString().Trim() + dt.Rows[0]["TG002"].ToString().Trim();

            string purtgId = SEARCHFORM_UOF_VERSION_ID("PURA0.進貨-進貨品質驗收單");

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement form = xmlDoc.CreateElement("Form");

            if (!string.IsNullOrEmpty(purtgId))
            {
                form.SetAttribute("formVersionId", purtgId);
            }
            form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(form);

            XmlElement applicant = CreateApplicant(xmlDoc, account, groupId, jobTitleId);
            form.AppendChild(applicant);

            XmlElement comment = xmlDoc.CreateElement("Comment");
            comment.InnerText = "申請者意見";
            applicant.AppendChild(comment);

            XmlElement formFieldValue = xmlDoc.CreateElement("FormFieldValue");
            form.AppendChild(formFieldValue);

            AddFieldItem(xmlDoc, formFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TG003", dt.Rows[0]["TG003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TG005", dt.Rows[0]["TG005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TG021", dt.Rows[0]["TG021"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TG001", dt.Rows[0]["TG001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "TG002", dt.Rows[0]["TG002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, formFieldValue, "PURTH", "", fillerName, fillerUserGuid, account);

            XmlNode purthFieldItem = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='PURTH']");
            XmlElement dataGrid = xmlDoc.CreateElement("DataGrid");
            purthFieldItem.AppendChild(dataGrid);

            int rowIndex = 0;
            foreach (DataRow od in dt.Rows)
            {
                XmlElement row = xmlDoc.CreateElement("Row");
                row.SetAttribute("order", rowIndex.ToString());

                // 使用已存在的 AppendCellToRow 建立常用欄位
                AppendCellToRow(xmlDoc, row, od, "TH003");
                AppendCellToRow(xmlDoc, row, od, "TH004");
                AppendCellToRow(xmlDoc, row, od, "TH005");
                AppendCellToRow(xmlDoc, row, od, "TH006");
                AppendCellToRow(xmlDoc, row, od, "TH007");
                AppendCellToRow(xmlDoc, row, od, "TH008");
                AppendCellToRow(xmlDoc, row, od, "TH010");
                AppendCellToRow(xmlDoc, row, od, "TH015");

                // 固定欄位，直接用 XmlElement 建立
                XmlElement cell = xmlDoc.CreateElement("Cell");
                cell.SetAttribute("fieldId", "CHECK");
                cell.SetAttribute("fieldValue", "Y");
                cell.SetAttribute("realValue", "");
                cell.SetAttribute("customValue", "@null");
                cell.SetAttribute("enableSearch", "True");
                cell.SetAttribute("fieldMessage", "Y");
                row.AppendChild(cell);

                cell = xmlDoc.CreateElement("Cell");
                cell.SetAttribute("fieldId", "DETAIL01");
                cell.SetAttribute("fieldValue", "");
                cell.SetAttribute("realValue", "");
                cell.SetAttribute("customValue", "");
                cell.SetAttribute("enableSearch", "True");
                cell.SetAttribute("fieldMessage", "Y");
                row.AppendChild(cell);

                cell = xmlDoc.CreateElement("Cell");
                cell.SetAttribute("fieldId", "DETAIL02");
                cell.SetAttribute("fieldValue", "V");
                cell.SetAttribute("realValue", "");
                cell.SetAttribute("customValue", "@null");
                cell.SetAttribute("enableSearch", "True");
                cell.SetAttribute("fieldMessage", "Y");
                row.AppendChild(cell);

                cell = xmlDoc.CreateElement("Cell");
                cell.SetAttribute("fieldId", "DETAIL04");
                cell.SetAttribute("fieldValue", "N");
                cell.SetAttribute("realValue", "");
                cell.SetAttribute("customValue", "@null");
                cell.SetAttribute("enableSearch", "True");
                cell.SetAttribute("fieldMessage", "Y");
                row.AppendChild(cell);

                cell = xmlDoc.CreateElement("Cell");
                cell.SetAttribute("fieldId", "DETAIL05");
                cell.SetAttribute("fieldValue", "0");
                cell.SetAttribute("realValue", "");
                cell.SetAttribute("customValue", "");
                cell.SetAttribute("enableSearch", "True");
                cell.SetAttribute("fieldMessage", "Y");
                row.AppendChild(cell);

                cell = xmlDoc.CreateElement("Cell");
                cell.SetAttribute("fieldId", "DETAIL06");
                cell.SetAttribute("fieldValue", "");
                cell.SetAttribute("realValue", "");
                cell.SetAttribute("customValue", "");
                cell.SetAttribute("enableSearch", "True");
                cell.SetAttribute("fieldMessage", "Y");
                row.AppendChild(cell);

                AppendCellToRow(xmlDoc, row, od, "TH036");
                AppendCellToRow(xmlDoc, row, od, "TH117");

                cell = xmlDoc.CreateElement("Cell");
                cell.SetAttribute("fieldId", "VALIDDAYS");
                cell.SetAttribute("fieldValue", od["製造有效天數"].ToString());
                cell.SetAttribute("realValue", "");
                cell.SetAttribute("customValue", "");
                cell.SetAttribute("enableSearch", "True");
                cell.SetAttribute("fieldMessage", "Y");
                row.AppendChild(cell);

                cell = xmlDoc.CreateElement("Cell");
                cell.SetAttribute("fieldId", "STILLDAYS");
                cell.SetAttribute("fieldValue", od["本日有效天數"].ToString());
                cell.SetAttribute("realValue", "");
                cell.SetAttribute("customValue", "");
                cell.SetAttribute("enableSearch", "True");
                cell.SetAttribute("fieldMessage", "Y");
                row.AppendChild(cell);

                cell = xmlDoc.CreateElement("Cell");
                cell.SetAttribute("fieldId", "STILLPCTS");
                cell.SetAttribute("fieldValue", od["有效百分比"].ToString());
                cell.SetAttribute("realValue", "");
                cell.SetAttribute("customValue", "");
                cell.SetAttribute("enableSearch", "True");
                cell.SetAttribute("fieldMessage", "Y");
                row.AppendChild(cell);

                dataGrid.AppendChild(row);
                rowIndex++;
            }

            Class1 tkid = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = tkid.Decryption(sqlsb.Password);
            sqlsb.UserID = tkid.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;
            StringBuilder queryString = new StringBuilder();

            queryString.AppendFormat(@" 
                                INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                 (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                VALUES (NEWID(),@XML,2,'{0}')
                                ", externalFormNbr);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = form.OuterXml;

                    connection.Open();
                    int count = command.ExecuteNonQuery();
                    connection.Close();
                }
            }
            catch
            {
            }
            finally
            {
            }
        }



        public void ADD_PURTGPURTH_TB_WKF_EXTERNAL_TASK(string TG001, string TG002)
        {

            DataTable DT = SEARCHPURTGPURTH(TG001, TG002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TG001"].ToString().Trim() + DT.Rows[0]["TG002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            //建立根節點
            XmlElement Form = xmlDoc.CreateElement("Form");

            //正式的id
            string PURTGID = SEARCHFORM_UOF_VERSION_ID("PUR60.進貨單");

            if (!string.IsNullOrEmpty(PURTGID))
            {
                Form.SetAttribute("formVersionId", PURTGID);
            }


            Form.SetAttribute("urgentLevel", "2");
            //加入節點底下
            xmlDoc.AppendChild(Form);

            ////建立節點Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            //加入節點底下
            Form.AppendChild(Applicant);

            //建立節點 Comment
            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            //加入至節點底下
            Applicant.AppendChild(Comment);

            //建立節點 FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            //加入至節點底下
            Form.AppendChild(FormFieldValue);

            //建立節點FieldItem
            //ID 表單編號	
            XmlElement FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "ID");
            FieldItem.SetAttribute("fieldValue", "");
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG001	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG001");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG001"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG002	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG002");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG002"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG003	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG003");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG003"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG004	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG004");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG004"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG005	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG005");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG005"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG021	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG021");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG021"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG022	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG022");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG022"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG009	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG009");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG009"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG010	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG010");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG010"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG011	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG011");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG011"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG017	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG017");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG017"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG019	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG019");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG019"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG020	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG020");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG020"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG007	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG007");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG007"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG008	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG008");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG008"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG016	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TG016");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TG016"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);



            //DataGrid
            //建立節點FieldItem
            //PURTH
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "PURTH");
            FieldItem.SetAttribute("fieldValue", "");
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點 DataGrid
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            //DataGrid 加入至 TB 節點底下
            XmlNode PURTD = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='PURTH']");
            PURTD.AppendChild(DataGrid);


            foreach (DataRow od in DT.Rows)
            {
                // 新增 Row
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", (rowscounts).ToString());

                //Row	TH003
                XmlElement Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH003");
                Cell.SetAttribute("fieldValue", od["TH003"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH004
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH004");
                Cell.SetAttribute("fieldValue", od["TH004"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH005
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH005");
                Cell.SetAttribute("fieldValue", od["TH005"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH006
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH006");
                Cell.SetAttribute("fieldValue", od["TH006"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH007
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH007");
                Cell.SetAttribute("fieldValue", od["TH007"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH008
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH008");
                Cell.SetAttribute("fieldValue", od["TH008"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH009
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH009");
                Cell.SetAttribute("fieldValue", od["TH009"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH010
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH010");
                Cell.SetAttribute("fieldValue", od["TH010"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH011
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH011");
                Cell.SetAttribute("fieldValue", od["TH011"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH012
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH012");
                Cell.SetAttribute("fieldValue", od["TH012"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH013
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH013");
                Cell.SetAttribute("fieldValue", od["TH013"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH014
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH014");
                Cell.SetAttribute("fieldValue", od["TH014"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH015
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH015");
                Cell.SetAttribute("fieldValue", od["TH015"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH016
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH016");
                Cell.SetAttribute("fieldValue", od["TH016"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH017
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TH017");
                Cell.SetAttribute("fieldValue", od["TH017"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);





                rowscounts = rowscounts + 1;

                //DataGrid PURTM
                XmlNode DataGridS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='PURTH']/DataGrid");
                DataGridS.AppendChild(Row);

            }


            ////用ADDTACK，直接啟動起單
            //ADDTACK(Form);

            //ADD TO DB
            ////string connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ToString();

            //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
            //sqlConn = new SqlConnection(connectionString);

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);
            connectionString = sqlConn.ConnectionString.ToString();

            StringBuilder queryString = new StringBuilder();




            queryString.AppendFormat(@" INSERT INTO [{0}].dbo.TB_WKF_EXTERNAL_TASK
                                         (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(),@XML,2,'{1}')
                                        ", DBNAME, EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public DataTable SEARCHPURTGPURTH(string TG001, string TG002)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);


                sbSql.Clear();
                sbSqlQuery.Clear();

                //庫存數量看LA009 IN ('20004','20006','20008','20019','20020'

                sbSql.AppendFormat(@"  
                                    SELECT *
                                    ,USER_GUID,NAME
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    , (CONVERT(NVARCHAR, CAST(
                                        CASE 
                                            WHEN 本日有效天數 > 0 AND 製造有效天數 > 0 
                                            THEN 本日有效天數 * 100.0 / 製造有效天數 
                                            ELSE 0 
                                        END 
                                    AS DECIMAL(10,2))) + '%') AS '有效百分比'

                                    FROM 
                                    (
                                    SELECT 

                                    [PURTG].[COMPANY]
                                    ,[PURTG].[CREATOR]
                                    ,[PURTG].[USR_GROUP]
                                    ,[PURTG].[CREATE_DATE]
                                    ,[PURTG].[MODIFIER]
                                    ,[PURTG].[MODI_DATE]
                                    ,[PURTG].[FLAG]
                                    ,[PURTG].[CREATE_TIME]
                                    ,[PURTG].[MODI_TIME]
                                    ,[PURTG].[TRANS_TYPE]
                                    ,[PURTG].[TRANS_NAME]
                                    ,[PURTG].[sync_date]
                                    ,[PURTG].[sync_time]
                                    ,[PURTG].[sync_mark]
                                    ,[PURTG].[sync_count]
                                    ,[PURTG].[DataUser]
                                    ,[PURTG].[DataGroup]
                                    ,[PURTG].[TG001]
                                    ,[PURTG].[TG002]
                                    ,[PURTG].[TG003]
                                    ,[PURTG].[TG004]
                                    ,[PURTG].[TG005]
                                    ,[PURTG].[TG006]
                                    ,[PURTG].[TG007]
                                    ,[PURTG].[TG008]
                                    ,[PURTG].[TG009]
                                    ,[PURTG].[TG010]
                                    ,[PURTG].[TG011]
                                    ,[PURTG].[TG012]
                                    ,[PURTG].[TG013]
                                    ,[PURTG].[TG014]
                                    ,[PURTG].[TG015]
                                    ,[PURTG].[TG016]
                                    ,[PURTG].[TG017]
                                    ,[PURTG].[TG018]
                                    ,[PURTG].[TG019]
                                    ,[PURTG].[TG020]
                                    ,[PURTG].[TG021]
                                    ,[PURTG].[TG022]
                                    ,[PURTG].[TG023]
                                    ,[PURTG].[TG024]
                                    ,[PURTG].[TG025]
                                    ,[PURTG].[TG026]
                                    ,[PURTG].[TG027]
                                    ,[PURTG].[TG028]
                                    ,[PURTG].[TG029]
                                    ,[PURTG].[TG030]
                                    ,[PURTG].[TG031]
                                    ,[PURTG].[TG032]
                                    ,[PURTG].[TG033]
                                    ,[PURTG].[TG034]
                                    ,[PURTG].[TG035]
                                    ,[PURTG].[TG036]
                                    ,[PURTG].[TG037]
                                    ,[PURTG].[TG038]
                                    ,[PURTG].[TG039]
                                    ,[PURTG].[TG040]
                                    ,[PURTG].[TG041]
                                    ,[PURTG].[TG042]
                                    ,[PURTG].[TG043]
                                    ,[PURTG].[TG044]
                                    ,[PURTG].[TG045]
                                    ,[PURTG].[TG046]
                                    ,[PURTG].[TG047]
                                    ,[PURTG].[TG048]
                                    ,[PURTG].[TG049]
                                    ,[PURTG].[TG050]
                                    ,[PURTG].[TG051]
                                    ,[PURTG].[TG052]
                                    ,[PURTG].[TG053]
                                    ,[PURTG].[TG054]
                                    ,[PURTG].[TG055]
                                    ,[PURTG].[TG056]
                                    ,[PURTG].[TG057]
                                    ,[PURTG].[TG058]
                                    ,[PURTG].[TG059]
                                    ,[PURTG].[TG060]
                                    ,[PURTG].[TG061]
                                    ,[PURTG].[TG062]
                                    ,[PURTG].[TG063]
                                    ,[PURTG].[TG064]
                                    ,[PURTG].[TG065]
                                    ,[PURTG].[TG066]
                                    ,[PURTG].[TG067]
                                    ,[PURTG].[TG068]
                                    ,[PURTG].[TG069]
                                    ,[PURTG].[TG070]
                                    ,[PURTG].[TG071]
                                    ,[PURTG].[TG072]
                                    ,[PURTG].[TG073]
                                    ,[PURTG].[TG074]
                                    ,[PURTG].[TG075]
                                    ,[PURTG].[TG076]
                                    ,[PURTG].[TG077]
                                    ,[PURTG].[TG078]
                                    ,[PURTG].[TG079]
                                    ,[PURTG].[TG080]
                                    ,[PURTG].[TG081]
                                    ,[PURTG].[TG082]
                                    ,[PURTG].[TG083]
                                    ,[PURTG].[TG084]
                                    ,[PURTG].[TG085]
                                    ,[PURTG].[TG086]
                                    ,[PURTG].[TG087]
                                    ,[PURTG].[TG088]
                                    ,[PURTG].[TG089]
                                    ,[PURTG].[TG090]
                                    ,[PURTG].[UDF01] AS 'PURTGUDF01'
                                    ,[PURTG].[UDF02] AS 'PURTGUDF02'
                                    ,[PURTG].[UDF03] AS 'PURTGUDF03'
                                    ,[PURTG].[UDF04] AS 'PURTGUDF04'
                                    ,[PURTG].[UDF05] AS 'PURTGUDF05'
                                    ,[PURTG].[UDF06] AS 'PURTGUDF06'
                                    ,[PURTG].[UDF07] AS 'PURTGUDF07'
                                    ,[PURTG].[UDF08] AS 'PURTGUDF08'
                                    ,[PURTG].[UDF09] AS 'PURTGUDF09'
                                    ,[PURTG].[UDF10] AS 'PURTGUDF10'
                                    ,[PURTH].[TH001]
                                    ,[PURTH].[TH002]
                                    ,[PURTH].[TH003]
                                    ,[PURTH].[TH004]
                                    ,[PURTH].[TH005]
                                    ,[PURTH].[TH006]
                                    ,[PURTH].[TH007]
                                    ,[PURTH].[TH008]
                                    ,[PURTH].[TH009]
                                    ,[PURTH].[TH010]
                                    ,[PURTH].[TH011]
                                    ,[PURTH].[TH012]
                                    ,[PURTH].[TH013]
                                    ,[PURTH].[TH014]
                                    ,[PURTH].[TH015]
                                    ,[PURTH].[TH016]
                                    ,[PURTH].[TH017]
                                    ,[PURTH].[TH018]
                                    ,[PURTH].[TH019]
                                    ,[PURTH].[TH020]
                                    ,[PURTH].[TH021]
                                    ,[PURTH].[TH022]
                                    ,[PURTH].[TH023]
                                    ,[PURTH].[TH024]
                                    ,[PURTH].[TH025]
                                    ,[PURTH].[TH026]
                                    ,[PURTH].[TH027]
                                    ,[PURTH].[TH028]
                                    ,[PURTH].[TH029]
                                    ,[PURTH].[TH030]
                                    ,[PURTH].[TH031]
                                    ,[PURTH].[TH032]
                                    ,[PURTH].[TH033]
                                    ,[PURTH].[TH034]
                                    ,[PURTH].[TH035]
                                    ,[PURTH].[TH036]
                                    ,[PURTH].[TH037]
                                    ,[PURTH].[TH038]
                                    ,[PURTH].[TH039]
                                    ,[PURTH].[TH040]
                                    ,[PURTH].[TH041]
                                    ,[PURTH].[TH042]
                                    ,[PURTH].[TH043]
                                    ,[PURTH].[TH044]
                                    ,[PURTH].[TH045]
                                    ,[PURTH].[TH046]
                                    ,[PURTH].[TH047]
                                    ,[PURTH].[TH048]
                                    ,[PURTH].[TH049]
                                    ,[PURTH].[TH050]
                                    ,[PURTH].[TH051]
                                    ,[PURTH].[TH052]
                                    ,[PURTH].[TH053]
                                    ,[PURTH].[TH054]
                                    ,[PURTH].[TH055]
                                    ,[PURTH].[TH056]
                                    ,[PURTH].[TH057]
                                    ,[PURTH].[TH058]
                                    ,[PURTH].[TH059]
                                    ,[PURTH].[TH060]
                                    ,[PURTH].[TH061]
                                    ,[PURTH].[TH062]
                                    ,[PURTH].[TH063]
                                    ,[PURTH].[TH064]
                                    ,[PURTH].[TH065]
                                    ,[PURTH].[TH066]
                                    ,[PURTH].[TH067]
                                    ,[PURTH].[TH068]
                                    ,[PURTH].[TH069]
                                    ,[PURTH].[TH070]
                                    ,[PURTH].[TH071]
                                    ,[PURTH].[TH072]
                                    ,[PURTH].[TH073]
                                    ,[PURTH].[TH074]
                                    ,[PURTH].[TH075]
                                    ,[PURTH].[TH076]
                                    ,[PURTH].[TH077]
                                    ,[PURTH].[TH078]
                                    ,[PURTH].[TH079]
                                    ,[PURTH].[TH080]
                                    ,[PURTH].[TH081]
                                    ,[PURTH].[TH082]
                                    ,[PURTH].[TH083]
                                    ,[PURTH].[TH084]
                                    ,[PURTH].[TH085]
                                    ,[PURTH].[TH086]
                                    ,[PURTH].[TH087]
                                    ,[PURTH].[TH088]
                                    ,[PURTH].[TH089]
                                    ,[PURTH].[TH090]
                                    ,[PURTH].[TH091]
                                    ,[PURTH].[TH092]
                                    ,[PURTH].[TH093]
                                    ,[PURTH].[TH094]
                                    ,[PURTH].[TH095]
                                    ,[PURTH].[TH096]
                                    ,[PURTH].[TH097]
                                    ,[PURTH].[TH098]
                                    ,[PURTH].[TH099]
                                    ,[PURTH].[TH100]
                                    ,[PURTH].[TH101]
                                    ,[PURTH].[TH102]
                                    ,[PURTH].[TH103]
                                    ,[PURTH].[TH104]
                                    ,[PURTH].[TH105]
                                    ,[PURTH].[TH106]
                                    ,[PURTH].[TH107]
                                    ,[PURTH].[TH108]
                                    ,[PURTH].[TH109]
                                    ,[PURTH].[TH110]
                                    ,[PURTH].[TH111]
                                    ,[PURTH].[TH112]
                                    ,[PURTH].[TH113]
                                    ,[PURTH].[TH114]
                                    ,[PURTH].[TH115]
                                    ,[PURTH].[TH116]
                                    ,[PURTH].[TH117]
                                    ,[PURTH].[TH118]
                                    ,[PURTH].[TH119]
                                    ,[PURTH].[TH120]
                                    ,[PURTH].[UDF01] AS 'PURTHUDF01'
                                    ,[PURTH].[UDF02] AS 'PURTHUDF02'
                                    ,[PURTH].[UDF03] AS 'PURTHUDF03'
                                    ,[PURTH].[UDF04] AS 'PURTHUDF04'
                                    ,[PURTH].[UDF05] AS 'PURTHUDF05'
                                    ,[PURTH].[UDF06] AS 'PURTHUDF06'
                                    ,[PURTH].[UDF07] AS 'PURTHUDF07'
                                    ,[PURTH].[UDF08] AS 'PURTHUDF08'
                                    ,[PURTH].[UDF09] AS 'PURTHUDF09'
                                    ,[PURTH].[UDF10] AS 'PURTHUDF10'
                                    ,[TB_EB_USER].USER_GUID,NAME
                                    ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=PURTH.CREATOR) AS 'MV002'
                                    ,(CASE WHEN ISDATE(TH036)=1 AND ISDATE(TH117)=1 THEN DATEDIFF(DAY,TH117,TH036) ELSE 0 END) AS '製造有效天數'
                                    ,(CASE WHEN ISDATE(TH036)=1 AND ISDATE(TH117)=1 THEN DATEDIFF(DAY,GETDATE(),TH036) ELSE 0 END) AS '本日有效天數'
                                    
                                    FROM [TK].dbo.PURMA,[TK].dbo.PURTG,[TK].dbo.PURTH
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT= PURTH.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE 1=1
                                    AND TG001=TH001 AND TG002=TH002
                                    AND MA001=TG005
                                    AND TG001='{0}' AND TG002='{1}'

                                    ) AS TEMP
                              
                                    ", TG001, TG002);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATEPURTGUDF01()
        {
            // 20210902密解密物件
            Class1 TKID = new Class1();

            var connectionStringBuilder = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
            connectionStringBuilder.Password = TKID.Decryption(connectionStringBuilder.Password);
            connectionStringBuilder.UserID = TKID.Decryption(connectionStringBuilder.UserID);

            string connectionString = connectionStringBuilder.ConnectionString;

            try
            {
                using (var sqlConn = new SqlConnection(connectionString))
                {
                    sqlConn.Open();
                    using (var tran = sqlConn.BeginTransaction())
                    using (var cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                            UPDATE [TK].dbo.PURTG
                                            SET UDF01 = 'UOF'
                                            WHERE UDF01 IN ('Y','y')
                                        ";

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();
                            // 可視情況 log 未更新任何資料的訊息
                        }
                        else
                        {
                            tran.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 例外處理，可視需求記錄日誌
                // e.g. Logger.LogError("UPDATEPURTGUDF01 發生錯誤", ex);
                throw;  // 視需求可選擇重拋或自行處理
            }
        }

        //ERPBOM表變更單>轉入UOF簽核
        public void NEWBOMTABOMTBBOMTC()
        {
            // 建立解密物件
            Class1 TKID = new Class1();

            var sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            try
            {
                using (var sqlConn = new SqlConnection(connectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.Append(@"
                                SELECT TA001, TA002, UDF01
                                FROM [TK].dbo.BOMTA
                                WHERE TA007 = 'N' AND UDF01 IN ('Y','y')
                                ORDER BY TA001, TA002
                            ");

                    using (var adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        using (var ds = new DataSet())
                        {
                            sqlConn.Open();
                            ds.Clear();
                            adapter.Fill(ds, "ds1");

                            if (ds.Tables["ds1"].Rows.Count > 0)
                            {
                                foreach (DataRow dr in ds.Tables["ds1"].Rows)
                                {
                                    ADD_BOMTABOMTBBOMTC_TB_WKF_EXTERNAL_TASK(dr["TA001"].ToString().Trim(), dr["TA002"].ToString().Trim());
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 可加入錯誤日誌，例如 Logger.LogError("NEWBOMTABOMTBBOMTC 失敗", ex);
                throw;
            }

            UPDATEBOMTAUDF01();
        }


        public void ADD_BOMTABOMTBBOMTC_TB_WKF_EXTERNAL_TASK(string TA001, string TA002)
        {
            DataTable DT = SEARCHBOMTABOMTBBOMTC(TA001, TA002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TA001"].ToString().Trim() + DT.Rows[0]["TA002"].ToString().Trim();

            string CHECK_TB004 = "";
            string CHECK_TB005 = "";
            string CHECK_TB006 = "";
            string TB004 = "";
            string TB005 = "";
            string TB006 = "";

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            //建立根節點
            XmlElement Form = xmlDoc.CreateElement("Form");

            //正式的id
            string FORMID = SEARCHFORM_UOF_VERSION_ID("BOM10.BOM變更單");

            if (!string.IsNullOrEmpty(FORMID))
            {
                Form.SetAttribute("formVersionId", FORMID);
            }


            Form.SetAttribute("urgentLevel", "2");
            //加入節點底下
            xmlDoc.AppendChild(Form);

            ////建立節點Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            //加入節點底下
            Form.AppendChild(Applicant);

            //建立節點 Comment
            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            //加入至節點底下
            Applicant.AppendChild(Comment);

            //建立節點 FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            //加入至節點底下
            Form.AppendChild(FormFieldValue);

            // 表單主檔欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA001", DT.Rows[0]["TA001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA002", DT.Rows[0]["TA002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA003", DT.Rows[0]["TA003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA005", DT.Rows[0]["TA005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA006", DT.Rows[0]["TA006"].ToString(), fillerName, fillerUserGuid, account);

            // 表單明細起始欄位（DataGrid）
            AddFieldItem(xmlDoc, FormFieldValue, "BOMTBTC", "", fillerName, fillerUserGuid, account);

            // 建立 DataGrid 並加至 BOMTBTC 欄位底下
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode PURTD = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='BOMTBTC']");
            PURTD.AppendChild(DataGrid);


            foreach (DataRow od in DT.Rows)
            {
                // 新增 Row
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", (rowscounts).ToString());

                // TB003
                AppendCellToRow(xmlDoc, Row, od, "TB003");

                // TB004 - 判斷重複只顯示第一筆，需額外變數記錄
                if (!CHECK_TB004.Equals(od["TB004"].ToString()))
                {
                    CHECK_TB004 = od["TB004"].ToString();
                    TB004 = od["TB004"].ToString();
                }
                else
                {
                    TB004 = "";
                }
                // TB004 用自行寫的，不用 AppendCellToRow，因為 TB004 來源是 TB004 變數，不是 od
                XmlElement Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TB004");
                Cell.SetAttribute("fieldValue", TB004);
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);

                // TB004MB002 同理
                if (!CHECK_TB005.Equals(od["TB004MB002"].ToString()))
                {
                    CHECK_TB005 = od["TB004MB002"].ToString();
                    TB005 = od["TB004MB002"].ToString();
                }
                else
                {
                    TB005 = "";
                }
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TB004MB002");
                Cell.SetAttribute("fieldValue", TB005);
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);

                // TB004MB003 同理
                if (!CHECK_TB006.Equals(od["TB004MB003"].ToString()))
                {
                    CHECK_TB006 = od["TB004MB003"].ToString();
                    TB006 = od["TB004MB003"].ToString();
                }
                else
                {
                    TB006 = "";
                }
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TB004MB003");
                Cell.SetAttribute("fieldValue", TB006);
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);

                // 其他欄位用 AppendCellToRow，無 fieldMessage
                AppendCellToRow(xmlDoc, Row, od, "TB008");
                AppendCellToRow(xmlDoc, Row, od, "TB010");
                AppendCellToRow(xmlDoc, Row, od, "TC004");
                AppendCellToRow(xmlDoc, Row, od, "TC005");
                AppendCellToRow(xmlDoc, Row, od, "TC005MB002");

                // 有 fieldMessage = "Y" 的欄位
                AppendCellToRow(xmlDoc, Row, od, "TC005MB003", true);
                AppendCellToRow(xmlDoc, Row, od, "TC008", true);
                AppendCellToRow(xmlDoc, Row, od, "TC009", true);
                AppendCellToRow(xmlDoc, Row, od, "TC010", true);
                AppendCellToRow(xmlDoc, Row, od, "OLDMC004", true);
                AppendCellToRow(xmlDoc, Row, od, "OLDMD006", true);
                AppendCellToRow(xmlDoc, Row, od, "BOMTBUDF03", true);
                AppendCellToRow(xmlDoc, Row, od, "BOMTBUDF04", true);
                AppendCellToRow(xmlDoc, Row, od, "BOMTBUDF05", true);
                AppendCellToRow(xmlDoc, Row, od, "MC010", true);
                AppendCellToRow(xmlDoc, Row, od, "OLDMB001", true);
                AppendCellToRow(xmlDoc, Row, od, "OLDMB002", true);
                AppendCellToRow(xmlDoc, Row, od, "OLDMB003", true);
                AppendCellToRow(xmlDoc, Row, od, "OLDMD007", true);
                AppendCellToRow(xmlDoc, Row, od, "OLDMD008", true);

                rowscounts++;

                // DataGrid append
                XmlNode DataGridS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='BOMTBTC']/DataGrid");
                DataGridS.AppendChild(Row);
            }


            // 解密連線
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            // 組合 SQL 指令
            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES
                                        (NEWID(), @XML, 2, '{0}')
                                ", EXTERNAL_FORM_NBR);

            try
            {
                // 執行 SQL 插入
                using (SqlConnection connection = new SqlConnection(connectionString))
                using (SqlCommand command = new SqlCommand(queryString.ToString(), connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    connection.Open();
                    int count = command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                // 建議：加上 log 或訊息處理
                Console.WriteLine("錯誤：無法插入 TB_WKF_EXTERNAL_TASK。" + ex.Message);
                throw;
            }

        }

        public DataTable SEARCHBOMTABOMTBBOMTC(string TA001, string TA002)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);


                sbSql.Clear();
                sbSqlQuery.Clear();

                //庫存數量看LA009 IN ('20004','20006','20008','20019','20020'

                sbSql.AppendFormat(@"  
                                   SELECT 
                                    TEMP.CREATOR
                                    ,TA001,TA002,TA003,TA005,TA006
                                    ,TB003,TB004,TB010,TB004MB002,TB004MB003,BOMTBUDF06 
                                    ,TC004
                                    ,ISNULL(TC005,'') TC005 
                                    ,TC008
                                    ,TC009
                                    ,TC010
                                    ,ISNULL(TC005MB002,'') TC005MB002
                                    ,ISNULL(TC005MB003,'') TC005MB003 
                                    ,TB008
                                    ,TEMP.USER_GUID
                                    ,TEMP.NAME
                                    ,MV002
                                    ,MC004 AS 'OLDMC004'
                                    ,BOMTBUDF03,BOMTBUDF04,BOMTBUDF05
                                    ,ISNULL(OLDMB001,'') OLDMB001  
                                    ,ISNULL(OLDMB002,'') OLDMB002 
                                    ,ISNULL(OLDMB003,'') OLDMB003 
                                    ,ISNULL(OLDMD006,0) OLDMD006
                                    ,ISNULL(OLDMD007,0) OLDMD007
                                    ,ISNULL(OLDMD008,0) OLDMD008
                                    ,BOMMC.MC010
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    FROM 
                                    (
                                    SELECT 
                                    BOMTA.CREATOR
                                    ,TA001,TA002,TA003,TA005,TA006
                                    ,TB003,TB004,TB010,MB1.MB002 TB004MB002,MB1.MB003 TB004MB003,BOMTB.UDF06 BOMTBUDF06 
                                    ,TC004,TC005,TC008,TC009,TC010,MB2.MB002 TC005MB002,MB2.MB002 TC005MB003
                                    ,TB008
                                    ,BOMTB.UDF03 AS 'BOMTBUDF03' ,BOMTB.UDF04 AS 'BOMTBUDF04' ,BOMTB.UDF05 AS 'BOMTBUDF05' 

                                    ,[TB_EB_USER].USER_GUID,NAME
                                    ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=BOMTA.CREATOR) AS 'MV002'
                                    ,MD1.MD003  AS 'OLDMB001',MB3.MB002 AS 'OLDMB002',MB3.MB003 AS 'OLDMB003',MD1.MD006 AS 'OLDMD006',MD1.MD007 AS 'OLDMD007',MD1.MD008 AS 'OLDMD008'
                                    FROM [TK].dbo.BOMTA
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT= BOMTA.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    ,[TK].dbo.BOMTB
                                    LEFT JOIN [TK].dbo.BOMTC ON TC001=BOMTB.TB001 AND TC002=BOMTB.TB002 AND TC003=BOMTB.TB003

                                    LEFT JOIN [TK].dbo.INVMB MB1 ON TB004=MB1.MB001        

                                    LEFT JOIN [TK].dbo.INVMB MB2 ON TC005=MB2.MB001

                                    LEFT JOIN [TK].dbo.BOMMD MD1 ON MD1.MD001=TB004  AND MD1.MD002=TC004 
                                    LEFT JOIN [TK].dbo.INVMB MB3 ON MB3.MB001=MD1.MD003

                                    WHERE TA001=TB001 AND TA002=TB002 
                                    AND TA001 = '{0}' AND TA002 = '{1}'
                                    ) AS TEMP
                                    LEFT JOIN [TK].dbo.BOMMC ON MC001=TB004
                                    LEFT JOIN [TK].dbo.BOMMD ON MD001=TB004 AND BOMMD.MD003=TC005
                                    ORDER BY TA001,TA002,TB004,TC004
                              
                              
                                    ", TA001, TA002);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATEBOMTAUDF01()
        {
            SqlConnection sqlConn = null;
            SqlTransaction tran = null;
            SqlCommand cmd = null;

            try
            {
                Class1 TKID = new Class1(); // 解密用
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);
                sqlConn.Open();

                tran = sqlConn.BeginTransaction();

                string sql = @"
                            UPDATE [TK].dbo.BOMTA
                            SET UDF01 = 'UOF'
                            WHERE UDF01 IN ('Y','y')
                        ";

                cmd = new SqlCommand(sql, sqlConn, tran);
                cmd.CommandTimeout = 60;

                int result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();
                }
                else
                {
                    tran.Commit();
                }
            }
            catch (Exception ex)
            {
                // 這裡可以記錄錯誤訊息或拋出
                tran?.Rollback();
                // 例如: Log.Error(ex.ToString());
                throw; // 或視情況可改成不拋出，只記錄
            }
            finally
            {
                cmd?.Dispose();
                tran?.Dispose();
                if (sqlConn != null)
                {
                    if (sqlConn.State == System.Data.ConnectionState.Open)
                        sqlConn.Close();
                    sqlConn.Dispose();
                }
            }
        }


        public void ADDTKQCUOFQCPURTGPURTH()
        {
            // 建立解密物件
            Class1 TKID = new Class1();

            var sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            try
            {
                using (var sqlConn = new SqlConnection(connectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.Append(@"                                 
                                SELECT 
                                CONVERT(NVARCHAR, RemoteData.DOC_NBR) AS DOC_NBR,
                                RemoteData.TG001,
                                RemoteData.TG002,
                                RemoteData.TH003
                                FROM OPENQUERY([192.168.1.223], '
                                    SELECT 
                                    T.DOC_NBR,
                                    T.CURRENT_DOC.value(''(Form/FormFieldValue/FieldItem[@fieldId=""TG001""]/@fieldValue)[1]'', ''nvarchar(max)'') AS TG001,
                                    T.CURRENT_DOC.value(''(Form/FormFieldValue/FieldItem[@fieldId=""TG002""]/@fieldValue)[1]'', ''nvarchar(max)'') AS TG002,
                                    Row.value(''(Cell[@fieldId=""TH003""]/@fieldValue)[1]'', ''nvarchar(max)'') AS TH003
                                FROM UOF.DBO.TB_WKF_TASK T WITH(NOLOCK)
                                CROSS APPLY 
                                    T.CURRENT_DOC.nodes(''/Form/FormFieldValue/FieldItem[@fieldId=""PURTH""]/DataGrid/Row'') AS R(Row)
                                WHERE 
                                    T.DOC_NBR LIKE ''PURTH%'' 
                                    AND T.TASK_RESULT = ''0''
                                ') AS RemoteData
                                LEFT JOIN[TKQC].[dbo].[UOFQCPURTGPURTH] AS local
                                ON local.TG001 COLLATE Chinese_Taiwan_Stroke_BIN = RemoteData.TG001 COLLATE Chinese_Taiwan_Stroke_BIN
                                AND local.TG002 COLLATE Chinese_Taiwan_Stroke_BIN = RemoteData.TG002 COLLATE Chinese_Taiwan_Stroke_BIN
                                AND local.TH003 COLLATE Chinese_Taiwan_Stroke_BIN = RemoteData.TH003 COLLATE Chinese_Taiwan_Stroke_BIN
                                WHERE local.ID IS NULL;
                    ");

                    using (var adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        adapter.SelectCommand.CommandTimeout = 180; // 單位：秒

                        using (var ds = new DataSet())
                        {
                            sqlConn.Open();
                            ds.Clear();
                            adapter.Fill(ds, "ds1");

                            if (ds.Tables["ds1"].Rows.Count > 0)
                            {
                                foreach (DataRow dr in ds.Tables["ds1"].Rows)
                                {
                                    SEARCHUOFQCPURTGPURTH_TB_WKF_TASK(dr["DOC_NBR"].ToString());
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 可加入錯誤日誌，例如 Logger.LogError("NEWBOMTABOMTBBOMTC 失敗", ex);
                throw;
            }
        }

        public DataTable SEARCHUOFQCPURTGPURTH()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            string THISYEARS = DateTime.Now.ToString("yyyy");
            //取西元年後2位
            THISYEARS = THISYEARS.Substring(2, 2);

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();


                //是門市督導單STORE
                //核準過TASK_RESULT='0'
                sbSql.AppendFormat(@"  
                                    SELECT DOC_NBR
                                    FROM [UOF].DBO.TB_WKF_TASK 
                                    WHERE DOC_NBR LIKE 'PURTH{0}%'
                                    AND TASK_RESULT='0'
                                    UNION ALL
                                    SELECT 'PURTH220800003'


                                    ", THISYEARS);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public DataTable SEARCHTKQCUOFQCPURTGPURTH()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            string THISYEARS = DateTime.Now.ToString("yyyy");
            //取西元年後2位
            THISYEARS = THISYEARS.Substring(2, 2);

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                //UNION ALL 
                //SELECT 'A'
                //避免回傳NULL

                sbSql.AppendFormat(@"  
                                    SELECT [ID] AS 'DOC_NBR'
                                    FROM [TKQC].[dbo].[UOFQCPURTGPURTH]
                                    WHERE [ID] LIKE 'PURTH{0}%'
                                    UNION ALL 
                                    SELECT 'A'
                                    ", THISYEARS);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void SEARCHUOFQCPURTGPURTH_TB_WKF_TASK(string DOC_NBR)
        {
            try
            {
                // 建立解密物件
                Class1 TKID = new Class1();

                var sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                string connectionString = sqlsb.ConnectionString;

                using (var sqlConn = new SqlConnection(connectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@"                                
                                    SELECT 
                                        T.DOC_NBR,
	                                    T.CURRENT_DOC.value('(/Form/Applicant/@name)[1]', 'nvarchar(max)') AS Applicantname,
	                                    T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""ID""]/@fieldValue)[1]', 'nvarchar(max)') AS ID,
                                        -- 主表欄位（只抓一次）
                                        T.CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""ID""]/@fieldValue)[1]', 'nvarchar(max)')      AS ID,
                                        T.CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""TG001""]/@fieldValue)[1]', 'nvarchar(max)')   AS TG001,
                                        T.CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""TG002""]/@fieldValue)[1]', 'nvarchar(max)')   AS TG002,
                                        T.CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""TG003""]/@fieldValue)[1]', 'nvarchar(max)')   AS TG003,
                                        T.CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""TG005""]/@fieldValue)[1]', 'nvarchar(max)')   AS TG005,
                                        T.CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""TG021""]/@fieldValue)[1]', 'nvarchar(max)')   AS TG021,
                                        T.CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""MAIN01""]/@fieldValue)[1]', 'nvarchar(max)')  AS MAIN01,
                                        T.CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""MAIN2""]/@fieldValue)[1]', 'nvarchar(max)')   AS MAIN2,

                                        -- 明細欄位（每列為一筆）
                                        Row.value('(Cell[@fieldId=""TH003""]/@fieldValue)[1]', 'nvarchar(max)')      AS TH003,
                                        Row.value('(Cell[@fieldId=""TH004""]/@fieldValue)[1]', 'nvarchar(max)')      AS TH004,
                                        Row.value('(Cell[@fieldId=""TH005""]/@fieldValue)[1]', 'nvarchar(max)')      AS TH005,
                                        Row.value('(Cell[@fieldId=""TH006""]/@fieldValue)[1]', 'nvarchar(max)')      AS TH006,
                                        Row.value('(Cell[@fieldId=""TH007""]/@fieldValue)[1]', 'nvarchar(max)')      AS TH007,
                                        Row.value('(Cell[@fieldId=""TH008""]/@fieldValue)[1]', 'nvarchar(max)')      AS TH008,
                                        Row.value('(Cell[@fieldId=""DETAIL01""]/@fieldValue)[1]', 'nvarchar(max)')   AS DETAIL01,
                                        Row.value('(Cell[@fieldId=""DETAIL02""]/@fieldValue)[1]', 'nvarchar(max)')   AS DETAIL02,
                                        Row.value('(Cell[@fieldId=""DETAIL03""]/@fieldValue)[1]', 'nvarchar(max)')   AS DETAIL03,
                                        Row.value('(Cell[@fieldId=""DETAIL04""]/@fieldValue)[1]', 'nvarchar(max)')   AS DETAIL04,
                                        Row.value('(Cell[@fieldId=""TH010""]/@fieldValue)[1]', 'nvarchar(max)')      AS TH010,
                                        Row.value('(Cell[@fieldId=""TH117""]/@fieldValue)[1]', 'nvarchar(max)')      AS TH117,
                                        Row.value('(Cell[@fieldId=""TH036""]/@fieldValue)[1]', 'nvarchar(max)')      AS TH036,
                                        Row.value('(Cell[@fieldId=""TH015""]/@fieldValue)[1]', 'nvarchar(max)')      AS TH015,
                                        Row.value('(Cell[@fieldId=""CHECK""]/@fieldValue)[1]', 'nvarchar(max)')      AS [CHECK],
                                        Row.value('(Cell[@fieldId=""DETAIL05""]/@fieldValue)[1]', 'nvarchar(max)')   AS DETAIL05,
                                        Row.value('(Cell[@fieldId=""DETAIL06""]/@fieldValue)[1]', 'nvarchar(max)')   AS DETAIL06,
                                        Row.value('(Cell[@fieldId=""VALIDDAYS""]/@fieldValue)[1]', 'nvarchar(max)')  AS VALIDDAYS,
                                        Row.value('(Cell[@fieldId=""STILLDAYS""]/@fieldValue)[1]', 'nvarchar(max)')  AS STILLDAYS,
                                        Row.value('(Cell[@fieldId=""STILLPCTS""]/@fieldValue)[1]', 'nvarchar(max)')  AS STILLPCTS

                                    FROM 
                                        [UOF].DBO.TB_WKF_TASK  T
                                    CROSS APPLY 
                                        T.CURRENT_DOC.nodes('/Form/FormFieldValue/FieldItem[@fieldId=""PURTH""]/DataGrid/Row') AS R(Row)

                                    WHERE 
                                        T.DOC_NBR = '{0}'  
                            ", DOC_NBR);

                    using (var adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        using (var ds = new DataSet())
                        {
                            sqlConn.Open();
                            ds.Clear();
                            adapter.Fill(ds, "ds1");

                            if (ds.Tables["ds1"].Rows.Count > 0)
                            {
                                foreach (DataRow dr in ds.Tables["ds1"].Rows)
                                {
                                    string Applicantname = dr["Applicantname"].ToString();
                                    string ID = dr["ID"].ToString();
                                    string TG003 = dr["TG003"].ToString();
                                    string TG005 = dr["TG005"].ToString();
                                    string TG021 = dr["TG021"].ToString();
                                    string TG001 = dr["TG001"].ToString();
                                    string TG002 = dr["TG002"].ToString();
                                    string TH003 = dr["TH003"].ToString();
                                    string TH004 = dr["TH004"].ToString();
                                    string TH005 = dr["TH005"].ToString();
                                    string TH006 = dr["TH006"].ToString();
                                    string TH007 = dr["TH007"].ToString();
                                    string TH008 = dr["TH008"].ToString();
                                    string TH010 = dr["TH010"].ToString();
                                    string TH015 = dr["TH015"].ToString();
                                    string CHECK = dr["CHECK"].ToString();
                                    string DETAIL01 = dr["DETAIL01"].ToString();
                                    string DETAIL02 = dr["DETAIL02"].ToString();
                                    string DETAIL03 = dr["DETAIL03"].ToString();
                                    string DETAIL04 = dr["DETAIL04"].ToString();
                                    string DETAIL05 = dr["DETAIL05"].ToString();
                                    string DETAIL06 = dr["DETAIL06"].ToString();

                                    ADDTOTKQCUOFQCPURTGPURTH(
                                       ID
                                       , TG003
                                       , TG005
                                       , TG021
                                       , TG001
                                       , TG002
                                       , TH003
                                       , TH004
                                       , TH005
                                       , TH006
                                       , TH007
                                       , TH008
                                       , TH010
                                       , TH015
                                       , CHECK
                                       , DETAIL01
                                       , DETAIL02
                                       , DETAIL03
                                       , DETAIL04
                                       , DETAIL05
                                       , DETAIL06
                                       , Applicantname
                                       );

                                    //更新第1站的簽核人當Applicantname
                                    UPDATE_UOFQCPURTGPURTH_Applicantname();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議加上 Log 或錯誤處理
                Console.WriteLine("發生錯誤：" + ex.Message);
            }
        }

        public void ADDTOTKQCUOFQCPURTGPURTH(
             string ID, string TG003, string TG005, string TG021, string TG001, string TG002,
             string TH003, string TH004, string TH005, string TH006, string TH007, string TH008,
             string TH010, string TH015, string CHECK,
             string DETAIL01, string DETAIL02, string DETAIL03, string DETAIL04, string DETAIL05, string DETAIL06,
             string Applicantname)
        {
            try
            {
                // 建立加解密後的連線
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    {
                        try
                        {
                            using (SqlCommand cmd = sqlConn.CreateCommand())
                            {
                                cmd.Transaction = tran;
                                cmd.CommandTimeout = 60;
                                cmd.CommandText = @"
                                            INSERT INTO [TKQC].[dbo].[UOFQCPURTGPURTH]
                                            (
                                                [ID], [TG003], [TG005], [TG021], [TG001], [TG002],
                                                [TH003], [TH004], [TH005], [TH006], [TH007], [TH008],
                                                [TH010], [TH015], [CHECK],
                                                [DETAIL01], [DETAIL02], [DETAIL03], [DETAIL04], [DETAIL05], [DETAIL06],
                                                [Applicantname]
                                            )
                                            VALUES
                                            (
                                                @ID, @TG003, @TG005, @TG021, @TG001, @TG002,
                                                @TH003, @TH004, @TH005, @TH006, @TH007, @TH008,
                                                @TH010, @TH015, @CHECK,
                                                @DETAIL01, @DETAIL02, @DETAIL03, @DETAIL04, @DETAIL05, @DETAIL06,
                                                @Applicantname
                                            )";

                                // 加入參數
                                cmd.Parameters.AddWithValue("@ID", ID);
                                cmd.Parameters.AddWithValue("@TG003", TG003);
                                cmd.Parameters.AddWithValue("@TG005", TG005);
                                cmd.Parameters.AddWithValue("@TG021", TG021);
                                cmd.Parameters.AddWithValue("@TG001", TG001);
                                cmd.Parameters.AddWithValue("@TG002", TG002);
                                cmd.Parameters.AddWithValue("@TH003", TH003);
                                cmd.Parameters.AddWithValue("@TH004", TH004);
                                cmd.Parameters.AddWithValue("@TH005", TH005);
                                cmd.Parameters.AddWithValue("@TH006", TH006);
                                cmd.Parameters.AddWithValue("@TH007", TH007);
                                cmd.Parameters.AddWithValue("@TH008", TH008);
                                cmd.Parameters.AddWithValue("@TH010", TH010);
                                cmd.Parameters.AddWithValue("@TH015", TH015);
                                cmd.Parameters.AddWithValue("@CHECK", CHECK);
                                cmd.Parameters.AddWithValue("@DETAIL01", DETAIL01);
                                cmd.Parameters.AddWithValue("@DETAIL02", DETAIL02);
                                cmd.Parameters.AddWithValue("@DETAIL03", DETAIL03);
                                cmd.Parameters.AddWithValue("@DETAIL04", DETAIL04);
                                cmd.Parameters.AddWithValue("@DETAIL05", DETAIL05);
                                cmd.Parameters.AddWithValue("@DETAIL06", DETAIL06);
                                cmd.Parameters.AddWithValue("@Applicantname", Applicantname);

                                int result = cmd.ExecuteNonQuery();
                                if (result > 0)
                                {
                                    tran.Commit();
                                }
                                else
                                {
                                    tran.Rollback();
                                }
                            }
                        }
                        catch (Exception ex1)
                        {
                            tran.Rollback();
                            // 可加上 log 或 throw 出去
                            throw new Exception("新增失敗：" + ex1.Message);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 顯示或記錄錯誤
                Console.WriteLine("外部錯誤：" + ex.Message);
                // 或 Log(ex.ToString());
            }
        }


        public void UPDATE_UOFQCPURTGPURTH_Applicantname()
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                    UPDATE [TKQC].[dbo].[UOFQCPURTGPURTH]
                                    SET Applicantname=SUBSTRING(REPLACE((REPLACE(PURTH.UDF01,'Y,','')),'N,',''),1,3)
                                    FROM [TKQC].[dbo].[UOFQCPURTGPURTH],[TK].dbo.PURTH
                                    WHERE [UOFQCPURTGPURTH].TG001+[UOFQCPURTGPURTH].TG002+[UOFQCPURTGPURTH].TH003 =PURTH.TH001+PURTH.TH002+PURTH.TH003
                                    AND Applicantname<>SUBSTRING(REPLACE((REPLACE(PURTH.UDF01,'Y,','')),'N,',''),1,3)
                                    AND ISNULL(Applicantname,'')=NULL
                                   "
                                    );

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  
                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }

        }
        public void ADDUOFMOCTAMOCTB()
        {
            try
            {
                // 建立解密後的連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    // 原本 SQL 不變
                    string sql = @"
                                SELECT TA001, TA002, UDF02
                                FROM [TK].dbo.MOCTA
                                WHERE TA013='N'
                                  AND UDF02 IN ('Y','y')
                                ORDER BY TA001, TA002
                            ";

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sql, sqlConn))
                    {
                        DataTable dt = new DataTable();
                        adapter.Fill(dt);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                string TA001 = dr["TA001"].ToString().Trim();
                                string TA002 = dr["TA002"].ToString().Trim();
                                ADD_MOCTAMOCTB_TB_WKF_EXTERNAL_TASK(TA001, TA002);
                            }
                        }
                    }
                }
            }
            catch (Exception EX)
            {
                // 可以在此加入日誌或錯誤處理
            }
            finally
            {
                // 連線由 using 自動關閉
            }

            // 最後更新 MOCTA UDF02
            UPDATEMOCTAUDF02();
        }

        public void UPDATEMOCTAUDF02()
        {
            try
            {
                // 建立解密後的連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    {
                        try
                        {
                            string sql = @"
                        UPDATE [TK].dbo.MOCTA
                        SET UDF02 = 'UOF'
                        WHERE UDF02 IN ('Y','y')
                    ";

                            using (SqlCommand cmd = new SqlCommand(sql, sqlConn, tran))
                            {
                                cmd.CommandTimeout = 60;
                                int result = cmd.ExecuteNonQuery();

                                if (result == 0)
                                {
                                    tran.Rollback(); // 沒有資料更新，交易回滾
                                }
                                else
                                {
                                    tran.Commit();   // 成功更新，提交交易
                                }
                            }
                        }
                        catch (Exception EX)
                        {
                            tran.Rollback(); // 發生例外也回滾
                            throw;           // 可以選擇重新拋出錯誤或記錄
                        }
                    }
                }
            }
            catch (Exception EX)
            {
                // 可以在這裡加入日誌或錯誤處理
            }
        }


        public void ADD_MOCTAMOCTB_TB_WKF_EXTERNAL_TASK(string TA001, string TA002)
        {
            DataTable DT = SEARCHMOCTAMOCTB(TA001, TA002);
            if (DT == null || DT.Rows.Count == 0) return; // 加入保護
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TA001"].ToString().Trim() + DT.Rows[0]["TA002"].ToString().Trim();

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");
            string FORMID = SEARCHFORM_UOF_VERSION_ID("MOCI02.製令單");
            if (!string.IsNullOrEmpty(FORMID)) Form.SetAttribute("formVersionId", FORMID);
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 一行一行寫出欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA001", DT.Rows[0]["TA001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA002", DT.Rows[0]["TA002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA003", DT.Rows[0]["TA003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA006", DT.Rows[0]["TA006"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA034", DT.Rows[0]["TA034"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA035", DT.Rows[0]["TA035"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA015", DT.Rows[0]["TA015"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA007", DT.Rows[0]["TA007"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA020", DT.Rows[0]["TA020"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA021", DT.Rows[0]["TA021"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA026", DT.Rows[0]["TA026"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA027", DT.Rows[0]["TA027"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA028", DT.Rows[0]["TA028"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA029", DT.Rows[0]["TA029"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA036", DT.Rows[0]["TA036"].ToString(), fillerName, fillerUserGuid, account);

            // DataGrid 明細
            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);
            XmlNode DataGridNode = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            DataGridNode.AppendChild(DataGrid);

            int rowCount = 0;
            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowCount.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TB001");
                AppendCellToRow(xmlDoc, Row, od, "TB002");
                AppendCellToRow(xmlDoc, Row, od, "TB003");
                AppendCellToRow(xmlDoc, Row, od, "TB004");
                AppendCellToRow(xmlDoc, Row, od, "TB007");
                AppendCellToRow(xmlDoc, Row, od, "TB012");
                AppendCellToRow(xmlDoc, Row, od, "TB013");
                AppendCellToRow(xmlDoc, Row, od, "TB017");

                DataGrid.AppendChild(Row);
                rowCount++;
            }

            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
            {
                string sql = $@"
                            INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                            (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                            VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')";

                using (SqlCommand cmd = new SqlCommand(sql, sqlConn))
                {
                    cmd.Parameters.Add("@XML", SqlDbType.NVarChar).Value = xmlDoc.OuterXml;
                    sqlConn.Open();
                    cmd.ExecuteNonQuery();
                }
            }
        }


        public DataTable SEARCHMOCTAMOCTB(string TA001, string TA002)
        {
            DataSet ds1 = new DataSet();

            try
            {
                // 建立解密後的連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    // 保留原本 SQL 結構
                    sbSql.AppendFormat(@"
                                        SELECT *
                                              ,USER_GUID,NAME
                                              ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                                 WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                              ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                                 WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                        FROM (
                                            SELECT 
                                                MOCTA.CREATOR
                                                ,TA001
                                                ,TA002
                                                ,TA003
                                                ,TA006
                                                ,TA034
                                                ,TA035
                                                ,TA015
                                                ,TA007
                                                ,TA020
                                                ,TA021
                                                ,TA026
                                                ,TA027
                                                ,TA028
                                                ,TA029
                                                ,TA036
                                                ,TB001
                                                ,TB002
                                                ,TB003
                                                ,TB012
                                                ,TB013
                                                ,TB004
                                                ,TB007
                                                ,TB017
                                                ,[TB_EB_USER].USER_GUID
                                                ,NAME
                                                ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=MOCTA.CREATOR) AS 'MV002'
                                            FROM [TK].dbo.MOCTB, [TK].dbo.MOCTA
                                            LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                                ON [TB_EB_USER].ACCOUNT = MOCTA.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                            WHERE TA001 = TB001 AND TA002 = TB002
                                              AND TA001 = '{0}' AND TA002 = '{1}'
                                        ) AS TEMP
                                    ", TA001, TA002);

                    using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                        sqlConn.Open();
                        ds1.Clear();
                        adapter1.Fill(ds1, "ds1");
                    }
                }

                return ds1.Tables["ds1"].Rows.Count > 0 ? ds1.Tables["ds1"] : null;
            }
            catch
            {
                return null;
            }
        }

        //ERP製令變更單>轉入UOF簽核
        public void ADDUOFMOCTOMOCTP()
        {
            try
            {
                // 20210902密碼解密連線
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"
                                SELECT TO001,TO002,UDF01
                                FROM [TK].dbo.MOCTO
                                WHERE TO041='N'
                                AND UDF01 IN ('Y','y')
                                ORDER BY TO001,TO002
                              ");

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        string TO001 = dr["TO001"].ToString().Trim();
                        string TO002 = dr["TO002"].ToString().Trim();
                        ADD_MOCTOMOCTP_TB_WKF_EXTERNAL_TASK(TO001,TO002);
                    }
                }
            }
            catch
            {
                // 可加上 Log 紀錄錯誤
            }
            finally
            {
                sqlConn.Close();
            }

            UPDATEMOCTAOUDF01();
        }

        public void UPDATEMOCTAOUDF01()
        {
            try
            {
                // 20210902 密碼解密連線
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                UPDATE [TK].dbo.MOCTO
                                SET UDF01 = 'UOF'
                                WHERE UDF01 IN ('Y','y')
                              ");

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;

                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback(); // 交易取消
                }
                else
                {
                    tran.Commit(); // 執行交易
                }
            }
            catch
            {
                // 可加上 Log 紀錄錯誤
            }
            finally
            {
                sqlConn.Close();
            }
        }


        public void ADD_MOCTOMOCTP_TB_WKF_EXTERNAL_TASK(string TO001, string TO002)
        {
            try
            {
                // 1. 先抓資料
                DataTable DT = SEARCHMOCTOMOCTP(TO001, TO002);
                if (DT.Rows.Count == 0) return;
                DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

                string account = DT.Rows[0]["CREATOR"].ToString();
                string groupId = DT.Rows[0]["GROUP_ID"].ToString();
                string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
                string fillerName = DT.Rows[0]["MV002"].ToString();
                string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

                string EXTERNAL_FORM_NBR = DT.Rows[0]["TO001"].ToString().Trim() + DT.Rows[0]["TO002"].ToString().Trim() + DT.Rows[0]["TO003"].ToString().Trim();
                int rowscounts = 0;

                // 2. 建立 XML
                XmlDocument xmlDoc = new XmlDocument();
                XmlElement Form = xmlDoc.CreateElement("Form");

                string FORMID = SEARCHFORM_UOF_VERSION_ID("MOCI12.製令變更單");
                if (!string.IsNullOrEmpty(FORMID))
                    Form.SetAttribute("formVersionId", FORMID);

                Form.SetAttribute("urgentLevel", "2");
                xmlDoc.AppendChild(Form);

                // Applicant 節點
                XmlElement Applicant = xmlDoc.CreateElement("Applicant");
                Applicant.SetAttribute("account", account);
                Applicant.SetAttribute("groupId", groupId);
                Applicant.SetAttribute("jobTitleId", jobTitleId);
                Form.AppendChild(Applicant);

                XmlElement Comment = xmlDoc.CreateElement("Comment");
                Comment.InnerText = "申請者意見";
                Applicant.AppendChild(Comment);

                // FormFieldValue 節點
                XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
                Form.AppendChild(FormFieldValue);

                // 3. 主表欄位，每行寫
                AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO001", DT.Rows[0]["TO001"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO002", DT.Rows[0]["TO002"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO003", DT.Rows[0]["TO003"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO004", DT.Rows[0]["TO004"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO005", DT.Rows[0]["TO005"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO006", DT.Rows[0]["TO006"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO009", DT.Rows[0]["TO009"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO012", DT.Rows[0]["TO012"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO013", DT.Rows[0]["TO013"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO014", DT.Rows[0]["TO014"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO017", DT.Rows[0]["TO017"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO022", DT.Rows[0]["TO022"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO023", DT.Rows[0]["TO023"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO035", DT.Rows[0]["TO035"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TO036", DT.Rows[0]["TO036"].ToString(), fillerName, fillerUserGuid, account);

                // 4. 明細表 DETAILS + DataGrid
                AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);
                XmlNode DETAILS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
                XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
                DETAILS.AppendChild(DataGrid);

                // 明細列，每行寫
                foreach (DataRow od in DT.Rows)
                {
                    XmlElement Row = xmlDoc.CreateElement("Row");
                    Row.SetAttribute("order", rowscounts.ToString());

                    AppendCellToRow(xmlDoc, Row, od, "TP001");
                    AppendCellToRow(xmlDoc, Row, od, "TP002");
                    AppendCellToRow(xmlDoc, Row, od, "TP003");
                    AppendCellToRow(xmlDoc, Row, od, "TP004");
                    AppendCellToRow(xmlDoc, Row, od, "TP005");
                    AppendCellToRow(xmlDoc, Row, od, "TP010");

                    DataGrid.AppendChild(Row);
                    rowscounts++;
                }

                // 5. INSERT
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
                {
                    try
                    {
                        string sql = $@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                    (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')";

                        using (SqlCommand command = new SqlCommand(sql, connection))
                        {
                            command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = xmlDoc.OuterXml;
                            connection.Open();
                            command.ExecuteNonQuery();
                        }
                    }
                    catch (Exception ex)
                    {
                        throw;
                    }
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        public DataTable SEARCHMOCTOMOCTP(string TA001, string TA002)
        {
            SqlDataAdapter adapter1;
            SqlCommandBuilder sqlCmdBuilder1;
            DataSet ds1 = new DataSet();

            try
            {
                // 20210902 密碼解密連線
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"
                                    SELECT *
                                          ,USER_GUID,NAME
                                          ,(SELECT TOP 1 GROUP_ID 
                                            FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                            WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                          ,(SELECT TOP 1 TITLE_ID 
                                            FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                            WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    FROM 
                                    (
                                        SELECT 
                                            MOCTO.CREATOR
                                            ,TO001,TO002,TO003,TO004,TO005,TO006,TO009
                                            ,TO012,TO013,TO014,TO017,TO022,TO023,TO035,TO036
                                            ,TP001,TP002,TP003,TP004,TP005,TP010
                                            ,[TB_EB_USER].USER_GUID,NAME
                                            ,(SELECT TOP 1 MV002 
                                              FROM [TK].dbo.CMSMV 
                                              WHERE MV001=MOCTO.CREATOR) AS 'MV002'
                                        FROM [TK].dbo.MOCTP,[TK].dbo.MOCTO
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                            ON [TB_EB_USER].ACCOUNT = MOCTO.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        WHERE TO001=TP001 AND TO002=TP002
                                        AND TO001='{0}' AND TO002='{1}'
                                    ) AS TEMP
                                  ", TA001, TA002);

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        //ERP結帳單>轉入UOF簽核
        public void ADDUOFACRTAACRTB()
        {
            try
            {
                // 建立解密後的連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    DataSet ds1 = new DataSet();
                    SqlDataAdapter adapter1 = new SqlDataAdapter();
                    SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.AppendFormat(@"
                                        SELECT TA001, TA002, UDF01
                                        FROM [TK].dbo.ACRTA
                                        WHERE TA025 = 'N'
                                        AND UDF01 IN ('Y','y')
                                        ORDER BY TA001, TA002
                                    ");

                    adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                    sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                    sqlConn.Open();
                    ds1.Clear();
                    adapter1.Fill(ds1, "ds1");

                    if (ds1.Tables["ds1"].Rows.Count >= 1)
                    {
                        foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                        {
                            ADD_ACRTAACRTB_TB_WKF_EXTERNAL_TASK(dr["TA001"].ToString().Trim(), dr["TA002"].ToString().Trim());
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議補上 log
                Console.WriteLine("錯誤發生於 ADDUOFACRTAACRTB: " + ex.Message);
                throw;
            }
            finally
            {
                // 不需特別寫 Close，因為 using 已自動處理
            }

            UPDATEACRTAUDF01();
        }


        public void UPDATEACRTAUDF01()
        {
            SqlConnection sqlConn = null;
            SqlTransaction tran = null;
            SqlCommand cmd = new SqlCommand();
            int result = 0;

            try
            {
                Class1 TKID = new Class1(); // 解密類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);
                sqlConn.Open();

                tran = sqlConn.BeginTransaction();

                string sql = @"
                                UPDATE [TK].dbo.ACRTA
                                SET UDF01 = 'UOF'
                                WHERE UDF01 IN ('Y', 'y')
                            ";

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sql;
                cmd.Transaction = tran;

                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();
                    Console.WriteLine("更新失敗，沒有任何列被影響，交易已回滾。");
                }
                else
                {
                    tran.Commit();
                    //Console.WriteLine($"成功更新 {result} 筆資料，交易已提交。");
                }
            }
            catch (Exception ex)
            {
                try
                {
                    tran?.Rollback();
                }
                catch { }

                Console.WriteLine($"執行過程發生錯誤: {ex.Message}");
            }
            finally
            {
                if (sqlConn != null && sqlConn.State == System.Data.ConnectionState.Open)
                {
                    sqlConn.Close();
                    sqlConn.Dispose();
                }
                cmd.Dispose();
            }
        }


        public void ADD_ACRTAACRTB_TB_WKF_EXTERNAL_TASK(string TA001, string TA002)
        {
            DataTable DT = SEARCHACRTAACRTB(TA001, TA002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TA001"].ToString().Trim() + DT.Rows[0]["TA002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORMID = SEARCHFORM_UOF_VERSION_ID("ACRI02.結帳單");
            if (!string.IsNullOrEmpty(FORMID))
            {
                Form.SetAttribute("formVersionId", FORMID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA001", DT.Rows[0]["TA001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA002", DT.Rows[0]["TA002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA003", DT.Rows[0]["TA003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA004", DT.Rows[0]["TA004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA005", DT.Rows[0]["TA005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA007", DT.Rows[0]["TA007"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA008", DT.Rows[0]["TA008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA009", DT.Rows[0]["TA009"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA010", DT.Rows[0]["TA010"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA011", DT.Rows[0]["TA011"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA012", DT.Rows[0]["TA012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA015", DT.Rows[0]["TA015"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA016", DT.Rows[0]["TA016"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA017", DT.Rows[0]["TA017"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA018", DT.Rows[0]["TA018"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA020", DT.Rows[0]["TA020"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA029", DT.Rows[0]["TA029"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA030", DT.Rows[0]["TA030"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA031", DT.Rows[0]["TA031"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA041", DT.Rows[0]["TA041"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA042", DT.Rows[0]["TA042"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA043", DT.Rows[0]["TA043"].ToString(), fillerName, fillerUserGuid, account);

            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);

            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode DETAILSNode = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            DETAILSNode.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TB001");
                AppendCellToRow(xmlDoc, Row, od, "TB002");
                AppendCellToRow(xmlDoc, Row, od, "TB003");
                AppendCellToRow(xmlDoc, Row, od, "TB004");
                AppendCellToRow(xmlDoc, Row, od, "TB005");
                AppendCellToRow(xmlDoc, Row, od, "TB006");
                AppendCellToRow(xmlDoc, Row, od, "TB007");
                AppendCellToRow(xmlDoc, Row, od, "TB008");
                AppendCellToRow(xmlDoc, Row, od, "TB009");
                AppendCellToRow(xmlDoc, Row, od, "TB010");
                AppendCellToRow(xmlDoc, Row, od, "TB011");
                AppendCellToRow(xmlDoc, Row, od, "TB013");
                AppendCellToRow(xmlDoc, Row, od, "TB017");
                AppendCellToRow(xmlDoc, Row, od, "TB018");
                AppendCellToRow(xmlDoc, Row, od, "TB019");
                AppendCellToRow(xmlDoc, Row, od, "TB020");
                AppendCellToRow(xmlDoc, Row, od, "TB021");

                DataGrid.AppendChild(Row);
                rowscounts++;
            }

            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                               (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                               VALUES (NEWID(),@XML,2,'{0}')"
                                ,EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                using (SqlCommand command = new SqlCommand(queryString.ToString(), connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"發生例外錯誤: {ex.Message}");
            }
        }


        public DataTable SEARCHACRTAACRTB(string TA001, string TA002)
        {
            DataSet ds1 = new DataSet();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.AppendFormat(@"
                                        SELECT *
                                            , USER_GUID, NAME
                                            , (SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID = TEMP.USER_GUID) AS 'GROUP_ID'
                                            , (SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID = TEMP.USER_GUID) AS 'TITLE_ID'
                                        FROM 
                                        (
                                            SELECT 
                                                ACRTA.CREATOR
                                                , TA001, TA002, TA003, TA004, TA005, TA007, TA008, TA009, TA010, TA011, TA012
                                                , TA015, TA016, TA017, TA018, TA020, TA029, TA030, TA031, TA041, TA042, TA043
                                                , TB001, TB002, TB003, TB004, TB005, TB006, TB007, TB008, TB009, TB010, TB011
                                                , TB013, TB017, TB018, TB019, TB020, TB021
                                                , [TB_EB_USER].USER_GUID, NAME
                                                , (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001 = ACRTA.CREATOR) AS 'MV002'
                                            FROM [TK].dbo.ACRTB, [TK].dbo.ACRTA
                                            LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT = ACRTA.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                            WHERE TA001 = TB001 AND TA002 = TB002
                                                AND TA001 = '{0}' AND TA002 = '{1}'
                                        ) AS TEMP
                                    ", TA001, TA002);   

                    using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        using (SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder(adapter1))
                        {
                            sqlConn.Open();
                            ds1.Clear();
                            adapter1.Fill(ds1, "ds1");
                            sqlConn.Close();
                        }
                    }
                }

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                    return ds1.Tables["ds1"];
                else
                    return null;
            }
            catch
            {
                return null;
            }
        }


        //ERP收款單 >轉入UOF簽核
        public void ADDUOFACRTCACRTD()
        {
            SqlConnection sqlConn = null;

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"
                                    SELECT TC001, TC002, UDF01
                                    FROM [TK].dbo.ACRTC
                                    WHERE TC008 = 'N'
                                    AND UDF01 IN ('Y', 'y')
                                    ORDER BY TC001, TC002
                                ");

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        string TC001 = dr["TC001"].ToString().Trim();
                        string TC002 = dr["TC002"].ToString().Trim();
                        ADD_ACRTCACRTD_TB_WKF_EXTERNAL_TASK(TC001,TC002);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"發生例外錯誤: {ex.Message}");
            }
            finally
            {
                if (sqlConn != null && sqlConn.State == ConnectionState.Open)
                {
                    sqlConn.Close();
                    sqlConn.Dispose();
                }
            }

            // 執行更新動作（即使前面出錯仍會執行）
            UPDATEACRTCUDF01();
        }



        public void UPDATEACRTCUDF01()
        {
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

            // 解密密碼和使用者帳號
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
            {
                sqlConn.Open();
                using (var tran = sqlConn.BeginTransaction())
                using (var cmd = sqlConn.CreateCommand())
                {
                    try
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                            UPDATE [TK].dbo.ACRTC
                                            SET UDF01 = 'UOF'
                                            WHERE UDF01 IN ('Y', 'y')
                                        ";

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();
                        }
                        else
                        {
                            tran.Commit();
                        }
                    }
                    catch (Exception ex)
                    {
                        tran.Rollback();
                        throw new Exception("更新 ACRTC.UDF01 發生錯誤：" + ex.Message, ex);
                    }
                }
            }
        }


        public void ADD_ACRTCACRTD_TB_WKF_EXTERNAL_TASK(string TC001, string TC002)
        {
            DataTable DT = SEARCHACRTCACRTD(TC001, TC002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string EXTERNAL_FORM_NBR = TC001.Trim() + TC002.Trim();

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");
            string FORMID = SEARCHFORM_UOF_VERSION_ID("ACRI03.收款單");
            if (!string.IsNullOrEmpty(FORMID))
            {
                Form.SetAttribute("formVersionId", FORMID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            // Applicant 節點
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            // FormFieldValue 節點
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 逐行寫出 FieldItem (不使用陣列迴圈)
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC001", DT.Rows[0]["TC001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC002", DT.Rows[0]["TC002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC003", DT.Rows[0]["TC003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC004", DT.Rows[0]["TC004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC005", DT.Rows[0]["TC005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC011", DT.Rows[0]["TC011"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC012", DT.Rows[0]["TC012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC013", DT.Rows[0]["TC013"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC014", DT.Rows[0]["TC014"].ToString(), fillerName, fillerUserGuid, account);

            // DETAILS FieldItem 與 DataGrid 節點
            XmlElement detailsFieldItem = AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            detailsFieldItem.AppendChild(DataGrid);

            int rowCount = 0;
            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowCount.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TD001");
                AppendCellToRow(xmlDoc, Row, od, "TD002");
                AppendCellToRow(xmlDoc, Row, od, "TD003");
                AppendCellToRow(xmlDoc, Row, od, "TD004");
                AppendCellToRow(xmlDoc, Row, od, "TD005");
                AppendCellToRow(xmlDoc, Row, od, "TD006");
                AppendCellToRow(xmlDoc, Row, od, "TD007");
                AppendCellToRow(xmlDoc, Row, od, "TD008");
                AppendCellToRow(xmlDoc, Row, od, "TD009");
                AppendCellToRow(xmlDoc, Row, od, "TD010");
                AppendCellToRow(xmlDoc, Row, od, "TD011");
                AppendCellToRow(xmlDoc, Row, od, "TD012");
                AppendCellToRow(xmlDoc, Row, od, "TD013");
                AppendCellToRow(xmlDoc, Row, od, "TD014");
                AppendCellToRow(xmlDoc, Row, od, "TD015");
                AppendCellToRow(xmlDoc, Row, od, "TD016");
                AppendCellToRow(xmlDoc, Row, od, "TD017");
                AppendCellToRow(xmlDoc, Row, od, "TD022");

                DataGrid.AppendChild(Row);
                rowCount++;
            }

            // 建立連線字串並解密
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
            string connectionString = sqlsb.ConnectionString;


            string sql = $@"
                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                        VALUES (NEWID(), @XML, 2, @EXTERNAL_FORM_NBR)";


            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                using (SqlCommand command = new SqlCommand(sql, connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    command.Parameters.Add("@EXTERNAL_FORM_NBR", SqlDbType.NVarChar).Value = EXTERNAL_FORM_NBR;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                // 可加錯誤紀錄或拋出
                throw;
            }
        }


        public DataTable SEARCHACRTCACRTD(string TC001, string TC002)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string sql = @"
                                    SELECT *
                                         , USER_GUID, NAME
                                         , (SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS GROUP_ID
                                         , (SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS TITLE_ID
                                    FROM
                                    (
                                        SELECT 
                                            ACRTC.CREATOR,
                                            TC001, TC002, TC003, TC004, TC005, TC011, TC012, TC013, TC014,
                                            TD001, TD002, TD003, TD004, TD005, TD006, TD007, TD008, TD009,
                                            TD010, TD011, TD012, TD013, TD014, TD015, TD016, TD017, TD022,
                                            [TB_EB_USER].USER_GUID, NAME,
                                            (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001 = ACRTC.CREATOR) AS MV002
                                        FROM [TK].dbo.ACRTD, [TK].dbo.ACRTC
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER]
                                            ON [TB_EB_USER].ACCOUNT = ACRTC.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        WHERE TC001 = TD001 AND TC002 = TD002
                                          AND TC001 = @TC001 AND TC002 = @TC002
                                    ) AS TEMP
                                ";

                    using (var cmd = new SqlCommand(sql, sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@TC001", TC001);
                        cmd.Parameters.AddWithValue("@TC002", TC002);

                        using (var adapter = new SqlDataAdapter(cmd))
                        {
                            DataSet ds = new DataSet();
                            sqlConn.Open();
                            adapter.Fill(ds, "ds1");

                            if (ds.Tables["ds1"].Rows.Count > 0)
                                return ds.Tables["ds1"];
                            else
                                return null;
                        }
                    }
                }
            }
            catch
            {
                return null;
            }
        }

        //ERP應付憑單>轉入UOF簽核
        public void ADDUOFACPTAACPTB()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);       
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
 

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string query = @"
                                    SELECT TA001, TA002, UDF01
                                    FROM [TK].dbo.ACPTA
                                    WHERE TA024 = 'N'
                                    AND UDF01 IN ('Y', 'y')
                                    ORDER BY TA001, TA002
                                ";

                    using (var adapter = new SqlDataAdapter(query, sqlConn))
                    {
                        DataSet ds = new DataSet();
                        adapter.Fill(ds, "ACPTA");

                        if (ds.Tables["ACPTA"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds.Tables["ACPTA"].Rows)
                            {
                                string TA001 = dr["TA001"].ToString().Trim();
                                string TA002 = dr["TA002"].ToString().Trim();
                                ADD_ACPTAACPTB_TB_WKF_EXTERNAL_TASK(TA001, TA002);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 這邊最好記錄錯誤
                throw new Exception("ADDUOFACPTAACPTB 發生錯誤：" + ex.Message, ex);
            }

            // 無論成功與否都會執行
            UPDATEACPTAUDF01();
        }



        public void UPDATEACPTAUDF01()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
              
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
          

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (var tran = sqlConn.BeginTransaction())
                    using (var cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                        UPDATE [TK].dbo.ACPTA
                                        SET UDF01 = 'UOF'
                                        WHERE UDF01 IN ('Y','y')
                                    ";

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();
                        }
                        else
                        {
                            tran.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception("更新 ACPTA.UDF01 發生錯誤：" + ex.Message, ex);
            }
        }

        public void ADD_ACPTAACPTB_TB_WKF_EXTERNAL_TASK(string TA001, string TA002)
        {
            DataTable DT = SEARCHACPTAACPTB(TA001, TA002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TA001"].ToString().Trim() + DT.Rows[0]["TA002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORMID = SEARCHFORM_UOF_VERSION_ID("ACPI02.應付憑單");

            if (!string.IsNullOrEmpty(FORMID))
                Form.SetAttribute("formVersionId", FORMID);

            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 用 AddFieldItem 依序加入欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA001", DT.Rows[0]["TA001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA002", DT.Rows[0]["TA002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA003", DT.Rows[0]["TA003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA004", DT.Rows[0]["TA004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA006", DT.Rows[0]["TA006"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA008", DT.Rows[0]["TA008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA009", DT.Rows[0]["TA009"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA010", DT.Rows[0]["TA010"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA011", DT.Rows[0]["TA011"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA012", DT.Rows[0]["TA012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA014", DT.Rows[0]["TA014"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA015", DT.Rows[0]["TA015"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA016", DT.Rows[0]["TA016"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA017", DT.Rows[0]["TA017"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA019", DT.Rows[0]["TA019"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA028", DT.Rows[0]["TA028"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA029", DT.Rows[0]["TA029"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA030", DT.Rows[0]["TA030"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA037", DT.Rows[0]["TA037"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA038", DT.Rows[0]["TA038"].ToString(), fillerName, fillerUserGuid, account);

            // DETAILS 明細節點
            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);

            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode detailsNode = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            detailsNode.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                // 用 AppendCellToRow 依序加入明細欄位
                AppendCellToRow(xmlDoc, Row, od, "TB001");
                AppendCellToRow(xmlDoc, Row, od, "TB002");
                AppendCellToRow(xmlDoc, Row, od, "TB003");
                AppendCellToRow(xmlDoc, Row, od, "TB004");
                AppendCellToRow(xmlDoc, Row, od, "TB005");
                AppendCellToRow(xmlDoc, Row, od, "TB006");
                AppendCellToRow(xmlDoc, Row, od, "TB007");
                AppendCellToRow(xmlDoc, Row, od, "TB008");
                AppendCellToRow(xmlDoc, Row, od, "TB009");
                AppendCellToRow(xmlDoc, Row, od, "TB013");
                AppendCellToRow(xmlDoc, Row, od, "TB014");
                AppendCellToRow(xmlDoc, Row, od, "TB017");
                AppendCellToRow(xmlDoc, Row, od, "TB018");

                DataGrid.AppendChild(Row);
                rowscounts++;
            }

            // 以下為資料庫寫入區塊，不變...

            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ToString());

            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;
            sqlConn = new SqlConnection(connectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@" 
                                INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                VALUES (NEWID(),@XML,2,'{0}')
                                ",  EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    command.Connection.Open();
                    int count = command.ExecuteNonQuery();
                    connection.Close();
                    connection.Dispose();
                }
            }
            catch
            {
                // 可以擴充錯誤處理
            }
        }


        public DataTable  SEARCHACPTAACPTB(string TA001, string TA002)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string sql = $@"
                                    SELECT *
                                         , USER_GUID, NAME
                                         , (SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS GROUP_ID
                                         , (SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS TITLE_ID
                                    FROM 
                                    (
                                        SELECT 
                                            ACPTA.CREATOR,
                                            TA001, TA002, TA003, TA004, TA006, TA008, TA009, TA010, TA011,
                                            TA012, TA014, TA015, TA016, TA017, TA019, TA028, TA029, TA030,
                                            TA037, TA038, TB001, TB002, TB003, TB004, TB005, TB006, TB007,
                                            TB008, TB009, TB013, TB014, TB017, TB018,
                                            [TB_EB_USER].USER_GUID, NAME,
                                            (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001 = ACPTA.CREATOR) AS MV002
                                        FROM [TK].dbo.ACPTB, [TK].dbo.ACPTA
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER]
                                            ON [TB_EB_USER].ACCOUNT = ACPTA.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        WHERE TA001 = TB001 AND TA002 = TB002
                                          AND TA001 = @TA001 AND TA002 = @TA002
                                    ) AS TEMP
                                ";

                    using (var cmd = new SqlCommand(sql, sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@TA001", TA001);
                        cmd.Parameters.AddWithValue("@TA002", TA002);

                        using (var adapter = new SqlDataAdapter(cmd))
                        {
                            DataSet ds = new DataSet();
                            sqlConn.Open();
                            adapter.Fill(ds, "ds1");
                            if (ds.Tables["ds1"].Rows.Count > 0)
                                return ds.Tables["ds1"];
                            else
                                return null;
                        }
                    }
                }
            }
            catch
            {
                return null;
            }
        }

        //ERP付款單>轉入UOF簽核
        public void ADDUOFACPTCACPTB()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string query = @"
                                    SELECT TC001, TC002, UDF01
                                    FROM [TK].dbo.ACPTC
                                    WHERE TC008 = 'N'
                                      AND UDF01 IN ('Y', 'y')
                                    ORDER BY TC001, TC002
                                ";

                    using (var adapter = new SqlDataAdapter(query, sqlConn))
                    {
                        DataSet ds = new DataSet();
                        adapter.Fill(ds, "ACPTC");

                        if (ds.Tables["ACPTC"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds.Tables["ACPTC"].Rows)
                            {
                                string TC001 = dr["TC001"].ToString().Trim();
                                string TC002 = dr["TC002"].ToString().Trim();
                                ADD_ACPTCACPTD_TB_WKF_EXTERNAL_TASK(TC001, TC002);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception("ADDUOFACPTCACPTB 發生錯誤：" + ex.Message, ex);
            }

            UPDATEACPTCUDF01();
        }



        public void UPDATEACPTCUDF01()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (var tran = sqlConn.BeginTransaction())
                    using (var cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                            UPDATE [TK].dbo.ACPTC
                                            SET UDF01 = 'UOF'
                                            WHERE UDF01 IN ('Y','y')
                                        ";

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();
                        }
                        else
                        {
                            tran.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception("更新 ACPTC.UDF01 發生錯誤：" + ex.Message, ex);
            }
        }


        public void ADD_ACPTCACPTD_TB_WKF_EXTERNAL_TASK(string TC001, string TC002)
        {
            DataTable DT = SEARCHACPTCACPTD(TC001, TC002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TC001"].ToString().Trim() + DT.Rows[0]["TC002"].ToString().Trim();

            XmlDocument xmlDoc = new XmlDocument();

            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORMID = SEARCHFORM_UOF_VERSION_ID("ACPI03.付款單");
            if (!string.IsNullOrEmpty(FORMID))
                Form.SetAttribute("formVersionId", FORMID);

            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 一筆一筆寫出來
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC001", DT.Rows[0]["TC001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC002", DT.Rows[0]["TC002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC003", DT.Rows[0]["TC003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC004", DT.Rows[0]["TC004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC005", DT.Rows[0]["TC005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC011", DT.Rows[0]["TC011"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC012", DT.Rows[0]["TC012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC013", DT.Rows[0]["TC013"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC014", DT.Rows[0]["TC014"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC016", DT.Rows[0]["TC016"].ToString(), fillerName, fillerUserGuid, account);

            // 明細 DETAILS
            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);

            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode detailsNode = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            detailsNode.AppendChild(DataGrid);

            int rowsCount = 0;

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowsCount.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TD001");
                AppendCellToRow(xmlDoc, Row, od, "TD002");
                AppendCellToRow(xmlDoc, Row, od, "TD003");
                AppendCellToRow(xmlDoc, Row, od, "TD004");
                AppendCellToRow(xmlDoc, Row, od, "TD005");
                AppendCellToRow(xmlDoc, Row, od, "TD006");
                AppendCellToRow(xmlDoc, Row, od, "TD007");
                AppendCellToRow(xmlDoc, Row, od, "TD008");
                AppendCellToRow(xmlDoc, Row, od, "TD009");
                AppendCellToRow(xmlDoc, Row, od, "TD010");
                AppendCellToRow(xmlDoc, Row, od, "TD011");
                AppendCellToRow(xmlDoc, Row, od, "TD012");
                AppendCellToRow(xmlDoc, Row, od, "TD013");
                AppendCellToRow(xmlDoc, Row, od, "TD014");
                AppendCellToRow(xmlDoc, Row, od, "TD015");
                AppendCellToRow(xmlDoc, Row, od, "TD016");
                AppendCellToRow(xmlDoc, Row, od, "TD017");
                AppendCellToRow(xmlDoc, Row, od, "TD022");
                AppendCellToRow(xmlDoc, Row, od, "TD023");

                DataGrid.AppendChild(Row);
                rowsCount++;
            }

            // 解密連線字串
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            string queryString = $@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES
                                        (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')
                                ";

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                using (SqlCommand command = new SqlCommand(queryString, connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                throw new Exception("TB_WKF_EXTERNAL_TASK 新增失敗: " + ex.Message, ex);
            }
        }

        public DataTable SEARCHACPTCACPTD(string TC001, string TC002)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string sql = $@"
                                    SELECT *
                                         , USER_GUID, NAME
                                         , (SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS GROUP_ID
                                         , (SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS TITLE_ID
                                    FROM 
                                    (
                                        SELECT 
                                            ACPTC.CREATOR,
                                            TC001, TC002, TC003, TC004, TC005, TC011, TC012, TC013, TC014, TC016,
                                            TD001, TD002, TD003, TD004, TD005, TD006, TD007, TD008, TD009, TD010, TD011,
                                            TD012, TD013, TD014, TD015, TD022, TD023, TD017, TD016,
                                            [TB_EB_USER].USER_GUID, NAME,
                                            (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001 = ACPTC.CREATOR) AS MV002
                                        FROM [TK].dbo.ACPTD, [TK].dbo.ACPTC
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER]
                                            ON [TB_EB_USER].ACCOUNT = ACPTC.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        WHERE TC001 = TD001 AND TC002 = TD002
                                          AND TC001 = @TC001 AND TC002 = @TC002
                                    ) AS TEMP
                                ";

                    using (var cmd = new SqlCommand(sql, sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@TC001", TC001);
                        cmd.Parameters.AddWithValue("@TC002", TC002);

                        using (var adapter = new SqlDataAdapter(cmd))
                        {
                            DataSet ds = new DataSet();
                            sqlConn.Open();
                            adapter.Fill(ds, "ds1");

                            if (ds.Tables["ds1"].Rows.Count > 0)
                                return ds.Tables["ds1"];
                            else
                                return null;
                        }
                    }
                }
            }
            catch
            {
                return null;
            }
        }

        //ERP會計傳票 >轉入UOF簽核
        public void ADDUOFACTTAACTTB()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string query = @"
                                    SELECT TA001, TA002, UDF01
                                    FROM [TK].dbo.ACTTA
                                    WHERE TA010 = 'N'
                                      AND UDF01 IN ('Y', 'y')
                                    ORDER BY TA001, TA002
                                ";

                    using (var adapter = new SqlDataAdapter(query, sqlConn))
                    {
                        DataSet ds = new DataSet();
                        adapter.Fill(ds, "ACTTA");

                        if (ds.Tables["ACTTA"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds.Tables["ACTTA"].Rows)
                            {
                                string TA001 = dr["TA001"].ToString().Trim();
                                string TA002 = dr["TA002"].ToString().Trim();
                                ADD_ACTTAACTTB_TB_WKF_EXTERNAL_TASK(TA001,TA002);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception("ADDUOFACTTAACTTB 發生錯誤：" + ex.Message, ex);
            }

            UPDATEACTTAUDF01();
        }


        public void UPDATEACTTAUDF01()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
         

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (var tran = sqlConn.BeginTransaction())
                    using (var cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                            UPDATE [TK].dbo.ACTTA
                                            SET UDF01 = 'UOF'
                                            WHERE UDF01 IN ('Y','y')
                                        ";

                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                        {
                            tran.Commit();
                        }
                        else
                        {
                            tran.Rollback();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception("UPDATEACTTAUDF01 發生錯誤：" + ex.Message, ex);
            }
        }


        public void ADD_ACTTAACTTB_TB_WKF_EXTERNAL_TASK(string TA001, string TA002)
        {
            DataTable DT = SEARCHACTTAACTTB(TA001, TA002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TA001"].ToString().Trim() + DT.Rows[0]["TA002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();

            // 建立根節點 Form
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORMID = SEARCHFORM_UOF_VERSION_ID("ACTI10.會計傳票");
            if (!string.IsNullOrEmpty(FORMID))
            {
                Form.SetAttribute("formVersionId", FORMID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            // Applicant 節點
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            // FormFieldValue 節點
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 建立多個 FieldItem
            //範例code AddFieldItem(xmlDoc, FormFieldValue, "TC001", DT.Rows[0]["TC001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA001", DT.Rows[0]["TA001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA002", DT.Rows[0]["TA002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA003", DT.Rows[0]["TA003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA004", DT.Rows[0]["TA004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA005", DT.Rows[0]["TA005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA006", DT.Rows[0]["TA006"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA007", DT.Rows[0]["TA007"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA008", DT.Rows[0]["TA008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA009", DT.Rows[0]["TA009"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA010", DT.Rows[0]["TA010"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA011", DT.Rows[0]["TA011"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA014", DT.Rows[0]["TA014"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA015", DT.Rows[0]["TA015"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA024", DT.Rows[0]["TA024"].ToString(), fillerName, fillerUserGuid, account);

            // 明細 FieldItem DETAILS
            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);

            // DataGrid 節點放入 DETAILS 裡
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode DETAILSNode = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            if (DETAILSNode != null)
            {
                DETAILSNode.AppendChild(DataGrid);
            }

            // 明細逐筆加入 Row 和 Cell
            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                //範例code AppendCellToRow(xmlDoc, Row, od, "TD001");
                AppendCellToRow(xmlDoc, Row, od, "TB001");
                AppendCellToRow(xmlDoc, Row, od, "TB002");
                AppendCellToRow(xmlDoc, Row, od, "TB003");
                AppendCellToRow(xmlDoc, Row, od, "TB004");
                AppendCellToRow(xmlDoc, Row, od, "TB005");
                AppendCellToRow(xmlDoc, Row, od, "TB006");
                AppendCellToRow(xmlDoc, Row, od, "TB007");
                AppendCellToRow(xmlDoc, Row, od, "TB008");
                AppendCellToRow(xmlDoc, Row, od, "TB009");
                AppendCellToRow(xmlDoc, Row, od, "TB010");
                AppendCellToRow(xmlDoc, Row, od, "TB011");
                AppendCellToRow(xmlDoc, Row, od, "TB012");
                AppendCellToRow(xmlDoc, Row, od, "TB013");
                AppendCellToRow(xmlDoc, Row, od, "TB014");
                AppendCellToRow(xmlDoc, Row, od, "TB017");
                AppendCellToRow(xmlDoc, Row, od, "TB018");
                AppendCellToRow(xmlDoc, Row, od, "TB021");
                AppendCellToRow(xmlDoc, Row, od, "TB022");
                AppendCellToRow(xmlDoc, Row, od, "TB023");
                AppendCellToRow(xmlDoc, Row, od, "TB024");
                AppendCellToRow(xmlDoc, Row, od, "TB025");
                AppendCellToRow(xmlDoc, Row, od, "TB026");

                rowscounts++;

                if (DataGrid != null)
                {
                    DataGrid.AppendChild(Row);
                }
            }

            // 寫入資料庫
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                string connectionString = sqlsb.ConnectionString;

                string queryString = $@"
                                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')
                                    ";

                using (SqlConnection connection = new SqlConnection(connectionString))
                using (SqlCommand command = new SqlCommand(queryString, connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                // 可改為 Log 紀錄，或拋出異常
                throw;
            }
        }



        public DataTable SEARCHACTTAACTTB(string TA001, string TA002)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string sql = $@"
                                    SELECT *
                                          , USER_GUID, NAME
                                          , (SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS GROUP_ID
                                          , (SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS TITLE_ID
                                    FROM
                                    (
                                        SELECT
                                            ACTTA.CREATOR
                                          , TA001, TA002, TA003, TA004, TA005, TA006, TA007, TA008, TA009, TA010,
                                            TA011, TA014, TA015, TA024,
                                            TB001, TB002, TB003, TB004, TB005, TB006, TB007, TB008, TB009, TB010,
                                            TB011, TB012, TB013, TB014, TB017, TB018, TB021, TB022, TB023, TB024,
                                            TB025, TB026,
                                            [TB_EB_USER].USER_GUID, NAME,
                                            (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001 = ACTTA.CREATOR) AS MV002
                                        FROM [TK].dbo.ACTTB, [TK].dbo.ACTTA
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER]
                                            ON [TB_EB_USER].ACCOUNT = ACTTA.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        WHERE TA001 = TB001 AND TA002 = TB002
                                          AND TA001 = @TA001 AND TA002 = @TA002
                                    ) AS TEMP
                                ";

                    using (var cmd = new SqlCommand(sql, sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@TA001", TA001);
                        cmd.Parameters.AddWithValue("@TA002", TA002);

                        using (var adapter = new SqlDataAdapter(cmd))
                        {
                            DataSet ds = new DataSet();
                            sqlConn.Open();
                            adapter.Fill(ds, "ds1");
                            if (ds.Tables["ds1"].Rows.Count > 0)
                                return ds.Tables["ds1"];
                            else
                                return null;
                        }
                    }
                }
            }
            catch
            {
                return null;
            }
        }

        //ERP客供>轉入UOF簽核
        public void ADDUOFQCINVTAINVTB()
        {
            try
            {
                // 20210902密
                var TKID = new Class1(); // 用 new 建立類別實體
                var sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                string sql = @"
                            SELECT TA001, TA002, UDF01
                            FROM [TK].dbo.INVTA
                            WHERE TA006 = 'N'
                              AND UDF01 IN ('Y','y')
                            ORDER BY TA001, TA002
                        ";

                using (var conn = new SqlConnection(sqlsb.ConnectionString))
                using (var adapter = new SqlDataAdapter(sql, conn))
                {
                    var ds = new DataSet();
                    conn.Open();
                    ds.Clear();
                    adapter.Fill(ds, "ds1");

                    if (ds.Tables["ds1"].Rows.Count > 0)
                    {
                        foreach (DataRow dr in ds.Tables["ds1"].Rows)
                        {
                            string TA001 = dr["TA001"].ToString().Trim();
                            string TA002 = dr["TA002"].ToString().Trim();

                            ADD_QCINVTAINVTB_TB_WKF_EXTERNAL_TASK(TA001, TA002);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 保持原本行為，可選擇記錄例外
                System.Diagnostics.Debug.WriteLine($"ADDUOFQCINVTAINVTB error: {ex}");
            }

            // 更新 UDF01 為 UOF
            UPDATEQCINVTAINVTBUDF01();
        }


        public void UPDATEQCINVTAINVTBUDF01()
        {
            try
            {
                // 20210902 密
                var TKID = new Class1(); // 用 new 建立類別實體
                var sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 資料庫使用者密碼解密（確保使用 sqlsb.UserID / sqlsb.Password）
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                // 保持原本 SQL 不變
                string sql = @"                                
                                UPDATE   [TK].dbo.INVTA
                                SET UDF01 = 'UOF'
                                WHERE UDF01 IN ('Y','y')                             

                                ";

                using (var conn = new SqlConnection(sqlsb.ConnectionString))
                {
                    conn.Open();
                    using (var tran = conn.BeginTransaction())
                    using (var cmd = new SqlCommand(sql, conn, tran))
                    {
                        cmd.CommandTimeout = 60;
                        try
                        {
                            int affected = cmd.ExecuteNonQuery();
                            if (affected == 0)
                                tran.Rollback();   // 交易取消
                            else
                                tran.Commit();     // 執行交易
                        }
                        catch
                        {
                            try { tran.Rollback(); } catch { /* ignore */ }
                            throw;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 與原本行為一致：捕捉但不拋出，可視需要記錄
                System.Diagnostics.Debug.WriteLine($"UPDATEQCINVTAINVTBUDF01 error: {ex}");
            }
        }


        public void ADD_QCINVTAINVTB_TB_WKF_EXTERNAL_TASK(string TA001, string TA002)
        {
            DataTable DT = SEARCHQCINVTAINVTB(TA001, TA002);

            // 沒有資料就直接返回
            if (DT == null || DT.Rows.Count == 0)
                return;

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TA001"].ToString().Trim() + DT.Rows[0]["TA002"].ToString().Trim();
            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();

            // 建立根節點 Form
            XmlElement Form = xmlDoc.CreateElement("Form");
            string PURTGID = SEARCHFORM_UOF_VERSION_ID("PURA1.客供進貨-進貨品質驗收單");
            if (!string.IsNullOrEmpty(PURTGID))
                Form.SetAttribute("formVersionId", PURTGID);

            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            // Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            // FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 主表欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA003", DT.Rows[0]["TA003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG005", "客供", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG021", "客供", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA001", DT.Rows[0]["TA001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TA002", DT.Rows[0]["TA002"].ToString(), fillerName, fillerUserGuid, account);

            // INVTB FieldItem + DataGrid
            XmlElement dataGridField = AddFieldItem(xmlDoc, FormFieldValue, "INVTB", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            dataGridField.AppendChild(DataGrid);

            // 明細欄位
            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TB003");
                AppendCellToRow(xmlDoc, Row, od, "TB004");
                AppendCellToRow(xmlDoc, Row, od, "TB005");
                AppendCellToRow(xmlDoc, Row, od, "TB006");
                AppendCellToRow(xmlDoc, Row, od, "TB007");
                AppendCellToRow(xmlDoc, Row, od, "TB008");
                AppendCellToRow(xmlDoc, Row, od, "TB014");
                AppendCellToRow(xmlDoc, Row, od, "TH015", true, od["TB007"].ToString());
                AppendCellToRow(xmlDoc, Row, od, "CHECK", true,"Y");
                AppendCellToRow(xmlDoc, Row, od, "DETAIL01", true);
                AppendCellToRow(xmlDoc, Row, od, "DETAIL02", true,"V");
                AppendCellToRow(xmlDoc, Row, od, "DETAIL03", true,"N");
                AppendCellToRow(xmlDoc, Row, od, "DETAIL05", true,"0");
                AppendCellToRow(xmlDoc, Row, od, "DETAIL06", true);
                AppendCellToRow(xmlDoc, Row, od, "DETAIL07", true);
                AppendCellToRow(xmlDoc, Row, od, "DETAIL08", true);
                AppendCellToRow(xmlDoc, Row, od, "VALIDDAYS", true,"0");
                AppendCellToRow(xmlDoc, Row, od, "STILLDAYS", true,"0");
                AppendCellToRow(xmlDoc, Row, od, "STILLPCTS", true,"0.00%");

                DataGrid.AppendChild(Row);
                rowscounts++;
            }

            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            string queryString = $@"
                                INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')";

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = xmlDoc.OuterXml;

                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch
            {
                // 可視需求加 logging
            }
        }


        public DataTable SEARCHQCINVTAINVTB(string TA001, string TA002)
        {
            try
            {
                // 建立 Class1 實體解密帳密
                var TKID = new Class1();
                var sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                string sql = $@"
                                SELECT *
                                    ,USER_GUID, NAME
                                    ,(SELECT TOP 1 GROUP_ID 
                                      FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                      WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID 
                                      FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                      WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    ,(CONVERT(NVARCHAR, CAST(
                                        CASE 
                                            WHEN 本日有效天數 > 0 AND 製造有效天數 > 0 
                                            THEN 本日有效天數 * 100.0 / 製造有效天數 
                                            ELSE 0 
                                        END 
                                    AS DECIMAL(10,2))) + '%') AS '有效百分比'
                                FROM 
                                (
                                    SELECT                                    
                                        INVTA.[CREATOR]
                                        ,INVTA.TA001
                                        ,INVTA.TA002
                                        ,INVTA.TA003
                                        ,INVTB.TB003
                                        ,INVTB.TB004
                                        ,INVTB.TB005
                                        ,INVTB.TB006
                                        ,INVTB.TB007
                                        ,INVTB.TB008
                                        ,INVTB.TB014
                                        ,INVTB.TB015
                                        ,INVTB.TB033  
                                        ,[TB_EB_USER].USER_GUID, NAME
                                        ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=INVTA.CREATOR) AS 'MV002'
                                        ,(CASE WHEN ISDATE(TB015)=1 AND ISDATE(TB033)=1 THEN DATEDIFF(DAY,TB033,TB015) ELSE 0 END) AS '製造有效天數'
                                        ,(CASE WHEN ISDATE(TB015)=1 AND ISDATE(TB033)=1 THEN DATEDIFF(DAY,GETDATE(),TB015) ELSE 0 END) AS '本日有效天數'
                                    FROM [TK].dbo.INVTB, [TK].dbo.INVTA
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                        ON [TB_EB_USER].ACCOUNT= INVTA.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE TA001=TB001 AND TA002=TB002  
                                      AND TA001='{TA001}' AND TA002='{TA002}'
                                ) AS TEMP
                            ";

                using (var conn = new SqlConnection(sqlsb.ConnectionString))
                using (var adapter = new SqlDataAdapter(sql, conn))
                {
                    var ds = new DataSet();
                    conn.Open();
                    ds.Clear();
                    adapter.Fill(ds, "ds1");

                    return ds.Tables["ds1"].Rows.Count > 0 ? ds.Tables["ds1"] : null;
                }
            }
            catch (Exception ex)
            {
                // 可選擇記錄例外
                System.Diagnostics.Debug.WriteLine($"SEARCHQCINVTAINVTB error: {ex}");
                return null;
            }
        }

        //ERP報價單 >轉入UOF簽核
        public void ADDCOPMACOPMBCOPMC()
        {
            try
            {
                Class1 TKID = new Class1(); // 用 new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.AppendFormat(@"
                                    SELECT TA001, TA002
                                    FROM [TK].dbo.COPTA
                                    WHERE TA019='N' AND (UDF01 IN ('Y','y')) 
                                    ORDER BY TA001,TA002
                                    ");

                    using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    using (SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder(adapter1))
                    {
                        DataSet ds1 = new DataSet();
                        sqlConn.Open();
                        adapter1.Fill(ds1, "ds1");

                        if (ds1.Tables["ds1"].Rows.Count >= 1)
                        {
                            foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                            {
                                string TA001Value = dr["TA001"].ToString().Trim(); // 新增變數 TA001Value 來處理
                                string TA002Value = dr["TA002"].ToString().Trim();

                                ADD_COPTACOPTBCOPTC_WKF_EXTERNAL_TASK(TA001Value, TA002Value);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 可視情況補充 Log
            }

            UPDATECOPTAUDF01();
        }


        public void UPDATECOPTAUDF01()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        sbSql.Clear();
                        sbSql.AppendFormat(@"
                                    UPDATE  [TK].dbo.COPTA 
                                    SET UDF01 = 'UOF'
                                    WHERE TA019='N' AND  (UDF01 IN ('Y','y') )                                   
                                    ");

                        cmd.CommandText = sbSql.ToString();

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();
                        }
                        else
                        {
                            tran.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議加上 Log 記錄錯誤
            }
        }


        public void ADD_COPTACOPTBCOPTC_WKF_EXTERNAL_TASK(string TA001, string TA002)
        {
            try
            {
                DataTable DT = SEARCHCOPTACOPTBCOPTC(TA001, TA002);
                if (DT == null || DT.Rows.Count == 0) return;

                DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["TA005"].ToString());

                string account = DT.Rows[0]["TA005"].ToString();
                string groupId = DT.Rows[0]["GROUP_ID"].ToString();
                string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
                string fillerName = DT.Rows[0]["MV002"].ToString();
                string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();
                string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
                string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

                string EXTERNAL_FORM_NBR = DT.Rows[0]["TA001"].ToString().Trim() + DT.Rows[0]["TA002"].ToString().Trim();

                XmlDocument xmlDoc = new XmlDocument();
                XmlElement Form = xmlDoc.CreateElement("Form");
                string COPTAID = SEARCHFORM_UOF_VERSION_ID("COP01.報價單");
                if (!string.IsNullOrEmpty(COPTAID)) Form.SetAttribute("formVersionId", COPTAID);
                Form.SetAttribute("urgentLevel", "2");
                xmlDoc.AppendChild(Form);

                XmlElement Applicant = xmlDoc.CreateElement("Applicant");
                Applicant.SetAttribute("account", account);
                Applicant.SetAttribute("groupId", groupId);
                Applicant.SetAttribute("jobTitleId", jobTitleId);
                Form.AppendChild(Applicant);

                XmlElement Comment = xmlDoc.CreateElement("Comment");
                Comment.InnerText = "申請者意見";
                Applicant.AppendChild(Comment);

                XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
                Form.AppendChild(FormFieldValue);

                // 主表欄位逐個 AddFieldItem
                AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA001", DT.Rows[0]["TA001"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA002", DT.Rows[0]["TA002"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA003", DT.Rows[0]["TA003"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA004", DT.Rows[0]["TA004"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA006", DT.Rows[0]["TA006"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA005", DT.Rows[0]["TA005"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA022", DT.Rows[0]["TA022"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA026", DT.Rows[0]["TA026"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA011NAME", DT.Rows[0]["TA011"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA007", DT.Rows[0]["TA007"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA008", DT.Rows[0]["TA008"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "MA010", DT.Rows[0]["MA010"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);

                // DataGrid
                XmlNode DETAILS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
                XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
                DETAILS.AppendChild(DataGrid);

                int rowscounts = 0;
                foreach (DataRow od in DT.Rows)
                {
                    XmlElement Row = xmlDoc.CreateElement("Row");
                    Row.SetAttribute("order", rowscounts.ToString());

                    // 明細欄位逐個 AppendCellToRow
                    AppendCellToRow(xmlDoc, Row, od, "TB003");
                    AppendCellToRow(xmlDoc, Row, od, "TB004");
                    AppendCellToRow(xmlDoc, Row, od, "TB005");
                    AppendCellToRow(xmlDoc, Row, od, "TB007");
                    AppendCellToRow(xmlDoc, Row, od, "TB008");
                    AppendCellToRow(xmlDoc, Row, od, "TB009");
                    AppendCellToRow(xmlDoc, Row, od, "TB010");
                    AppendCellToRow(xmlDoc, Row, od, "TB016");
                    AppendCellToRow(xmlDoc, Row, od, "TK004");
                    AppendCellToRow(xmlDoc, Row, od, "TK006");

                    DataGrid.AppendChild(Row);
                    rowscounts++;
                }

                // 寫入資料庫
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
                {
                    string queryString = $@"
                                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')
                                    ";

                    using (SqlCommand command = new SqlCommand(queryString, connection))
                    {
                        command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                        connection.Open();
                        command.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("ADD_COPTACOPTBCOPTC_WKF_EXTERNAL_TASK 發生例外: " + ex.ToString());
                throw;
            }
        }


        public DataTable SEARCHCOPTACOPTBCOPTC(string TA001, string TA002)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.AppendFormat(@"  
                                       SELECT TEMP.*
                                        ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                          WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                        ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                          WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'

                                        FROM 
                                        (
                                            SELECT COPTA.CREATOR,TA001,TA002,TA003,TA004,TA005,TA006,TA007,TA008,TA009,TA010,TA011,TA026
                                            ,(CASE WHEN TA022='1' THEN '內含'  
                                                   WHEN TA022='2' THEN '外加'  
                                                   WHEN TA022='3' THEN '零稅率'   
                                                   WHEN TA022='4' THEN '免稅' 
                                                   WHEN TA022='9' THEN '不計稅' 
                                                   ELSE '空白' END ) TA022
                                            ,TB003,TB004,TB005,TB006,TB007,TB008,TB009,TB010,TB011,TB016
                                            ,ISNULL(TK004,0) AS TK004,ISNULL(TK006,0) AS TK006
                                            ,[TB_EB_USER].USER_GUID,NAME
                                            ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=TA005) AS 'MV002'
                                            ,MA010

                                            FROM [TK].dbo.COPTA
                                            LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                                ON [TB_EB_USER].ACCOUNT= TA005 COLLATE Chinese_Taiwan_Stroke_BIN
                                            INNER JOIN [TK].dbo.COPTB ON TA001=TB001 AND TA002=TB002
                                            LEFT JOIN [TK].dbo.COPTK ON TK001=TB001 AND TK002=TB002 AND TK003=TB003
                                            LEFT JOIN [TK].dbo.COPMA ON MA001=TA004

                                            WHERE TA001='{0}' AND TA002='{1}'
                                        ) AS TEMP
                                        ", TA001, TA002);

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        DataSet ds = new DataSet();
                        sqlConn.Open();
                        adapter.Fill(ds, "ds1");

                        if (ds.Tables["ds1"].Rows.Count > 0)
                        {
                            return ds.Tables["ds1"];
                        }
                        else
                        {
                            return null;
                        }
                    }
                }
            }
            catch
            {
                return null;
            }
        }


        //ERP資產資料>轉入UOF簽核
        public void ADDUOFASTMBASTMC()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string query = @"
                                    SELECT MB001, UDF01
                                    FROM [TK].dbo.ASTMB
                                    WHERE MB039 = 'N'
                                      AND UDF01 IN ('Y', 'y')
                                    ORDER BY MB001
                                ";

                    using (var adapter = new SqlDataAdapter(query, sqlConn))
                    {
                        DataSet ds = new DataSet();
                        adapter.Fill(ds, "ASTMB");

                        if (ds.Tables["ASTMB"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds.Tables["ASTMB"].Rows)
                            {
                                ADD_ASTMBASTMC_TB_WKF_EXTERNAL_TASK(dr["MB001"].ToString().Trim());
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception("ADDUOFASTMBASTMC 發生錯誤：" + ex.Message, ex);
            }

            UPDATEASTMBASTMCUDF01();
        }


        public void UPDATEASTMBASTMCUDF01()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (var tran = sqlConn.BeginTransaction())
                    using (var cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                            UPDATE [TK].dbo.ASTMB
                                            SET UDF01 = 'UOF'
                                            WHERE UDF01 IN ('Y','y')
                                        ";

                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                        {
                            tran.Commit();
                        }
                        else
                        {
                            tran.Rollback();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception("UPDATEASTMBASTMCUDF01 發生錯誤：" + ex.Message, ex);
            }
        }

        public void ADD_ASTMBASTMC_TB_WKF_EXTERNAL_TASK(string MB001)
        {
            DataTable DT = SEARCHASTMBASTMC(MB001);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["MB001"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");
            xmlDoc.AppendChild(Form);

            string FORMID = SEARCHFORM_UOF_VERSION_ID("ASTI02.資產資料建立作業");
            if (!string.IsNullOrEmpty(FORMID))
            {
                Form.SetAttribute("formVersionId", FORMID);
            }
            Form.SetAttribute("urgentLevel", "2");

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB001", DT.Rows[0]["MB001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB002", DT.Rows[0]["MB002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB003", DT.Rows[0]["MB003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB004", DT.Rows[0]["MB004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB005", DT.Rows[0]["MB005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB006", DT.Rows[0]["MB006"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB007", DT.Rows[0]["MB007"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB008", DT.Rows[0]["MB008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB009", DT.Rows[0]["MB009"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB010", DT.Rows[0]["MB010"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB011", DT.Rows[0]["MB011"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB012", DT.Rows[0]["MB012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB013", DT.Rows[0]["MB013"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB014", DT.Rows[0]["MB014"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB015", DT.Rows[0]["MB015"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB016", DT.Rows[0]["MB016"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB018", DT.Rows[0]["MB018"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB019", DT.Rows[0]["MB019"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB020", DT.Rows[0]["MB020"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB021", DT.Rows[0]["MB021"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB022", DT.Rows[0]["MB022"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB023", DT.Rows[0]["MB023"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB024", DT.Rows[0]["MB024"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB025", DT.Rows[0]["MB025"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB026", DT.Rows[0]["MB026"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB027", DT.Rows[0]["MB027"].ToString(), fillerName, fillerUserGuid, account);

            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);

            XmlNode detailsNode = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            detailsNode.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "MC001");
                AppendCellToRow(xmlDoc, Row, od, "MC002");
                AppendCellToRow(xmlDoc, Row, od, "MC003");
                AppendCellToRow(xmlDoc, Row, od, "MC004");
                AppendCellToRow(xmlDoc, Row, od, "MC005");
                AppendCellToRow(xmlDoc, Row, od, "MC006");

                DataGrid.AppendChild(Row);
                rowscounts++;
            }

            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
            {
                string sql = $@"
                                INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')";

                using (SqlCommand cmd = new SqlCommand(sql, sqlConn))
                {
                    cmd.Parameters.Add("@XML", SqlDbType.NVarChar).Value = xmlDoc.OuterXml;

                    sqlConn.Open();
                    cmd.ExecuteNonQuery();
                }
            }
        }


        public DataTable SEARCHASTMBASTMC(string MB001)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (var sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string sql = $@"
                                    SELECT *
                                          ,USER_GUID, NAME
                                          ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS GROUP_ID
                                          ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS TITLE_ID
                                    FROM
                                    (
                                        SELECT ASTMB.CREATOR
                                              ,MB001, MB002, MB003, MB004, MB005, MB006, MB007, MB008, MB009, MB010,
                                               MB011, MB012, MB013, MB014, MB015, MB016, MB017, MB018, MB019, MB020,
                                               MB021, MB022, MB023, MB024, MB025, MB026, MB027, MB028, MB029, MB030,
                                               MB031, MB032, MB033, MB034, MB035, MB036, MB037, MB038, MB039, MB040,
                                               MB041, MB042, MB043, MB044, MB045, MB046, MB047, MB048, MB049, MB050,
                                               MB051, MB052, MB053, MB054, MB055, MB056, MB057, MB058, MB059, MB060,
                                               MB061, MB062, MB063, MB064, MB065, MB066, MB067, MB068, MB069, MB070,
                                               MB071, MB072, MB073, MB074, MB075, MB076, MB077, MB078, MB079, MB080,
                                               MB081, MB082, MC001, MC002, MC003, MC004, MC005, MC006,
                                               [TB_EB_USER].USER_GUID, NAME,
                                               (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001 = ASTMB.CREATOR) AS MV002
                                        FROM [TK].dbo.ASTMC, [TK].dbo.ASTMB
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                            ON [TB_EB_USER].ACCOUNT = ASTMB.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        WHERE MC001 = MB001
                                          AND MB001 = @MB001
                                    ) AS TEMP
                                ";

                    using (var cmd = new SqlCommand(sql, sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@MB001", MB001);
                        using (var adapter = new SqlDataAdapter(cmd))
                        {
                            DataSet ds = new DataSet();
                            sqlConn.Open();
                            adapter.Fill(ds, "ds1");
                            if (ds.Tables["ds1"].Rows.Count > 0)
                                return ds.Tables["ds1"];
                            else
                                return null;
                        }
                    }
                }
            }
            catch
            {
                return null;
            }
        }


        public void ADD_TO_UOF_QC1001()
        {
            DataTable DT_UOF_QC1002 = FIND_UOF_QC1002();

            if (DT_UOF_QC1002 != null && DT_UOF_QC1002.Rows.Count > 0)
            {
                foreach (DataRow DR in DT_UOF_QC1002.Rows)
                {
                    string QCFrm002SN_FieldValue = DR["QCFrm002SN_FieldValue"].ToString();

                    DataTable UOF_TB_EB_USER = FIND_TB_EB_USER(DR["USER_GUID"].ToString());

                    if (UOF_TB_EB_USER != null && UOF_TB_EB_USER.Rows.Count > 0)
                    {
                        NEW_UOF_QC1001(QCFrm002SN_FieldValue, UOF_TB_EB_USER);
                    }
                }
            }

            UPDATE_UOF_QC1001_ATTACH_ID();

        }

        /// <summary>
        /// 找UOF的客訴異常單 1002
        /// </summary>
        /// <returns></returns>
        public DataTable FIND_UOF_QC1002()
        {
            DataTable dtResult = new DataTable();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 直接用 sqlsb.XXX 來覆寫
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@"
                                        WITH TEMP AS (
                                            SELECT 
                                                [USER_GUID],
                                                [FORM_NAME],
                                                [DOC_NBR],
                                                [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002QCC""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002QCC_FieldValue,
                                                [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002SN""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002SN_FieldValue,
                                                TASK_ID,
                                                TASK_STATUS,
                                                TASK_RESULT
                                            FROM [UOF].[dbo].TB_WKF_TASK
                                            LEFT JOIN [UOF].[dbo].TB_WKF_FORM_VERSION 
                                                ON [TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                            LEFT JOIN [UOF].[dbo].TB_WKF_FORM 
                                                ON [TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                            WHERE [FORM_NAME] = '1002.客訴異常處理單'
                                                AND TASK_STATUS = '2'
                                                AND TASK_RESULT = '0'
                                        )
                                        SELECT * 
                                        FROM TEMP
                                        WHERE QCFrm002QCC_FieldValue = '成立'
                                            AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN (
                                                SELECT EXTERNAL_FORM_NBR  
                                                FROM [UOF].dbo.TB_WKF_EXTERNAL_TASK 
                                                WHERE EXTERNAL_FORM_NBR LIKE 'QC1002%'
                                                  AND ISNULL(EXTERNAL_FORM_NBR, '') <> ''
                                            )
                                            AND DOC_NBR >= 'QC1002250700001'
                                    ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        adapter.Fill(dtResult);
                    }
                }

                return dtResult.Rows.Count > 0 ? dtResult : null;
            }
            catch (Exception ex)
            {
                Console.WriteLine("錯誤: " + ex.Message);
                return null;
            }
        }



        //找出表單建立者
        public DataTable FIND_TB_EB_USER(string USER_GUID)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 解密帳號與密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();
                    sbSql.AppendFormat(@"
                                        SELECT 
                                            [TB_EB_USER].[USER_GUID] AS USER_GUID,
                                            [ACCOUNT] AS CREATOR,
                                            [NAME] AS NAME,
                                            [TB_EB_EMPL_DEP].[GROUP_ID] AS GROUP_ID,
                                            [TB_EB_EMPL_DEP].[TITLE_ID] AS TITLE_ID,
                                            [GROUP_NAME] AS GROUP_NAME,
                                            [TITLE_NAME] AS TITLE_NAME,
                                            [GROUP_CODE] AS GROUP_CODE
                                        FROM [UOF].[dbo].[TB_EB_USER]
                                        JOIN [UOF].[dbo].[TB_EB_EMPL_DEP] ON [TB_EB_USER].USER_GUID = [TB_EB_EMPL_DEP].USER_GUID
                                        JOIN [UOF].[dbo].[TB_EB_GROUP] ON [TB_EB_EMPL_DEP].[GROUP_ID] = [TB_EB_GROUP].[GROUP_ID]
                                        JOIN [UOF].[dbo].[TB_EB_JOB_TITLE] ON [TB_EB_EMPL_DEP].TITLE_ID = [TB_EB_JOB_TITLE].TITLE_ID
                                        WHERE [TB_EB_USER].USER_GUID = @USER_GUID
                                    ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        adapter.SelectCommand.Parameters.AddWithValue("@USER_GUID", USER_GUID);

                        DataSet ds = new DataSet();
                        sqlConn.Open();
                        adapter.Fill(ds, "ds1");

                        if (ds.Tables["ds1"].Rows.Count > 0)
                        {
                            return ds.Tables["ds1"];
                        }
                        else
                        {
                            return null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("錯誤: " + ex.Message);
                return null;
            }
        }

        //新增到品保1001表單
        public void NEW_UOF_QC1001(string QCFrm002SN_FieldValue, DataTable DT)
        {
            if (DT == null || DT.Rows.Count == 0) return;

            try
            {
                string account = DT.Rows[0]["CREATOR"].ToString();
                string groupId = DT.Rows[0]["GROUP_ID"].ToString();
                string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
                string fillerName = DT.Rows[0]["NAME"].ToString();
                string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

                string QCFrm002SN = QCFrm002SN_FieldValue;
                string EXTERNAL_FORM_NBR = QCFrm002SN;

                // 找出 QC1002 的明細
                DataTable DT_UOF_1002 = FIND_QC1002_DETAILS(QCFrm002SN);
                if (DT_UOF_1002 == null || DT_UOF_1002.Rows.Count == 0) return;

                DataRow row1002 = DT_UOF_1002.Rows[0];

                XmlDocument xmlDoc = new XmlDocument();
                // 建立根節點 <Form>
                XmlElement Form = xmlDoc.CreateElement("Form");

                // 正式的 ID
                string ID = SEARCHFORM_UOF_VERSION_ID("1001.客訴品質異常處理單");
                if (!string.IsNullOrEmpty(ID))
                {
                    Form.SetAttribute("formVersionId", ID);
                }
                Form.SetAttribute("urgentLevel", "2");
                xmlDoc.AppendChild(Form);

                // 建立節點 <Applicant>
                XmlElement Applicant = xmlDoc.CreateElement("Applicant");
                Applicant.SetAttribute("account", account);
                Applicant.SetAttribute("groupId", groupId);
                Applicant.SetAttribute("jobTitleId", jobTitleId);
                Form.AppendChild(Applicant);

                // 建立節點 <Comment>
                XmlElement Comment = xmlDoc.CreateElement("Comment");
                Comment.InnerText = "申請者意見";
                Applicant.AppendChild(Comment);

                // 建立節點 <FormFieldValue>
                XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
                Form.AppendChild(FormFieldValue);

                // 利用 AddFieldItem 產生 FieldItem
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001SN", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001ASN", QCFrm002SN, fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001Date", row1002["QCFrm002Date"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001User", row1002["QCFrm002User"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001Dept", row1002["QCFrm002Dept"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001Rank", row1002["QCFrm002Rank"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001CUST", row1002["QCFrm002CU"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001PNO", row1002["QCFrm002PNO"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001CN", row1002["QCFrm002CN"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001PRD", row1002["QCFrm002PRD"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001RDate", row1002["QCFrm002RDate"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001MD", row1002["QCFrm002MD"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm001ND", row1002["QCFrm002ED"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm002Cmf", row1002["QCFrm002Cmf"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm002Abn", row1002["QCFrm002Abn"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "QCFrm002Abns", row1002["QCFrm002Abns"].ToString(), fillerName, fillerUserGuid, account, row1002["QCFrm002Abns"].ToString(), row1002["QCFrm002Abns"].ToString());

                // 處理連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                string connectionString = sqlsb.ConnectionString;

                string queryString = string.Format(@"
                                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                                    (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                                    VALUES (NEWID(), @XML, 2, '{0}')", EXTERNAL_FORM_NBR);

                using (SqlConnection connection = new SqlConnection(connectionString))
                using (SqlCommand command = new SqlCommand(queryString, connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                // 建議記錄 log，而不是空 catch
                Console.WriteLine($"NEW_UOF_QC1001 發生錯誤: {ex.Message}");
                throw;
            }
        }


        public DataTable FIND_QC1002_DETAILS(string DOC_NBR)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {

                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);


                sbSql.Clear();
                sbSqlQuery.Clear();

                

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                        [USER_GUID],
                                        [FORM_NAME],
                                        [DOC_NBR],
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002QCC""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002QCC,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002SN""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002SN,

                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002Date""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002Date,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002User""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002User,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002Dept""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002Dept,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002Rank""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002Rank,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002CU""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002CU,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002PNO""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002PNO,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002CN""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002CN,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002PRD""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002PRD,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002RDate""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002RDate,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002MD""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002MD,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002ED""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002ED,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002Cmf""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002Cmf,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002Abn""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002Abn,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""QCFrm002Abns""]/@fieldValue)[1]', 'NVARCHAR(100)') AS QCFrm002Abns,


                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[DOC_NBR] = '{0}'

                                        )

                                        SELECT* FROM TEMP
                                        WHERE 1 = 1



                                    ", DOC_NBR);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
        }
        /// <summary>
        /// 更新附件 ATTACH_ID 到 新QC1001中
        /// </summary>
        public void UPDATE_UOF_QC1001_ATTACH_ID()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 解密帳號與密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    {
                        try
                        {
                            StringBuilder sbSql = new StringBuilder();
                            sbSql.AppendFormat(@"
                                                UPDATE [UOF].[dbo].TB_WKF_TASK
                                                SET ATTACH_ID = TEMP.NEW_ATTACH_ID
                                                FROM (
                                                    SELECT 
                                                        TB_WKF_TASK.DOC_NBR,
                                                        TB_WKF_TASK.TASK_ID,
                                                        TB_WKF_TASK.ATTACH_ID,
                                                        [TB_WKF_EXTERNAL_TASK].EXTERNAL_FORM_NBR,
                                                        TB_WKF_TASK2.ATTACH_ID AS NEW_ATTACH_ID
                                                    FROM [UOF].[dbo].TB_WKF_TASK
                                                    JOIN [UOF].[dbo].[TB_WKF_EXTERNAL_TASK] 
                                                        ON TB_WKF_TASK.DOC_NBR = [TB_WKF_EXTERNAL_TASK].DOC_NBR
                                                    JOIN [UOF].[dbo].TB_WKF_TASK TB_WKF_TASK2 
                                                        ON [TB_WKF_EXTERNAL_TASK].EXTERNAL_FORM_NBR = TB_WKF_TASK2.DOC_NBR
                                                    WHERE TB_WKF_TASK.DOC_NBR LIKE 'QC%'
                                                      AND ISNULL(TB_WKF_TASK.ATTACH_ID, '') <> ISNULL(TB_WKF_TASK2.ATTACH_ID, '')
                                                ) AS TEMP
                                                WHERE TEMP.TASK_ID = TB_WKF_TASK.TASK_ID
                                            ");

                            using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn, tran))
                            {
                                cmd.CommandTimeout = 60;
                                int result = cmd.ExecuteNonQuery();

                                if (result == 0)
                                {
                                    tran.Rollback(); // 沒有更新 → 回滾
                                }
                                else
                                {
                                    tran.Commit();   // 有更新 → 提交
                                }
                            }
                        }
                        catch
                        {
                            tran.Rollback(); // 發生錯誤 → 回滾
                            throw;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("錯誤: " + ex.Message);
            }
        }


        //DOC_NBR新增到[TKQC].[dbo].[TBUOFQC1002HCECK]
        public void ADD_TO_TBUOFQC1002HCECK(DataTable DT)
        {

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                foreach (DataRow DR in DT.Rows)
                {
                    sbSql.AppendFormat(@"                                    
                                        INSERT INTO [TKQC].[dbo].[TBUOFQC1002HCECK]
                                        (
                                        [DOC_NBR]
                                        )
                                        VALUES
                                        (
                                        '{0}'
                                        )

                                    ", DR["DOC_NBR"].ToString()
                                    );
                }

                sbSql.AppendFormat(@"                                    
                                    
                                    "
                                    );

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  
                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }
        }

        public void NEWBUYITEM()
        {
            DataTable dtResult = new DataTable();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@" 
                                        SELECT T.DOC_NBR
                                        FROM [UOF].dbo.TB_WKF_TASK AS T
                                        WHERE T.DOC_NBR LIKE 'GA1003%'
                                          AND T.TASK_RESULT = '0'
                                          AND NOT EXISTS (
                                                SELECT 1
                                                FROM [192.168.1.105].[TKGAFFAIRS].dbo.BUYITEM AS B
                                                WHERE ISNULL(B.DOC_NBR,'') <> ''
                                                  AND B.DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN 
                                                      = T.DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN
                                        );

                            ");

                    using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn))
                    {
                        using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                        {
                            sqlConn.Open();
                            adapter.Fill(dtResult);
                            sqlConn.Close();
                        }
                    }
                }

                if (dtResult.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtResult.Rows)
                    {
                        SEARCHUOFTB_WKF_TASK_TKGRAFFAIRS_1003(dr["DOC_NBR"].ToString());
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("錯誤: " + ex.Message);
            }
        }

        public DataTable SEARCHUOFGA()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            string THISYEARS = DateTime.Now.ToString("yyyy");
            //取西元年後2位
            THISYEARS = THISYEARS.Substring(2, 2);

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();


                //是門市督導單STORE
                //核準過TASK_RESULT='0'
                sbSql.AppendFormat(@"  
                                     SELECT DOC_NBR
                                     FROM [UOF].DBO.TB_WKF_TASK 
                                     WHERE DOC_NBR LIKE 'GA1003{0}%'
                                     AND TASK_RESULT='0'
                                        UNION ALL 
                                        SELECT 'GA1003230100002'
                                    ", THISYEARS);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public DataTable SEARCHBUYITEM()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            string THISYEARS = DateTime.Now.ToString("yyyy");
            //取西元年後2位
            THISYEARS = THISYEARS.Substring(2, 2);

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                //UNION ALL 
                //SELECT 'A'
                //避免回傳NULL

                sbSql.AppendFormat(@"  
                                    SELECT [DOC_NBR]
                                    FROM  [TKGAFFAIRS].[dbo].[BUYITEM]
                                    WHERE [DOC_NBR] LIKE 'GA1003{0}%'
                                    UNION ALL 
									SELECT 'A'
                                    ", THISYEARS);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }



        //找出UOF表單的資料，將CURRENT_DOC的內容，轉成xmlDoc
        //從xmlDoc找出各節點的Attributes
        public void SEARCHUOFTB_WKF_TASK_TKGRAFFAIRS_1003(string DOC_NBR)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                // 建立連線字串 (解密)
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();

                // 直接在 SQL 解析 XML 欄位
                sbSql.AppendFormat(@"
            SELECT 
                T.DOC_NBR,
                U.NAME,
                T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA001""]/@fieldValue)[1]', 'nvarchar(50)') AS BUYNO,
                T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA005""]/@fieldValue)[1]', 'nvarchar(50)') AS BUYDATES,
                T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA005""]/@fieldValue)[1]', 'nvarchar(50)') AS INDATES,
                T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA007""]/@fieldValue)[1]', 'nvarchar(50)') AS GA007,
                X.Data.value('./Cell[@fieldId=""GG001""]/@fieldValue','nvarchar(200)') AS SPEC,
                X.Data.value('./Cell[@fieldId=""GG002""]/@fieldValue','nvarchar(200)') AS BUYNAME,
                X.Data.value('./Cell[@fieldId=""GG003""]/@fieldValue','nvarchar(200)') AS GG003,
                X.Data.value('./Cell[@fieldId=""GG004""]/@fieldValue','nvarchar(200)') AS VENDOR,
                X.Data.value('./Cell[@fieldId=""GG005""]/@fieldValue','nvarchar(200)') AS NUM,
                X.Data.value('./Cell[@fieldId=""GG006""]/@fieldValue','nvarchar(200)') AS GG006,
                X.Data.value('./Cell[@fieldId=""GG007""]/@fieldValue','nvarchar(200)') AS DEP,
                X.Data.value('./Cell[@fieldId=""GG008""]/@fieldValue','nvarchar(200)') AS GG008,
                X.Data.value('./Cell[@fieldId=""GG009""]/@fieldValue','nvarchar(200)') AS UNIT
            FROM [UOF].dbo.TB_WKF_TASK AS T
            LEFT JOIN [UOF].dbo.TB_EB_USER AS U 
                ON U.USER_GUID = T.USER_GUID
            CROSS APPLY T.CURRENT_DOC.nodes('/Form/FormFieldValue/FieldItem[@fieldId=""GA008""]/DataGrid/Row') AS X(Data)
            WHERE T.DOC_NBR LIKE '{0}%'
        ", DOC_NBR);

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count > 0)
                {
                    // 這裡直接可以用 ds1.Tables["ds1"] 當結果集，每一筆就是一個明細
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        string docNbr = dr["DOC_NBR"].ToString();
                        string name = dr["NAME"].ToString();
                        string buyNo = dr["BUYNO"].ToString();
                        string buyDates = dr["BUYDATES"].ToString();
                        string inDates = dr["INDATES"].ToString();
                        string ga007 = dr["GA007"].ToString();
                        string spec = dr["SPEC"].ToString();
                        string buyName = dr["BUYNAME"].ToString();
                        string gg003 = dr["GG003"].ToString();
                        string vendor = dr["VENDOR"].ToString();
                        string num = dr["NUM"].ToString();
                        string gg006 = dr["GG006"].ToString();
                        string dep = dr["DEP"].ToString();
                        string gg008 = dr["GG008"].ToString();
                        string unit = dr["UNIT"].ToString();

                        // 你可以在這裡呼叫 ADDBUYITEM(...) 或處理後續邏輯
                        // string STATUS = "1.詢價中";
                        // ADDBUYITEM(buyDates, buyNo, name, dep, buyName, spec, vendor, num, unit, inDates, STATUS, docNbr);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("錯誤: " + ex.Message);
            }
            finally
            {
                sqlConn.Close();
            }
        }


        public void ADDBUYITEM(
            string BUYDATES, string BUYNO, string NAME, string DEP, string BUYNAME,
            string SPEC, string VENDOR, string NUM, string UNIT,
            string INDATES, string STATUS, string DOC_NBR)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                            INSERT INTO [TKGAFFAIRS].[dbo].[BUYITEM]
                                            ([BUYDATES],[BUYNO],[NAME],[DEP],[BUYNAME],[SPEC],[VENDOR],[NUM],[UNIT],[INDATES],[STATUS],[DOC_NBR])
                                            VALUES (@BUYDATES,@BUYNO,@NAME,@DEP,@BUYNAME,@SPEC,@VENDOR,@NUM,@UNIT,@INDATES,@STATUS,@DOC_NBR)
                                        ";

                        cmd.Parameters.AddWithValue("@BUYDATES", BUYDATES);
                        cmd.Parameters.AddWithValue("@BUYNO", BUYNO);
                        cmd.Parameters.AddWithValue("@NAME", NAME);
                        cmd.Parameters.AddWithValue("@DEP", DEP);
                        cmd.Parameters.AddWithValue("@BUYNAME", BUYNAME);
                        cmd.Parameters.AddWithValue("@SPEC", SPEC);
                        cmd.Parameters.AddWithValue("@VENDOR", VENDOR);
                        cmd.Parameters.AddWithValue("@NUM", NUM);
                        cmd.Parameters.AddWithValue("@UNIT", UNIT);
                        cmd.Parameters.AddWithValue("@INDATES", INDATES);
                        cmd.Parameters.AddWithValue("@STATUS", STATUS);
                        cmd.Parameters.AddWithValue("@DOC_NBR", DOC_NBR);

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();
                        }
                        else
                        {
                            tran.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"發生錯誤：{ex.Message}");
            }
        }



        public DataTable SEARCH_UOF_GRAFFIRS_1003()
        {

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();


            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();


                //AND DOC_NBR = 'GA1003230300113'
                sbSql.AppendFormat(@"  
                                    SELECT DOC_NBR
                                    FROM [UOF].[dbo].TB_WKF_TASK,[UOF].dbo.TB_WKF_FORM,[UOF].dbo.TB_WKF_FORM_VERSION
                                    WHERE TB_WKF_TASK.FORM_VERSION_ID=TB_WKF_FORM_VERSION.FORM_VERSION_ID
                                    AND TB_WKF_FORM.FORM_ID=TB_WKF_FORM_VERSION.FORM_ID
                                    AND TB_WKF_TASK.TASK_STATUS='2' AND TB_WKF_TASK.TASK_RESULT='0'
                                    AND TB_WKF_FORM.FORM_NAME='1003.雜項請購單'
                                    AND DOC_NBR NOT IN (SELECT  EXTERNAL_FORM_NBR FROM [UOF].[dbo].[TB_WKF_EXTERNAL_TASK] WHERE STATUS IN ('1','2')  AND ISNULL(EXTERNAL_FORM_NBR,'')<>'') 
                                    AND DOC_NBR>='GA1003230100138'
                        
                                    ORDER BY DOC_NBR
                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

      

        public DataTable SEARCH_UOF_TB_EB_USER(string NAME)
        {

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();


            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();


                //AND DOC_NBR = 'GA1003230300113'
                sbSql.AppendFormat(@"  
                                    SELECT USER_GUID,NAME
                                    FROM [UOF].[dbo].[TB_EB_USER] 
                                    WHERE [TB_EB_USER].NAME='{0}'
                                    ", NAME);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }


        public void ADD_GRAFFAIRS_1005_TB_WKF_EXTERNAL_TASK(
            string USER_GUID, string DOC_NBR,
            string GA001, string GA002, string GA003, string GA004, string GA005,
            string GA006, string GA007, string GA008, string GA009, string GA010,
            string GA011, string GA012, string GA013, string GA014, string GA015,
            string GA016, string GA017, string GA098, string GA099, string GA999,
            string GA019, DataTable DT, string DEFAUL_NAME
            )
        {
            DataTable DTUSERDEP = SEARCHUOFUSERDEP(USER_GUID);
            DataTable DTUSERDEP_Defalut = SEARCHUOFUSERDEP_Defalut(DEFAUL_NAME);

            string account, groupId, jobTitleId, fillerName, fillerUserGuid;
            string DEPNAME, DEPNO;

            if (DTUSERDEP != null && DTUSERDEP.Rows.Count >= 1)
            {
                account = DTUSERDEP.Rows[0]["ACCOUNT"].ToString();
                groupId = DTUSERDEP.Rows[0]["GROUP_ID"].ToString();
                jobTitleId = DTUSERDEP.Rows[0]["TITLE_ID"].ToString();
                fillerName = DTUSERDEP.Rows[0]["NAME"].ToString();
                fillerUserGuid = DTUSERDEP.Rows[0]["USER_GUID"].ToString();
                DEPNAME = DTUSERDEP.Rows[0]["DEPNAME"].ToString();
                DEPNO = DTUSERDEP.Rows[0]["DEPNO"].ToString();
            }
            else
            {
                account = DTUSERDEP_Defalut.Rows[0]["ACCOUNT"].ToString();
                groupId = DTUSERDEP_Defalut.Rows[0]["GROUP_ID"].ToString();
                jobTitleId = DTUSERDEP_Defalut.Rows[0]["TITLE_ID"].ToString();
                fillerName = DTUSERDEP_Defalut.Rows[0]["NAME"].ToString();
                fillerUserGuid = DTUSERDEP_Defalut.Rows[0]["USER_GUID"].ToString();
                DEPNAME = DTUSERDEP_Defalut.Rows[0]["DEPNAME"].ToString();
                DEPNO = DTUSERDEP_Defalut.Rows[0]["DEPNO"].ToString();
            }

            string EXTERNAL_FORM_NBR = DOC_NBR;
            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");
            string FORMID = SEARCHFORM_UOF_VERSION_ID("1005.雜項採購單");
            if (!string.IsNullOrEmpty(FORMID))
            {
                Form.SetAttribute("formVersionId", FORMID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 一般欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA001", GA001, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA002", GA002, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA003", GA003, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA004", GA004, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA005", GA005, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA006", GA006, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA007", GA007, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA008", GA008, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA009", GA009, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA010", GA010, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA011", GA011, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA012", GA012, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA013", GA013, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA014", GA014, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA015", GA015, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA016", GA016, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA017", GA017, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA999", GA999, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA019", GA019, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA099", GA099, fillerName, fillerUserGuid, account);

            // DataGrid 欄位
            XmlElement FieldItem = AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            FieldItem.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "GG002");
                AppendCellToRow(xmlDoc, Row, od, "GG002B", false, od["GG002"].ToString());
                AppendCellToRow(xmlDoc, Row, od, "GG010");
                AppendCellToRow(xmlDoc, Row, od, "GG003");
                AppendCellToRow(xmlDoc, Row, od, "GG004");
                AppendCellToRow(xmlDoc, Row, od, "GG004B", false, od["GG004"].ToString());
                AppendCellToRow(xmlDoc, Row, od, "GG005");
                AppendCellToRow(xmlDoc, Row, od, "GG005B", false, od["GG005"].ToString());
                AppendCellToRow(xmlDoc, Row, od, "GG009");
                AppendCellToRow(xmlDoc, Row, od, "GG009B", false, od["GG009"].ToString());
                AppendCellToRow(xmlDoc, Row, od, "GG006");
                AppendCellToRow(xmlDoc, Row, od, "GG007"); // 空值
                AppendCellToRow(xmlDoc, Row, od, "GG008"); // 空值
                AppendCellToRow(xmlDoc, Row, od, "GG011", false, GA004); // 指定值
                AppendCellToRow(xmlDoc, Row, od, "EXTERNAL_FORM_NBR", false, od["DOC_NBR"].ToString());

                DataGrid.AppendChild(Row);
                rowscounts++;
            }

            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
            {
                string queryString = $@"
                                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')
                                    ";
                using (SqlCommand command = new SqlCommand(queryString, connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
        }


        public DataTable SEARCHUOFUSERDEP(string USER_GUID)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    --先找是 總務
                                    SELECT 
                                    [GROUP_NAME] AS 'DEPNAME'
                                    ,[TB_EB_EMPL_DEP].[GROUP_ID]+','+[GROUP_NAME]+',False' AS 'DEPNO'
                                    ,[TB_EB_USER].[USER_GUID]
                                    ,[ACCOUNT]
                                    ,[NAME]
                                    ,[TB_EB_EMPL_DEP].[GROUP_ID]
                                    ,[TITLE_ID]     
                                    ,[GROUP_NAME]
                                    ,[GROUP_CODE]
                                    FROM [192.168.1.223].[UOF].[dbo].[TB_EB_USER],[192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP],[192.168.1.223].[UOF].[dbo].[TB_EB_GROUP]
                                    WHERE [TB_EB_USER].[USER_GUID]=[TB_EB_EMPL_DEP].[USER_GUID]
                                    AND [TB_EB_EMPL_DEP].[GROUP_ID]=[TB_EB_GROUP].[GROUP_ID]
                                    AND ISNULL([TB_EB_GROUP].[GROUP_CODE],'')<>''                      
                                    AND [GROUP_NAME] LIKE '%總務%'             
                                    AND [TB_EB_USER].[USER_GUID]='{0}'
                                    UNION ALL
                                    --再找不是 總務
                                    SELECT 
                                    [GROUP_NAME] AS 'DEPNAME'
                                    ,[TB_EB_EMPL_DEP].[GROUP_ID]+','+[GROUP_NAME]+',False' AS 'DEPNO'
                                    ,[TB_EB_USER].[USER_GUID]
                                    ,[ACCOUNT]
                                    ,[NAME]
                                    ,[TB_EB_EMPL_DEP].[GROUP_ID]
                                    ,[TITLE_ID]     
                                    ,[GROUP_NAME]
                                    ,[GROUP_CODE]
                                    FROM [192.168.1.223].[UOF].[dbo].[TB_EB_USER],[192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP],[192.168.1.223].[UOF].[dbo].[TB_EB_GROUP]
                                    WHERE [TB_EB_USER].[USER_GUID]=[TB_EB_EMPL_DEP].[USER_GUID]
                                    AND [TB_EB_EMPL_DEP].[GROUP_ID]=[TB_EB_GROUP].[GROUP_ID]
                                    AND ISNULL([TB_EB_GROUP].[GROUP_CODE],'')<>''                      
                                    AND [GROUP_NAME] NOT LIKE '%總務%'             
                                    AND [TB_EB_USER].[USER_GUID]='{0}'
                              
                                    ", USER_GUID);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }
        public DataTable SEARCHUOFUSERDEP_Defalut(string DEFAUL_NAME)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                   SELECT 
                                    [GROUP_NAME] AS 'DEPNAME'
                                    ,[TB_EB_EMPL_DEP].[GROUP_ID]+','+[GROUP_NAME]+',False' AS 'DEPNO'
                                    ,[TB_EB_USER].[USER_GUID]
                                    ,[ACCOUNT]
                                    ,[NAME]
                                    ,[TB_EB_EMPL_DEP].[GROUP_ID]
                                    ,[TITLE_ID]     
                                    ,[GROUP_NAME]
                                    ,[GROUP_CODE]
                                    ,*
                                    FROM [192.168.1.223].[UOF].[dbo].[TB_EB_USER],[192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP],[192.168.1.223].[UOF].[dbo].[TB_EB_GROUP]
                                    WHERE [TB_EB_USER].[USER_GUID]=[TB_EB_EMPL_DEP].[USER_GUID]
                                    AND [TB_EB_EMPL_DEP].[GROUP_ID]=[TB_EB_GROUP].[GROUP_ID]
                                    AND ISNULL([TB_EB_GROUP].[GROUP_CODE],'')<>''     
                                    AND ORDERS=0             
                                    AND [NAME]='{0}'
                              
                                    ", DEFAUL_NAME);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public void ADD_TKGAFFAIRS_BUYITEMREPORTS()
        {
            DataTable DTSEARCHUOF_GRAFFAIRS_1005 = SEARCHUOF_GRAFFAIRS_1005();

            if (DTSEARCHUOF_GRAFFAIRS_1005 != null && DTSEARCHUOF_GRAFFAIRS_1005.Rows.Count >= 1)
            {
                foreach (DataRow DR in DTSEARCHUOF_GRAFFAIRS_1005.Rows)
                {
                    string USER_GUID = DR["USER_GUID"].ToString();
                    string EMAILTO = DR["EMAIL"].ToString();

                    string ID = DR["ID"].ToString();
                    string GA001 = DR["GA001"].ToString();
                    string GA002 = DR["GA002"].ToString();
                    string GA003 = DR["GA003"].ToString();
                    string GA004 = DR["GA004"].ToString();
                    string GA005 = DR["GA005"].ToString();
                    string GA006 = DR["GA006"].ToString();
                    string GA007 = DR["GA007"].ToString();
                    string GA008 = DR["GA008"].ToString();
                    string GA009 = DR["GA009"].ToString();
                    string GA010 = DR["GA010"].ToString();
                    string GA011 = DR["GA011"].ToString();
                    string GA012 = DR["GA012"].ToString();
                    string GA013 = DR["GA013"].ToString();
                    string GA014 = DR["GA014"].ToString();
                    string GA015 = DR["GA015"].ToString();
                    string GA016 = DR["GA016"].ToString();
                    string GA017 = DR["GA017"].ToString();
                    string GA018 = DR["GA018"].ToString();
                    string GA099 = DR["GA099"].ToString();
                    string GA999 = DR["GA999"].ToString();

                    ADD_TO_TKGAFFAIRS_BUYITEMREPORTS(
                        ID, GA001, GA002, GA003, GA004, GA005, GA006,
                        GA007, GA008, GA009, GA010, GA011, GA012, GA013,
                        GA014, GA015, GA016, GA017, GA018, GA099, GA999
                    );
                }
            }
        }


        //找出昨天，已核單完成的採購單-1005.雜項採購單
        public DataTable SEARCHUOF_GRAFFAIRS_1005()
        {
            DataSet ds = new DataSet();
            string endTime = DateTime.Now.ToString("yyyyMMdd");

            try
            {
                // 解密連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString
                );
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();
                    sbSql.AppendFormat(@"
                                         SELECT 
                                            CURRENT_DOC,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""ID""]/@fieldValue)[1]', 'nvarchar(50)') AS ID,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA001""]/@fieldValue)[1]', 'nvarchar(200)') AS GA001,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA002""]/@fieldValue)[1]', 'nvarchar(200)') AS GA002,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA003""]/@fieldValue)[1]', 'nvarchar(200)') AS GA003,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA004""]/@fieldValue)[1]', 'nvarchar(200)') AS GA004,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA005""]/@fieldValue)[1]', 'nvarchar(200)') AS GA005,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA006""]/@fieldValue)[1]', 'nvarchar(200)') AS GA006,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA007""]/@fieldValue)[1]', 'nvarchar(200)') AS GA007,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA008""]/@fieldValue)[1]', 'nvarchar(200)') AS GA008,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA009""]/@fieldValue)[1]', 'nvarchar(200)') AS GA009,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA010""]/@fieldValue)[1]', 'nvarchar(200)') AS GA010,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA011""]/@fieldValue)[1]', 'nvarchar(200)') AS GA011,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA012""]/@fieldValue)[1]', 'nvarchar(200)') AS GA012,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA013""]/@fieldValue)[1]', 'nvarchar(200)') AS GA013,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA014""]/@fieldValue)[1]', 'nvarchar(200)') AS GA014,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA015""]/@fieldValue)[1]', 'nvarchar(200)') AS GA015,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA016""]/@fieldValue)[1]', 'nvarchar(200)') AS GA016,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA017""]/@fieldValue)[1]', 'nvarchar(200)') AS GA017,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA018""]/@fieldValue)[1]', 'nvarchar(200)') AS GA018,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA099""]/@fieldValue)[1]', 'nvarchar(200)') AS GA099,
                                            CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA999""]/@fieldValue)[1]', 'nvarchar(200)') AS GA999,
                                            TB_WKF_TASK.*,
                                            TB_EB_USER.ACCOUNT,
                                            TB_EB_USER.NAME,
                                            TB_WKF_FORM.FORM_NAME,
                                            TB_WKF_FORM_VERSION.FORM_VERSION_ID
                                        FROM [UOF].[dbo].[TB_WKF_TASK] 
                                        INNER JOIN [UOF].[dbo].[TB_EB_USER] ON TB_WKF_TASK.USER_GUID = TB_EB_USER.USER_GUID
                                        INNER JOIN [UOF].[dbo].[TB_WKF_FORM_VERSION] ON TB_WKF_TASK.FORM_VERSION_ID = TB_WKF_FORM_VERSION.FORM_VERSION_ID
                                        INNER JOIN [UOF].[dbo].[TB_WKF_FORM] ON TB_WKF_FORM.FORM_ID = TB_WKF_FORM_VERSION.FORM_ID
                                        WHERE TB_WKF_FORM.FORM_NAME = '1005.雜項採購單'
                                          AND TB_WKF_TASK.TASK_RESULT = '0'
                                          AND TB_WKF_TASK.TASK_STATUS = '2'
                                          AND CONVERT(NVARCHAR, TB_WKF_TASK.END_TIME, 112) = '{0}'
                                          AND TB_WKF_TASK.DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN (
                                                SELECT [ID] 
                                                FROM [192.168.1.105].[TKGAFFAIRS].[dbo].[BUYITEMREPORTS]
                                          )
                                          
                                     ", endTime);

                    SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), conn);
                    adapter.Fill(ds, "DS_FIND_UOF_TASK_APPLICATION_FORM");
                }

                if (ds.Tables["DS_FIND_UOF_TASK_APPLICATION_FORM"].Rows.Count > 0)
                {
                    return ds.Tables["DS_FIND_UOF_TASK_APPLICATION_FORM"];
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                // 建議 log 錯誤，方便 debug
                Console.WriteLine("SEARCHUOF_GRAFFAIRS_1005 error: " + ex.Message);
                return null;
            }
        }


        public void ADD_TO_TKGAFFAIRS_BUYITEMREPORTS(
             string ID, string GA001, string GA002, string GA003, string GA004,
             string GA005, string GA006, string GA007, string GA008, string GA009,
             string GA010, string GA011, string GA012, string GA013, string GA014,
             string GA015, string GA016, string GA017, string GA018, string GA099, string GA999
            )
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        cmd.CommandText = @"
                                            INSERT INTO [TKGAFFAIRS].[dbo].[BUYITEMREPORTS]
                                            (
                                                [ID],[GA001],[GA002],[GA003],[GA004],
                                                [GA005],[GA006],[GA007],[GA008],[GA009],
                                                [GA010],[GA011],[GA012],[GA013],[GA014],
                                                [GA015],[GA016],[GA017],[GA018],[GA099],[GA999]
                                            )
                                            VALUES
                                            (
                                                @ID,@GA001,@GA002,@GA003,@GA004,
                                                @GA005,@GA006,@GA007,@GA008,@GA009,
                                                @GA010,@GA011,@GA012,@GA013,@GA014,
                                                @GA015,@GA016,@GA017,@GA018,@GA099,@GA999
                                            )
                                        ";

                        cmd.Parameters.AddWithValue("@ID", ID);
                        cmd.Parameters.AddWithValue("@GA001", GA001);
                        cmd.Parameters.AddWithValue("@GA002", GA002);
                        cmd.Parameters.AddWithValue("@GA003", GA003);
                        cmd.Parameters.AddWithValue("@GA004", GA004);
                        cmd.Parameters.AddWithValue("@GA005", GA005);
                        cmd.Parameters.AddWithValue("@GA006", GA006);
                        cmd.Parameters.AddWithValue("@GA007", GA007);
                        cmd.Parameters.AddWithValue("@GA008", GA008);
                        cmd.Parameters.AddWithValue("@GA009", GA009);
                        cmd.Parameters.AddWithValue("@GA010", GA010);
                        cmd.Parameters.AddWithValue("@GA011", GA011);
                        cmd.Parameters.AddWithValue("@GA012", GA012);
                        cmd.Parameters.AddWithValue("@GA013", GA013);
                        cmd.Parameters.AddWithValue("@GA014", GA014);
                        cmd.Parameters.AddWithValue("@GA015", GA015);
                        cmd.Parameters.AddWithValue("@GA016", GA016);
                        cmd.Parameters.AddWithValue("@GA017", GA017);
                        cmd.Parameters.AddWithValue("@GA018", GA018);
                        cmd.Parameters.AddWithValue("@GA099", GA099);
                        cmd.Parameters.AddWithValue("@GA999", GA999);

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();
                        }
                        else
                        {
                            tran.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"發生錯誤：{ex.Message}");
            }
        }


        public void ADDUOFASTMBASTMCASTTCASTTD()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.Append(@"
                                SELECT TC001, TC002
                                FROM [TK].dbo.ASTTC
                                WHERE UDF01 IN ('Y','y')
                                AND TC001 IN ('AC11')
                                ORDER BY TC001, TC002
                            ");

                    using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        DataSet ds1 = new DataSet();
                        sqlConn.Open();
                        ds1.Clear();
                        adapter1.Fill(ds1, "ds1");

                        if (ds1.Tables["ds1"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                            {
                                string TC001 = dr["TC001"].ToString().Trim();
                                string TC002 = dr["TC002"].ToString().Trim();
                                ADD_ASTTC_TB_WKF_EXTERNAL_TASK(TC001, TC002);
                            }
                        }
                    }
                    sqlConn.Close();
                }
            }
            catch
            {
                // 建議實作錯誤處理或記錄
            }

            UPDATE_ASTTC_UDF01();
        }

        public void UPDATE_ASTTC_UDF01()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    {
                        StringBuilder sbSql = new StringBuilder();
                        sbSql.Append(@"
                                        UPDATE [TK].dbo.ASTTC
                                        SET UDF01 = 'UOF'
                                        WHERE UDF01 IN ('Y','y') AND TC001 IN ('AC21')
                                    ");

                        using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn, tran))
                        {
                            cmd.CommandTimeout = 60;
                            int result = cmd.ExecuteNonQuery();

                            if (result == 0)
                            {
                                tran.Rollback();
                            }
                            else
                            {
                                tran.Commit();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // TODO: 可以加個 Log 或其他錯誤處理
                throw; // 或是自行決定是否要丟出例外
            }
        }

        public void ADD_ASTTC_TB_WKF_EXTERNAL_TASK(string TC001, string TC002)
        {
            DataTable DT = SEARCH_ASTTC(TC001, TC002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TC001"].ToString().Trim() + DT.Rows[0]["TC002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORMID = SEARCHFORM_UOF_VERSION_ID("ASTI06.資產改良建立作業");
            if (!string.IsNullOrEmpty(FORMID))
            {
                Form.SetAttribute("formVersionId", FORMID);
            }

            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 主表欄位，全部用 AddFieldItem
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC001", DT.Rows[0]["TC001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC002", DT.Rows[0]["TC002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB001", DT.Rows[0]["MB001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB002", DT.Rows[0]["MB002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB003", DT.Rows[0]["MB003"].ToString().Trim(), fillerName, fillerUserGuid, account);

            // DataGrid 節點
            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode DETAILS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            DETAILS.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                // 逐欄建立 Cell，跟欄位一一對應
                AppendCellToRow(xmlDoc, Row, od, "TC003");
                AppendCellToRow(xmlDoc, Row, od, "TC004");
                AppendCellToRow(xmlDoc, Row, od, "TC005");
                AppendCellToRow(xmlDoc, Row, od, "TC006");
                AppendCellToRow(xmlDoc, Row, od, "TC007");
                AppendCellToRow(xmlDoc, Row, od, "TC008");
                AppendCellToRow(xmlDoc, Row, od, "TC009");
                AppendCellToRow(xmlDoc, Row, od, "TC010");
                AppendCellToRow(xmlDoc, Row, od, "TC019");
                AppendCellToRow(xmlDoc, Row, od, "TC020");
                AppendCellToRow(xmlDoc, Row, od, "TC033");
                AppendCellToRow(xmlDoc, Row, od, "TC037");
                AppendCellToRow(xmlDoc, Row, od, "TC038");
                AppendCellToRow(xmlDoc, Row, od, "TC039");
                AppendCellToRow(xmlDoc, Row, od, "TC040");
                AppendCellToRow(xmlDoc, Row, od, "TC041");
                AppendCellToRow(xmlDoc, Row, od, "TC042");
                AppendCellToRow(xmlDoc, Row, od, "TC043");
                AppendCellToRow(xmlDoc, Row, od, "TC076");

                rowscounts++;

                DataGrid.AppendChild(Row);
            }

            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
            string connectionString = sqlsb.ConnectionString;

            string queryString = $@"
                                INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')";

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = xmlDoc.OuterXml;

                    connection.Open();
                    command.ExecuteNonQuery();
                    connection.Close();
                }
            }
            catch
            {
                // 例外處理，可擴充
            }
        }



        public DataTable SEARCH_ASTTC(string TC001, string TC002)
        {
            SqlDataAdapter adapter1 = null;
            SqlCommandBuilder sqlCmdBuilder1 = null;
            DataSet ds1 = new DataSet();

            try
            {
                Class1 TKID = new Class1(); // 解密類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.AppendFormat(@"
                                        SELECT *
                                        , USER_GUID, NAME
                                        , (SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS GROUP_ID
                                        , (SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID = TEMP.USER_GUID) AS TITLE_ID
                                        FROM 
                                        (
                                            SELECT   
                                                ASTTC.COMPANY,
                                                ASTTC.CREATOR,
                                                ASTTC.USR_GROUP,
                                                ASTTC.CREATE_DATE,
                                                ASTTC.MODIFIER,
                                                ASTTC.MODI_DATE,
                                                ASTTC.FLAG,
                                                ASTTC.CREATE_TIME,
                                                ASTTC.MODI_TIME,
                                                ASTTC.TRANS_TYPE,
                                                ASTTC.TRANS_NAME,
                                                ASTTC.sync_date,
                                                ASTTC.sync_time,
                                                ASTTC.sync_mark,
                                                ASTTC.sync_count,
                                                ASTTC.DataUser,
                                                ASTTC.DataGroup,
                                                TC001,
                                                TC002,
                                                TC003,
                                                TC004,
                                                TC005,
                                                TC006,
                                                TC007,
                                                TC008,
                                                TC009,
                                                TC010,
                                                TC011,
                                                TC012,
                                                TC013,
                                                TC014,
                                                TC015,
                                                TC016,
                                                TC017,
                                                TC018,
                                                TC019,
                                                TC020,
                                                TC021,
                                                TC022,
                                                TC023,
                                                TC024,
                                                TC025,
                                                TC026,
                                                TC027,
                                                TC028,
                                                TC029,
                                                TC030,
                                                TC031,
                                                TC032,
                                                TC033,
                                                TC034,
                                                TC035,
                                                TC036,
                                                TC037,
                                                TC038,
                                                TC039,
                                                TC040,
                                                TC041,
                                                TC042,
                                                TC043,
                                                TC044,
                                                TC045,
                                                TC046,
                                                TC047,
                                                TC048,
                                                TC049,
                                                TC050,
                                                TC051,
                                                TC052,
                                                TC053,
                                                TC054,
                                                TC055,
                                                TC056,
                                                TC057,
                                                TC058,
                                                TC059,
                                                TC060,
                                                TC061,
                                                TC062,
                                                TC063,
                                                TC064,
                                                TC065,
                                                TC066,
                                                TC067,
                                                TC068,
                                                TC069,
                                                TC070,
                                                TC071,
                                                TC072,
                                                TC073,
                                                TC074,
                                                TC075,
                                                TC076,
                                                TC077,
                                                TC078,
                                                TC079,
                                                TC080,
                                                TC081,
                                                TC082,
                                                TC083,
                                                TC084,
                                                TC085,
                                                TC086,
                                                TC087,
                                                TC088,
                                                TC089,
                                                TC090,
                                                TC091,
                                                TC092,
                                                TC093,
                                                TC094,
                                                TC095,
                                                TC096,
                                                TC097,
                                                TC098,
                                                TC099,
                                                TC100,
                                                TC101,
                                                TC102,
                                                TC103,
                                                TC104,
                                                TC105,
                                                TC106,
                                                TC107,
                                                MB001,
                                                MB002,
                                                MB003,
                                                [TB_EB_USER].USER_GUID,
                                                NAME,
                                                (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=ASTTC.CREATOR) AS MV002
                                            FROM [TK].dbo.ASTTC
                                            LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT = ASTTC.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                            , [TK].dbo.ASTMB
                                            WHERE TC004 = MB001
                                            AND TC001 = '{0}' AND TC002 = '{1}'
                                        ) AS TEMP
                                    ", TC001, TC002);

                    adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                    sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                    sqlConn.Open();
                    ds1.Clear();
                    adapter1.Fill(ds1, "ds1");
                    sqlConn.Close();
                }

                if (ds1.Tables["ds1"].Rows.Count > 0)
                    return ds1.Tables["ds1"];
                else
                    return null;
            }
            catch
            {
                return null;
            }
        }
        //ERP資產重估>轉入UOF簽核
        public void ADDUOFASTMBASTMCASTTCASTTD_ACTI07()
        {
            try
            {
                Class1 TKID = new Class1(); // 解密類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    DataSet ds1 = new DataSet();
                    SqlDataAdapter adapter1;
                    SqlCommandBuilder sqlCmdBuilder1;

                    StringBuilder sbSql = new StringBuilder();

                    sbSql.Append(@"
                                SELECT TC001, TC002
                                FROM [TK].dbo.ASTTC
                                WHERE UDF01 IN ('Y', 'y')
                                AND TC001 IN ('AC21')
                                ORDER BY TC001, TC002
                            ");

                    adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                    sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                    sqlConn.Open();
                    ds1.Clear();
                    adapter1.Fill(ds1, "ds1");

                    if (ds1.Tables["ds1"].Rows.Count >= 1)
                    {
                        foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                        {
                            ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ACTI07(dr["TC001"].ToString().Trim(), dr["TC002"].ToString().Trim());
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 可考慮記錄錯誤 ex.Message
            }

            UPDATE_ASTTC_UDF01_ACTI07();
        }

        public void UPDATE_ASTTC_UDF01_ACTI07()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                        UPDATE [TK].dbo.ASTTC
                                        SET UDF01 = 'UOF'
                                        WHERE UDF01 IN ('Y','y')
                                        AND TC001 IN ('AC21')
                                    ";

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();
                        }
                        else
                        {
                            tran.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議加上日誌或例外處理
                // e.g. Log.Error("更新 ASTTC UDF01 發生錯誤", ex);
                throw;
            }
        }

        public void ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ACTI07(string TC001, string TC002)
        {
            DataTable DT = SEARCH_ASTTC_ACTI07(TC001, TC002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TC001"].ToString().Trim() + DT.Rows[0]["TC002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORMID = SEARCHFORM_UOF_VERSION_ID("ASTI07.資產重估建立作業");
            if (!string.IsNullOrEmpty(FORMID))
            {
                Form.SetAttribute("formVersionId", FORMID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 使用 AddFieldItem 建立普通欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC001", DT.Rows[0]["TC001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC002", DT.Rows[0]["TC002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB001", DT.Rows[0]["MB001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB002", DT.Rows[0]["MB002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB003", DT.Rows[0]["MB003"].ToString().Trim(), fillerName, fillerUserGuid, account);

 
            // DataGrid 節點
            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode DETAILS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            DETAILS.AppendChild(DataGrid);

            // 用 AppendCellToRow 填入明細欄位
            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TC003");
                AppendCellToRow(xmlDoc, Row, od, "TC004");               
                AppendCellToRow(xmlDoc, Row, od, "TC010");                
                AppendCellToRow(xmlDoc, Row, od, "TC033");
                AppendCellToRow(xmlDoc, Row, od, "TC036");               

                rowscounts++;
                DataGrid.AppendChild(Row);
            }

            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
            string connectionString = sqlsb.ConnectionString;

            string queryString = $@"
                                INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')";

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = xmlDoc.OuterXml;

                    connection.Open();
                    command.ExecuteNonQuery();
                    connection.Close();
                }
            }
            catch
            {
                // 例外處理，可擴充
            }

        }



        public DataTable SEARCH_ASTTC_ACTI07(string TC001, string TC002)
        {
            DataTable dt = new DataTable();

            try
            {
                Class1 TKID = new Class1(); // 用new建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@"
                                    SELECT *
                                    ,USER_GUID,NAME
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    FROM 
                                    (
                                        SELECT   
                                            ASTTC.[COMPANY]
                                            ,ASTTC.[CREATOR]
                                            ,ASTTC.[USR_GROUP]
                                            ,ASTTC.[CREATE_DATE]
                                            ,ASTTC.[MODIFIER]
                                            ,ASTTC.[MODI_DATE]
                                            ,ASTTC.[FLAG]
                                            ,ASTTC.[CREATE_TIME]
                                            ,ASTTC.[MODI_TIME]
                                            ,ASTTC.[TRANS_TYPE]
                                            ,ASTTC.[TRANS_NAME]
                                            ,ASTTC.[sync_date]
                                            ,ASTTC.[sync_time]
                                            ,ASTTC.[sync_mark]
                                            ,ASTTC.[sync_count]
                                            ,ASTTC.[DataUser]
                                            ,ASTTC.[DataGroup]                                 
                                            ,[TC001]
                                            ,[TC002]
                                            ,[TC003]
                                            ,[TC004]
                                            ,[TC005]
                                            ,[TC006]
                                            ,[TC007]
                                            ,[TC008]
                                            ,[TC009]
                                            ,[TC010]
                                            ,[TC011]
                                            ,[TC012]
                                            ,[TC013]
                                            ,[TC014]
                                            ,[TC015]
                                            ,[TC016]
                                            ,[TC017]
                                            ,[TC018]
                                            ,[TC019]
                                            ,[TC020]
                                            ,[TC021]
                                            ,[TC022]
                                            ,[TC023]
                                            ,[TC024]
                                            ,[TC025]
                                            ,[TC026]
                                            ,[TC027]
                                            ,[TC028]
                                            ,[TC029]
                                            ,[TC030]
                                            ,[TC031]
                                            ,[TC032]
                                            ,[TC033]
                                            ,[TC034]
                                            ,[TC035]
                                            ,[TC036]
                                            ,[TC037]
                                            ,[TC038]
                                            ,[TC039]
                                            ,[TC040]
                                            ,[TC041]
                                            ,[TC042]
                                            ,[TC043]
                                            ,[TC044]
                                            ,[TC045]
                                            ,[TC046]
                                            ,[TC047]
                                            ,[TC048]
                                            ,[TC049]
                                            ,[TC050]
                                            ,[TC051]
                                            ,[TC052]
                                            ,[TC053]
                                            ,[TC054]
                                            ,[TC055]
                                            ,[TC056]
                                            ,[TC057]
                                            ,[TC058]
                                            ,[TC059]
                                            ,[TC060]
                                            ,[TC061]
                                            ,[TC062]
                                            ,[TC063]
                                            ,[TC064]
                                            ,[TC065]
                                            ,[TC066]
                                            ,[TC067]
                                            ,[TC068]
                                            ,[TC069]
                                            ,[TC070]
                                            ,[TC071]
                                            ,[TC072]
                                            ,[TC073]
                                            ,[TC074]
                                            ,[TC075]
                                            ,[TC076]
                                            ,[TC077]
                                            ,[TC078]
                                            ,[TC079]
                                            ,[TC080]
                                            ,[TC081]
                                            ,[TC082]
                                            ,[TC083]
                                            ,[TC084]
                                            ,[TC085]
                                            ,[TC086]
                                            ,[TC087]
                                            ,[TC088]
                                            ,[TC089]
                                            ,[TC090]
                                            ,[TC091]
                                            ,[TC092]
                                            ,[TC093]
                                            ,[TC094]
                                            ,[TC095]
                                            ,[TC096]
                                            ,[TC097]
                                            ,[TC098]
                                            ,[TC099]
                                            ,[TC100]
                                            ,[TC101]
                                            ,[TC102]
                                            ,[TC103]
                                            ,[TC104]
                                            ,[TC105]
                                            ,[TC106]
                                            ,[TC107]
                                            ,[MB001]
                                            ,[MB002]
                                            ,[MB003]
                                            ,[TB_EB_USER].USER_GUID,NAME
                                            ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=ASTTC.CREATOR) AS 'MV002'
                                        FROM [TK].dbo.ASTTC
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                            ON [TB_EB_USER].ACCOUNT= ASTTC.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        ,[TK].dbo.ASTMB
                                        WHERE TC004=MB001
                                        AND TC001='{0}' AND TC002='{1}'
                                    ) AS TEMP
                                ", TC001, TC002);

                    using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        sqlConn.Open();
                        ds1.Clear();
                        adapter1.Fill(ds1, "ds1");
                        sqlConn.Close();
                    }
                }

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    dt = ds1.Tables["ds1"];
                    return dt;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
        }

        //ERP資產報廢>轉入UOF簽核
        public void ADDUOFASTMBASTMCASTTCASTTD_ACTI08()
        {
            try
            {
                // 20210902密碼解密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    DataSet ds1 = new DataSet();
                    SqlDataAdapter adapter1 = new SqlDataAdapter();
                    SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.AppendFormat(@"
                                        SELECT TC001, TC002
                                        FROM [TK].dbo.ASTTC
                                        WHERE UDF01 IN ('Y','y')
                                        AND TC001 IN ('AC31','AC32','AC33','AC34')
                                        ORDER BY TC001, TC002
                                    ");

                    adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                    sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                    sqlConn.Open();
                    ds1.Clear();
                    adapter1.Fill(ds1, "ds1");

                    if (ds1.Tables["ds1"].Rows.Count > 0)
                    {
                        foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                        {
                            string TC001 = dr["TC001"].ToString().Trim();
                            string TC002 = dr["TC002"].ToString().Trim();

                            ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ACTI08(TC001,TC002);
                        }
                    }
                }
            }
            catch
            {
                // 可視需求記錄 log
            }
            finally
            {
                UPDATE_ASTTC_UDF01_ACTI08();
            }
        }


        public void UPDATE_ASTTC_UDF01_ACTI08()
        {
            try
            {
                // 20210902 密碼解密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    {
                        sbSql.Clear();
                        sbSql.AppendFormat(@"
                                            UPDATE [TK].dbo.ASTTC
                                            SET UDF01 = 'UOF'
                                            WHERE UDF01 IN ('Y','y')
                                            AND TC001 IN ('AC31','AC32','AC33','AC34')
                                        ");

                        using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn, tran))
                        {
                            cmd.CommandTimeout = 60;
                            int result = cmd.ExecuteNonQuery();

                            if (result == 0)
                            {
                                tran.Rollback(); // 交易取消
                            }
                            else
                            {
                                tran.Commit(); // 執行交易
                            }
                        }
                    }
                }
            }
            catch
            {
                // 可加 log 記錄錯誤
            }
        }

        public void ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ACTI08(string TC001, string TC002)
        {
            // 取得表單主資料
            DataTable DT = SEARCH_ASTTC_ACTI08(TC001, TC002);
            if (DT.Rows.Count == 0) return; // 若無資料，直接返回

            // 取得申請人部門資訊
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TC001"].ToString().Trim() + DT.Rows[0]["TC002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORMID = SEARCHFORM_UOF_VERSION_ID("ASTI08.資產報廢建立作業");
            if (!string.IsNullOrEmpty(FORMID))
            {
                Form.SetAttribute("formVersionId", FORMID);
            }

            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            // Applicant 節點
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            // FormFieldValue 節點
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 使用 AddFieldItem 加入欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC001", DT.Rows[0]["TC001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC002", DT.Rows[0]["TC002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB001", DT.Rows[0]["MB001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB002", DT.Rows[0]["MB002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB003", DT.Rows[0]["MB003"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC003", DT.Rows[0]["TC003"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC005", DT.Rows[0]["TC005"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC006", DT.Rows[0]["TC006"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC007", DT.Rows[0]["TC007"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC008", DT.Rows[0]["TC008"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC009", DT.Rows[0]["TC009"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC010", DT.Rows[0]["TC010"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC013", DT.Rows[0]["TC013"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);

            // 建立 DataGrid
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode DETAILS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            DETAILS.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", (rowscounts).ToString());

                // 使用 AppendCellToRow 加入明細欄位
                AppendCellToRow(xmlDoc, Row, od, "TD003");
                AppendCellToRow(xmlDoc, Row, od, "TD004");
                AppendCellToRow(xmlDoc, Row, od, "TD005");
                AppendCellToRow(xmlDoc, Row, od, "TD008");

                rowscounts++;
                XmlNode DataGridS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']/DataGrid");
                DataGridS.AppendChild(Row);
            }

            // 寫入 DB
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
                {
                    string query = $@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES
                                        (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')";

                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                        connection.Open();
                        command.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                // 可加入 log 或錯誤處理
                throw;
            }
        }


        public DataTable SEARCH_ASTTC_ACTI08(string TC001, string TC002)
        {
            DataSet ds1 = new DataSet();
            try
            {
                // 建立資料庫連線並解密帳密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                    SELECT *
                                          ,USER_GUID
                                          ,NAME
                                          ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID=TEMP.USER_GUID) AS GROUP_ID
                                          ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID=TEMP.USER_GUID) AS TITLE_ID
                                    FROM (
                                        SELECT ASTTC.*, ASTMB.MB001, ASTMB.MB002, ASTMB.MB003,
                                               ASTTD.TD001, ASTTD.TD002, ASTTD.TD003, ASTTD.TD004,
                                               ASTTD.TD005, ASTTD.TD006, ASTTD.TD007, ASTTD.TD008,
                                               TB_EB_USER.USER_GUID, TB_EB_USER.NAME,
                                               (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=ASTTC.CREATOR) AS MV002
                                        FROM [TK].dbo.ASTTC
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER]
                                            ON TB_EB_USER.ACCOUNT = ASTTC.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        LEFT JOIN [TK].dbo.ASTTD
                                            ON TC001 = TD001 AND TC002 = TD002
                                        INNER JOIN [TK].dbo.ASTMB
                                            ON TC004 = MB001
                                        WHERE TC001='{0}' AND TC002='{1}'
                                    ) AS TEMP
                                ", TC001, TC002);

                using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                {
                    sqlConn.Open();
                    ds1.Clear();
                    adapter.Fill(ds1, "ds1");
                }

                if (ds1.Tables["ds1"].Rows.Count > 0)
                    return ds1.Tables["ds1"];
                else
                    return null;
            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }


        //ERP資產出售>轉入UOF簽核
        public void ADDUOFASTMBASTMCASTTCASTTD_ACTI09()
        {
            try
            {
                // 建立資料庫連線並解密帳密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();

                // 查詢需要處理的 ASTTC 資料
                sbSql.Append(@"
                            SELECT TC001, TC002
                            FROM [TK].dbo.ASTTC
                            WHERE UDF01 IN ('Y','y')
                              AND TC001 IN ('AC41')
                            ORDER BY TC001, TC002
                        ");

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                // 若查詢有資料則依序呼叫送表單的方法
                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ACTI09(dr["TC001"].ToString().Trim(), dr["TC002"].ToString().Trim());
                    }
                }

            }
            catch
            {
                // 可考慮 log 記錄錯誤訊息
            }
            finally
            {
                sqlConn.Close();
            }

            // 更新 UDF01 狀態
            UPDATE_ASTTC_UDF01_ACTI09();
        }


        public void UPDATE_ASTTC_UDF01_ACTI09()
        {
            try
            {
                // 建立資料庫連線並解密帳密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();
                sbSql.Append(@"
                                UPDATE [TK].dbo.ASTTC
                                SET UDF01 = 'UOF'
                                WHERE UDF01 IN ('Y','y')
                                  AND TC001 IN ('AC41')
                            ");

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback(); // 沒更新任何筆資料，交易回滾
                }
                else
                {
                    tran.Commit();   // 成功更新，提交交易
                }
            }
            catch
            {
                // 可考慮 log 錯誤訊息
                tran?.Rollback();
            }
            finally
            {
                sqlConn.Close();
            }
        }
        public void ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ACTI09(string TC001, string TC002)
        {
            DataTable DT = SEARCH_ASTTC_ACTI09(TC001, TC002);

            // 如果沒有資料就直接結束
            if (DT == null || DT.Rows.Count == 0)
            {
                return;
            }

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TC001"].ToString().Trim() + DT.Rows[0]["TC002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORMID = SEARCHFORM_UOF_VERSION_ID("ASTI09.資產出售建立作業");
            if (!string.IsNullOrEmpty(FORMID))
            {
                Form.SetAttribute("formVersionId", FORMID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 使用 AddFieldItem 建立 FieldItem
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC001", DT.Rows[0]["TC001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC002", DT.Rows[0]["TC002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB001", DT.Rows[0]["MB001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB002", DT.Rows[0]["MB002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB003", DT.Rows[0]["MB003"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC003", DT.Rows[0]["TC003"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC005", DT.Rows[0]["TC005"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC006", DT.Rows[0]["TC006"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC007", DT.Rows[0]["TC007"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC008", DT.Rows[0]["TC008"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC009", DT.Rows[0]["TC009"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC010", DT.Rows[0]["TC010"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC013", DT.Rows[0]["TC013"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC018", DT.Rows[0]["TC018"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC019", DT.Rows[0]["TC019"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC020", DT.Rows[0]["TC020"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC021", DT.Rows[0]["TC021"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC022", DT.Rows[0]["TC022"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC033", DT.Rows[0]["TC033"].ToString().Trim(), fillerName, fillerUserGuid, account);

            // DataGrid
            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);

            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode DETAILS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            DETAILS.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TD003");
                AppendCellToRow(xmlDoc, Row, od, "TD004");
                AppendCellToRow(xmlDoc, Row, od, "TD005");
                AppendCellToRow(xmlDoc, Row, od, "TD008");

                rowscounts++;

                XmlNode DataGridS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']/DataGrid");
                DataGridS.AppendChild(Row);
            }

            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
            string connectionString = sqlsb.ConnectionString;

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                    (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES (NEWID(), @XML, 2, '{0}')",  EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                    connection.Close();
                }
            }
            catch
            {
                // 可以加 logging
            }
        }



        public DataTable SEARCH_ASTTC_ACTI09(string TC001, string TC002)
        {
            DataSet ds1 = new DataSet();
            try
            {
                // 建立資料庫連線並解密帳號密碼
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                SELECT *
                                      ,USER_GUID
                                      ,NAME
                                      ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID=TEMP.USER_GUID) AS GROUP_ID
                                      ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE USER_GUID=TEMP.USER_GUID) AS TITLE_ID
                                FROM (
                                    SELECT ASTTC.*, ASTMB.MB001, ASTMB.MB002, ASTMB.MB003,
                                           ASTTD.TD001, ASTTD.TD002, ASTTD.TD003, ASTTD.TD004,
                                           ASTTD.TD005, ASTTD.TD006, ASTTD.TD007, ASTTD.TD008,
                                           TB_EB_USER.USER_GUID, TB_EB_USER.NAME,
                                           (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=ASTTC.CREATOR) AS MV002
                                    FROM [TK].dbo.ASTTC
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER]
                                        ON TB_EB_USER.ACCOUNT = ASTTC.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    LEFT JOIN [TK].dbo.ASTTD
                                        ON TC001 = TD001 AND TC002 = TD002
                                    INNER JOIN [TK].dbo.ASTMB
                                        ON TC004 = MB001
                                    WHERE TC001='{0}' AND TC002='{1}'
                                ) AS TEMP
                            ", TC001, TC002);

                using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                {
                    sqlConn.Open();
                    ds1.Clear();
                    adapter.Fill(ds1, "ds1");
                }

                return (ds1.Tables["ds1"].Rows.Count > 0) ? ds1.Tables["ds1"] : null;
            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void ADDUOFASTMBASTMCASTTCASTTD_ACTI10()
        {
            try
            {
                // 建立資料庫連線並解密帳號密碼
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1;
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();

                // 取得符合條件的 ASTTC 資料
                sbSql.Append(@"
                            SELECT TC001, TC002
                            FROM [TK].dbo.ASTTC
                            WHERE UDF01 IN ('Y','y')
                            AND TC001 IN ('AC51','AC52','AC53')
                            ORDER BY TC001, TC002
                        ");

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");

                if (ds1.Tables["ds1"].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        string TC001 = dr["TC001"].ToString().Trim();
                        string TC002 = dr["TC002"].ToString().Trim();
                        // 呼叫對應的 ACTI10 外部任務新增方法
                        ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ACTI10(TC001,TC002);
                    }
                }
            }
            catch
            {
                // 可視需求增加 log 或訊息
            }
            finally
            {
                sqlConn.Close();
            }

            // 更新 ASTTC 的 UDF01 狀態
            UPDATE_ASTTC_UDF01_ACTI10();
        }


        public void UPDATE_ASTTC_UDF01_ACTI10()
        {
            try
            {
                // 建立資料庫連線並解密帳號密碼
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                // 更新符合條件的 ASTTC 資料
                sbSql.Append(@"
                                UPDATE [TK].dbo.ASTTC
                                SET UDF01 = 'UOF'
                                WHERE UDF01 IN ('Y','y')
                                AND TC001 IN ('AC51')
                            ");

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;

                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback(); // 交易取消
                }
                else
                {
                    tran.Commit();   // 執行交易
                }
            }
            catch
            {
                // 可視需求加入 log 或訊息
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ACTI10(string TC001, string TC002)
        {
            DataTable DT = SEARCH_ASTTC_ACTI10(TC001, TC002);

            // 沒有資料就直接返回
            if (DT == null || DT.Rows.Count == 0)
                return;

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TC001"].ToString().Trim() + DT.Rows[0]["TC002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");
            string FORMID = SEARCHFORM_UOF_VERSION_ID("ASTI10.資產調整建立作業");
            if (!string.IsNullOrEmpty(FORMID))
                Form.SetAttribute("formVersionId", FORMID);
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 使用 AddFieldItem 寫法
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC001", DT.Rows[0]["TC001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC002", DT.Rows[0]["TC002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB001", DT.Rows[0]["MB001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB002", DT.Rows[0]["MB002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB003", DT.Rows[0]["MB003"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC003", DT.Rows[0]["TC003"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC005", DT.Rows[0]["TC005"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC006", DT.Rows[0]["TC006"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC007", DT.Rows[0]["TC007"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC008", DT.Rows[0]["TC008"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC009", DT.Rows[0]["TC009"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC010", DT.Rows[0]["TC010"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC013", DT.Rows[0]["TC013"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC018", DT.Rows[0]["TC018"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC019", DT.Rows[0]["TC019"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC020", DT.Rows[0]["TC020"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC021", DT.Rows[0]["TC021"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC022", DT.Rows[0]["TC022"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC033", DT.Rows[0]["TC033"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);

            XmlNode DETAILS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            DETAILS.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                // 用 AppendCellToRow 依序加入欄位
                AppendCellToRow(xmlDoc, Row, od, "TD003");
                AppendCellToRow(xmlDoc, Row, od, "TD004");
                AppendCellToRow(xmlDoc, Row, od, "TD005");
                AppendCellToRow(xmlDoc, Row, od, "TD008");

                DataGrid.AppendChild(Row);
                rowscounts++;
            }

            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
            string connectionString = sqlsb.ConnectionString;

            string queryString = $@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES
                                        (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')
                                ";

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                    connection.Close();
                }
            }
            catch
            {
                // log 可加
            }
        }


        public DataTable SEARCH_ASTTC_ACTI10(string TC001, string TC002)
        {
            DataSet ds1 = new DataSet();
            SqlDataAdapter adapter1;
            SqlCommandBuilder sqlCmdBuilder1;

            try
            {
                // 建立資料庫連線並解密帳號密碼
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                // 查詢 ASTTC、ASTTD、ASTMB 並結合 UOF 使用者資訊
                sbSql.AppendFormat(@"
                                    SELECT *
                                        ,USER_GUID
                                        ,NAME
                                        ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                          WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS GROUP_ID
                                        ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                          WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS TITLE_ID
                                    FROM (
                                        SELECT 
                                            ASTTC.*
                                            ,ASTTD.TD001
                                            ,ASTTD.TD002
                                            ,ASTTD.TD003
                                            ,ASTTD.TD004
                                            ,ASTTD.TD005
                                            ,ASTTD.TD006
                                            ,ASTTD.TD007
                                            ,ASTTD.TD008
                                            ,ASTTD.TD009
                                            ,ASTTD.TD010
                                            ,ASTTD.TD011
                                            ,ASTTD.TD012
                                            ,ASTTD.TD013
                                            ,ASTTD.TD014
                                            ,ASTTD.TD015
                                            ,ASTTD.TD016
                                            ,ASTTD.TD017
                                            ,ASTTD.TD018
                                            ,ASTTD.TD019
                                            ,ASTTD.TD020
                                            ,ASTTD.TD021
                                            ,ASTTD.TD022
                                            ,ASTTD.TD023
                                            ,ASTTD.TD024
                                            ,ASTTD.TD025
                                            ,ASTTD.TD026
                                            ,ASTTD.TD027
                                            ,ASTTD.TD028
                                            ,ASTMB.MB001, ASTMB.MB002, ASTMB.MB003,
                                            TB_EB_USER.USER_GUID, TB_EB_USER.NAME,
                                            (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=ASTTC.CREATOR) AS MV002
                                        FROM [TK].dbo.ASTTC
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                            ON TB_EB_USER.ACCOUNT = ASTTC.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        LEFT JOIN [TK].dbo.ASTTD 
                                            ON TC001 = TD001 AND TC002 = TD002
                                        , [TK].dbo.ASTMB
                                        WHERE TC004 = MB001
                                            AND TC001 = '{0}' 
                                            AND TC002 = '{1}'
                                    ) AS TEMP
                                ", TC001, TC002);

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                return ds1.Tables["ds1"].Rows.Count > 0 ? ds1.Tables["ds1"] : null;
            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        ///ERP資產折舊>轉入UOF簽核
        public void ADDUOFASTMBASTMCASTTCASTTD_ACTI11()
        {
            try
            {
                // 建立資料庫連線並解密帳號密碼
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1;
                SqlCommandBuilder sqlCmdBuilder1;

                sbSql.Clear();
                sbSqlQuery.Clear();

                // SQL 保留原樣
                sbSql.AppendFormat(@"
                                    SELECT TC001, TC002
                                    FROM [TK].dbo.ASTTC
                                    WHERE UDF01 IN ('Y','y')
                                    AND TC001 IN ('AC61')
                                    ORDER BY TC001, TC002
                                ");

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        string TC001 = dr["TC001"].ToString().Trim();
                        string TC002 = dr["TC002"].ToString().Trim();
                        ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ACTI11(TC001, TC002);
                    }
                }
            }
            catch
            {
                // 可視需求加 log
            }
            finally
            {
                sqlConn.Close();
            }

            // 更新 UDF01 狀態
            UPDATE_ASTTC_UDF01_ACTI11();
        }


        public void UPDATE_ASTTC_UDF01_ACTI11()
        {
            try
            {
                // 建立資料庫連線並解密帳號密碼
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                // SQL 保留原樣
                sbSql.AppendFormat(@"
                                    UPDATE [TK].dbo.ASTTC
                                    SET UDF01 = 'UOF'
                                    WHERE UDF01 IN ('Y','y')
                                    AND TC001 IN ('AC61')
                                ");

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;

                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback(); // 交易取消
                }
                else
                {
                    tran.Commit();   // 執行交易
                }
            }
            catch
            {
                // 可視需求加入 log
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ACTI11(string TC001, string TC002)
        {
            DataTable DT = SEARCH_ASTTC_ACTI11(TC001, TC002);
            if (DT.Rows.Count == 0) return;

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TC001"].ToString().Trim() + DT.Rows[0]["TC002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");
            string FORMID = SEARCHFORM_UOF_VERSION_ID("ASTI11.資產折舊建立作業");
            if (!string.IsNullOrEmpty(FORMID))
                Form.SetAttribute("formVersionId", FORMID);
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 單獨加入每個欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC001", DT.Rows[0]["TC001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC002", DT.Rows[0]["TC002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB001", DT.Rows[0]["MB001"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB002", DT.Rows[0]["MB002"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MB003", DT.Rows[0]["MB003"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC003", DT.Rows[0]["TC003"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC005", DT.Rows[0]["TC005"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC006", DT.Rows[0]["TC006"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC007", DT.Rows[0]["TC007"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC008", DT.Rows[0]["TC008"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC009", DT.Rows[0]["TC009"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC010", DT.Rows[0]["TC010"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC013", DT.Rows[0]["TC013"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC018", DT.Rows[0]["TC018"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC019", DT.Rows[0]["TC019"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC020", DT.Rows[0]["TC020"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC021", DT.Rows[0]["TC021"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC022", DT.Rows[0]["TC022"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC033", DT.Rows[0]["TC033"].ToString().Trim(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);

            // 建立 DataGrid 節點
            XmlNode DETAILS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            DETAILS.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TD003");
                AppendCellToRow(xmlDoc, Row, od, "TD004");
                AppendCellToRow(xmlDoc, Row, od, "TD005");
                AppendCellToRow(xmlDoc, Row, od, "TD008");

                rowscounts++;
                DataGrid.AppendChild(Row);
            }

            // 寫入 TB_WKF_EXTERNAL_TASK
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;
            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(), @XML, 2, '{0}')"
                                    ,  EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    connection.Open();
                    command.ExecuteNonQuery();
                    connection.Close();
                }
            }
            catch
            {
                // 可加 log
            }
        }



        public DataTable SEARCH_ASTTC_ACTI11(string TC001, string TC002)
        {
            DataSet ds1 = new DataSet();

            try
            {
                // 建立資料庫連線並解密帳號密碼
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                // SQL 完全保留原樣
                sbSql.AppendFormat(@"
                                    SELECT *
                                    ,USER_GUID,NAME
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    FROM 
                                    (
                                        SELECT   
                                            ASTTC.[COMPANY]
                                            ,ASTTC.[CREATOR]
                                            ,ASTTC.[USR_GROUP]
                                            ,ASTTC.[CREATE_DATE]
                                            ,ASTTC.[MODIFIER]
                                            ,ASTTC.[MODI_DATE]
                                            ,ASTTC.[FLAG]
                                            ,ASTTC.[CREATE_TIME]
                                            ,ASTTC.[MODI_TIME]
                                            ,ASTTC.[TRANS_TYPE]
                                            ,ASTTC.[TRANS_NAME]
                                            ,ASTTC.[sync_date]
                                            ,ASTTC.[sync_time]
                                            ,ASTTC.[sync_mark]
                                            ,ASTTC.[sync_count]
                                            ,ASTTC.[DataUser]
                                            ,ASTTC.[DataGroup]                                 
                                            ,[TC001],[TC002],[TC003],[TC004],[TC005],[TC006],[TC007],[TC008]
                                            ,[TC009],[TC010],[TC011],[TC012],[TC013],[TC014],[TC015],[TC016]
                                            ,[TC017],[TC018],[TC019],[TC020],[TC021],[TC022],[TC023],[TC024]
                                            ,[TC025],[TC026],[TC027],[TC028],[TC029],[TC030],[TC031],[TC032]
                                            ,[TC033],[TC034],[TC035],[TC036],[TC037],[TC038],[TC039],[TC040]
                                            ,[TC041],[TC042],[TC043],[TC044],[TC045],[TC046],[TC047],[TC048]
                                            ,[TC049],[TC050],[TC051],[TC052],[TC053],[TC054],[TC055],[TC056]
                                            ,[TC057],[TC058],[TC059],[TC060],[TC061],[TC062],[TC063],[TC064]
                                            ,[TC065],[TC066],[TC067],[TC068],[TC069],[TC070],[TC071],[TC072]
                                            ,[TC073],[TC074],[TC075],[TC076],[TC077],[TC078],[TC079],[TC080]
                                            ,[TC081],[TC082],[TC083],[TC084],[TC085],[TC086],[TC087],[TC088]
                                            ,[TC089],[TC090],[TC091],[TC092],[TC093],[TC094],[TC095],[TC096]
                                            ,[TC097],[TC098],[TC099],[TC100],[TC101],[TC102],[TC103],[TC104]
                                            ,[TC105],[TC106],[TC107],[MB001],[MB002],[MB003],[TD001],[TD002]
                                            ,[TD003],[TD004],[TD005],[TD006],[TD007],[TD008]
                                            ,[TB_EB_USER].USER_GUID,NAME
                                            ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=ASTTC.CREATOR) AS 'MV002'
                                        FROM [TK].dbo.ASTTC
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                            ON [TB_EB_USER].ACCOUNT= ASTTC.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        LEFT JOIN [TK].dbo.ASTTD ON TC001=TD001 AND TC002=TD002
                                        ,[TK].dbo.ASTMB
                                        WHERE 1=1
                                        AND TC004=MB001
                                        AND TC001='{0}' AND TC002='{1}'
                                    ) AS TEMP
                                ", TC001, TC002);

                SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");

                return ds1.Tables["ds1"].Rows.Count > 0 ? ds1.Tables["ds1"] : null;
            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        //ERP資產移轉>轉入UOF簽核
        public void ADDUOFASTMBASTMCASTTEASTTE()
        {
            try
            {
                // 建立資料庫連線並解密帳號密碼
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1;
                SqlCommandBuilder sqlCmdBuilder1;

                sbSql.Clear();
                sbSqlQuery.Clear();

                // SQL 保留原本內容
                sbSql.AppendFormat(@"
                                    SELECT TE001, TE002
                                    FROM [TK].dbo.ASTTE
                                    WHERE UDF01 IN ('Y','y')
                                    AND TE001 IN ('AC71')
                                    ORDER BY TE001, TE002
                                ");

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        string TE001 = dr["TE001"].ToString().Trim();
                        string TE002 = dr["TE002"].ToString().Trim();
                        // 呼叫專屬處理函式
                        ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ASTTE(TE001, TE002);
                    }
                }
            }
            catch (Exception EX)
            {
                // 可依需求補加錯誤處理
            }
            finally
            {
                sqlConn.Close();
            }

            // 更新 UDF01 標記
            UPDATE_ASTTC_UDF01_ASTTE();
        }


        public void UPDATE_ASTTC_UDF01_ASTTE()
        {
            try
            {
                // 建立資料庫連線並解密帳號密碼
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                // SQL 保留原本內容
                sbSql.AppendFormat(@"
                                    UPDATE [TK].dbo.ASTTE
                                    SET UDF01 = 'UOF'
                                    WHERE UDF01 IN ('Y','y')
                                    AND TE001 IN ('AC71')
                                ");

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    // 交易取消
                }
                else
                {
                    tran.Commit();      // 執行交易
                }
            }
            catch
            {
                // 可依需求加上錯誤處理
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void ADD_ASTTC_TB_WKF_EXTERNAL_TASK_ASTTE(string TE001, string TE002)
        {
            DataTable DT = SEARCH_ASTTE_ASTTF(TE001, TE002);

            // 如果 DT 沒資料就直接返回
            if (DT == null || DT.Rows.Count == 0)
                return;

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string EXTERNAL_FORM_NBR = TE001.Trim() + TE002.Trim();
            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORMID = SEARCHFORM_UOF_VERSION_ID("ASTI12.資產移轉建立作業");
            if (!string.IsNullOrEmpty(FORMID))
                Form.SetAttribute("formVersionId", FORMID);

            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 主表欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE001", DT.Rows[0]["TE001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE002", DT.Rows[0]["TE002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE003", DT.Rows[0]["TE003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TE004", DT.Rows[0]["TE004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);
            
            // 建立 DataGrid 節點
            XmlNode DETAILS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            DETAILS.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TF003");
                AppendCellToRow(xmlDoc, Row, od, "TF004");
                AppendCellToRow(xmlDoc, Row, od, "TF005");
                AppendCellToRow(xmlDoc, Row, od, "TF006");
                AppendCellToRow(xmlDoc, Row, od, "TF007");
                AppendCellToRow(xmlDoc, Row, od, "TF008");
                AppendCellToRow(xmlDoc, Row, od, "TF104");
                AppendCellToRow(xmlDoc, Row, od, "TF105");
                AppendCellToRow(xmlDoc, Row, od, "TF107");


                rowscounts++;
                DataGrid.AppendChild(Row);
            }



            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    string query = $@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                    (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')";

                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                        connection.Open();
                        command.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                // 可以在這裡 log ex.Message 或處理錯誤
                Console.WriteLine("上傳流程異常：" + ex.Message);
            }
        }



        public DataTable SEARCH_ASTTE_ASTTF(string TE001, string TE002)
        {
            DataSet ds1 = new DataSet();
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

            try
            {
                // 建立資料庫連線並解密帳號密碼
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                // SQL 保留原本內容
                sbSql.AppendFormat(@"
                                    SELECT *
                                    ,USER_GUID,NAME
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    FROM 
                                    (
                                        SELECT   
                                            ASTTE.[COMPANY]
                                            ,ASTTE.[CREATOR]
                                            ,ASTTE.[USR_GROUP]
                                            ,ASTTE.[CREATE_DATE]
                                            ,ASTTE.[MODIFIER]
                                            ,ASTTE.[MODI_DATE]
                                            ,ASTTE.[FLAG]
                                            ,ASTTE.[CREATE_TIME]
                                            ,ASTTE.[MODI_TIME]
                                            ,ASTTE.[TRANS_TYPE]
                                            ,ASTTE.[TRANS_NAME]
                                            ,ASTTE.[sync_date]
                                            ,ASTTE.[sync_time]
                                            ,ASTTE.[sync_mark]
                                            ,ASTTE.[sync_count]
                                            ,ASTTE.[DataUser]
                                            ,ASTTE.[DataGroup]                                 
                                            ,TE001
                                            ,TE002
                                            ,TE003
                                            ,TE004
                                            ,TF003
                                            ,TF004
                                            ,TF005
                                            ,TF006
                                            ,TF007
                                            ,TF008
                                            ,TF104
                                            ,TF105
                                            ,TF107
                                            ,[MB001]
                                            ,[MB002]
                                            ,[MB003]
                                            ,[TB_EB_USER].USER_GUID,NAME
                                            ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=ASTTE.CREATOR) AS 'MV002'
                                        FROM [TK].dbo.ASTTE
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                            ON [TB_EB_USER].ACCOUNT= ASTTE.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        LEFT JOIN [TK].dbo.ASTTF 
                                            ON TE001=TF001 AND TE002=TF002
                                        ,[TK].dbo.ASTMB
                                        WHERE 1=1
                                            AND TF003=MB001
                                            AND TE001='{0}' AND TE002='{1}'
                                    ) AS TEMP
                                ", TE001, TE002);

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                return ds1.Tables["ds1"].Rows.Count >= 1 ? ds1.Tables["ds1"] : null;
            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }


        public DataTable FIND_Z_UOF_SET_FORM_USERS(string FORM_NAME)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    SELECT TOP 1 [USER_GUID] ,[NAMES] ,[FORM_NAME] 
                                    FROM [UOF].[dbo].[Z_UOF_SET_FORM_USERS]
                                    WHERE [FORM_NAME] ='{0}'
                              
                                    ", FORM_NAME);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }
        //ERP PUR70.退貨單>轉入UOF簽核
        public void NEW_PURTGPURIJ()
        {
            // 建立資料庫連線與解密
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
            {
                try
                {
                    DataSet ds1 = new DataSet();
                    using (SqlDataAdapter adapter = new SqlDataAdapter())
                    {
                        StringBuilder sbSql = new StringBuilder();

                        sbSql.Append(@"
                                    SELECT TI001, TI002, UDF01
                                    FROM [TK].dbo.PURTI
                                    WHERE TI013='N'
                                    AND UDF01 IN ('Y','y')
                                    ORDER BY TI001, TI002
                                ");

                        adapter.SelectCommand = new SqlCommand(sbSql.ToString(), sqlConn);
                        sqlConn.Open();
                        ds1.Clear();
                        adapter.Fill(ds1, "ds1");

                        if (ds1.Tables["ds1"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                            {
                                string TI001 = dr["TI001"].ToString().Trim();
                                string TI002 = dr["TI002"].ToString().Trim();

                                // 呼叫對應的上傳方法
                                ADD_PURTIPURTJ_TB_WKF_EXTERNAL_TASK(TI001, TI002);
                            }
                        }
                    }
                }
                catch
                {
                    // 可加 logging 或錯誤處理
                }
            }

            // 更新 UDF01
            UPDATE_PURTI_UDF01();
        }

        public void ADD_PURTIPURTJ_TB_WKF_EXTERNAL_TASK(string TI001, string TI002)
        {
            DataTable DT = SEARCH_PURTI_PURTJ(TI001, TI002);
            if (DT == null || DT.Rows.Count == 0) return; // 沒資料就 return

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();
            string EXTERNAL_FORM_NBR = DT.Rows[0]["TI001"].ToString().Trim() + DT.Rows[0]["TI002"].ToString().Trim();

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");
            string PURTGID = SEARCHFORM_UOF_VERSION_ID("PUR70.退貨單");
            if (!string.IsNullOrEmpty(PURTGID))
                Form.SetAttribute("formVersionId", PURTGID);

            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 基本欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI001", DT.Rows[0]["TI001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI002", DT.Rows[0]["TI002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI003", DT.Rows[0]["TI003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI004", DT.Rows[0]["TI004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI016", DT.Rows[0]["TI016"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI017", DT.Rows[0]["TI017"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI018", DT.Rows[0]["TI018"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI006", DT.Rows[0]["TI006"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI007", DT.Rows[0]["TI007"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI008", DT.Rows[0]["TI008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI009", DT.Rows[0]["TI009"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI012", DT.Rows[0]["TI012"].ToString(), fillerName, fillerUserGuid, account);

            // DataGrid
            AddFieldItem(xmlDoc, FormFieldValue, "PURTJ", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode PURTD = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='PURTJ']");
            if (PURTD != null)
                PURTD.AppendChild(DataGrid);

            int rowscounts = 0;
            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TJ003");
                AppendCellToRow(xmlDoc, Row, od, "TJ004");
                AppendCellToRow(xmlDoc, Row, od, "TJ005");
                AppendCellToRow(xmlDoc, Row, od, "TJ006");
                AppendCellToRow(xmlDoc, Row, od, "TJ007");
                AppendCellToRow(xmlDoc, Row, od, "TJ008");
                AppendCellToRow(xmlDoc, Row, od, "TJ009");
                AppendCellToRow(xmlDoc, Row, od, "TJ010");
                AppendCellToRow(xmlDoc, Row, od, "TJ011");
                AppendCellToRow(xmlDoc, Row, od, "TJ012");
                AppendCellToRow(xmlDoc, Row, od, "TJ013");
                AppendCellToRow(xmlDoc, Row, od, "TJ014");
                AppendCellToRow(xmlDoc, Row, od, "TJ015");
                AppendCellToRow(xmlDoc, Row, od, "TJ016");
                AppendCellToRow(xmlDoc, Row, od, "TJ017");
                AppendCellToRow(xmlDoc, Row, od, "TJ018");

                DataGrid.AppendChild(Row);
                rowscounts++;
            }

            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;
            string insertSQL = $@"
                                INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')
                            ";

            using (SqlConnection connection = new SqlConnection(connectionString))
            using (SqlCommand command = new SqlCommand(insertSQL, connection))
            {
                command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = xmlDoc.OuterXml;
                connection.Open();
                command.ExecuteNonQuery();
            }
        }



        public DataTable SEARCH_PURTI_PURTJ(string TI001, string TI002)
        {
            DataSet ds1 = new DataSet();

            try
            {
                Class1 TKID = new Class1(); // 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.AppendFormat(@"                 
                                    SELECT *
                                    ,USER_GUID,NAME
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    FROM 
                                    (
                                    SELECT 
                                    [PURTI].[COMPANY]
                                    ,[PURTI].[CREATOR]
                                    ,[PURTI].[USR_GROUP]
                                    ,[PURTI].[CREATE_DATE]
                                    ,[PURTI].[MODIFIER]
                                    ,[PURTI].[MODI_DATE]
                                    ,[PURTI].[FLAG]
                                    ,[PURTI].[CREATE_TIME]
                                    ,[PURTI].[MODI_TIME]
                                    ,[PURTI].[TRANS_TYPE]
                                    ,[PURTI].[TRANS_NAME]
                                    ,[PURTI].[sync_date]
                                    ,[PURTI].[sync_time]
                                    ,[PURTI].[sync_mark]
                                    ,[PURTI].[sync_count]
                                    ,[PURTI].[DataUser]
                                    ,[PURTI].[DataGroup]
                                    ,[PURTI].[TI001]
                                    ,[PURTI].[TI002]
                                    ,[PURTI].[TI003]
                                    ,[PURTI].[TI004]
                                    ,[PURTI].[TI005]
                                    ,[PURTI].[TI006]
                                    ,[PURTI].[TI007]
                                    ,[PURTI].[TI008]
                                    ,[PURTI].[TI009]
                                    ,[PURTI].[TI010]
                                    ,[PURTI].[TI011]
                                    ,[PURTI].[TI012]
                                    ,[PURTI].[TI013]
                                    ,[PURTI].[TI014]
                                    ,[PURTI].[TI015]
                                    ,[PURTI].[TI016]
                                    ,[PURTI].[TI017]
                                    ,[PURTI].[TI018]
                                    ,[PURTI].[TI019]
                                    ,[PURTI].[TI020]
                                    ,[PURTI].[TI021]
                                    ,[PURTI].[TI022]
                                    ,[PURTI].[TI023]
                                    ,[PURTI].[TI024]
                                    ,[PURTI].[TI025]
                                    ,[PURTI].[TI026]
                                    ,[PURTI].[TI027]
                                    ,[PURTI].[TI028]
                                    ,[PURTI].[TI029]
                                    ,[PURTI].[TI030]
                                    ,[PURTI].[TI031]
                                    ,[PURTI].[TI032]
                                    ,[PURTI].[TI033]
                                    ,[PURTI].[TI034]
                                    ,[PURTI].[TI035]
                                    ,[PURTI].[TI036]
                                    ,[PURTI].[TI037]
                                    ,[PURTI].[TI038]
                                    ,[PURTI].[TI039]
                                    ,[PURTI].[TI040]
                                    ,[PURTI].[TI041]
                                    ,[PURTI].[TI042]
                                    ,[PURTI].[TI043]
                                    ,[PURTI].[TI044]
                                    ,[PURTI].[TI045]
                                    ,[PURTI].[TI046]
                                    ,[PURTI].[TI047]
                                    ,[PURTI].[TI048]
                                    ,[PURTI].[TI049]
                                    ,[PURTI].[TI050]
                                    ,[PURTI].[TI051]
                                    ,[PURTI].[TI052]
                                    ,[PURTI].[TI053]
                                    ,[PURTI].[TI054]
                                    ,[PURTI].[TI055]
                                    ,[PURTI].[TI056]
                                    ,[PURTI].[TI057]
                                    ,[PURTI].[TI058]
                                    ,[PURTI].[TI059]
                                    ,[PURTI].[TI060]
                                    ,[PURTI].[TI061]
                                    ,[PURTI].[TI062]
                                    ,[PURTI].[TI063]
                                    ,[PURTI].[TI064]
                                    ,[PURTI].[TI065]
                                    ,[PURTI].[TI066]
                                    ,[PURTI].[TI067]
                                    ,[PURTI].[TI068]
                                    ,[PURTI].[TI069]
                                    ,[PURTI].[TI070]
                                    ,[PURTI].[TI071]
                                    ,[PURTI].[TI072]
                                    ,[PURTI].[UDF01] AS 'PURTIUDF01'
                                    ,[PURTI].[UDF02] AS 'PURTIUDF02'
                                    ,[PURTI].[UDF03] AS 'PURTIUDF03'
                                    ,[PURTI].[UDF04] AS 'PURTIUDF04'
                                    ,[PURTI].[UDF05] AS 'PURTIUDF05'
                                    ,[PURTI].[UDF06] AS 'PURTIUDF06'
                                    ,[PURTI].[UDF07] AS 'PURTIUDF07'
                                    ,[PURTI].[UDF08] AS 'PURTIUDF08'
                                    ,[PURTI].[UDF09] AS 'PURTIUDF09'
                                    ,[PURTI].[UDF10] AS 'PURTIUDF10'
                                    ,[PURTJ].[TJ001]
                                    ,[PURTJ].[TJ002]
                                    ,[PURTJ].[TJ003]
                                    ,[PURTJ].[TJ004]
                                    ,[PURTJ].[TJ005]
                                    ,[PURTJ].[TJ006]
                                    ,[PURTJ].[TJ007]
                                    ,[PURTJ].[TJ008]
                                    ,[PURTJ].[TJ009]
                                    ,[PURTJ].[TJ010]
                                    ,[PURTJ].[TJ011]
                                    ,[PURTJ].[TJ012]
                                    ,[PURTJ].[TJ013]
                                    ,[PURTJ].[TJ014]
                                    ,[PURTJ].[TJ015]
                                    ,[PURTJ].[TJ016]
                                    ,[PURTJ].[TJ017]
                                    ,[PURTJ].[TJ018]
                                    ,[PURTJ].[TJ019]
                                    ,[PURTJ].[TJ020]
                                    ,[PURTJ].[TJ021]
                                    ,[PURTJ].[TJ022]
                                    ,[PURTJ].[TJ023]
                                    ,[PURTJ].[TJ024]
                                    ,[PURTJ].[TJ025]
                                    ,[PURTJ].[TJ026]
                                    ,[PURTJ].[TJ027]
                                    ,[PURTJ].[TJ028]
                                    ,[PURTJ].[TJ029]
                                    ,[PURTJ].[TJ030]
                                    ,[PURTJ].[TJ031]
                                    ,[PURTJ].[TJ032]
                                    ,[PURTJ].[TJ033]
                                    ,[PURTJ].[TJ034]
                                    ,[PURTJ].[TJ035]
                                    ,[PURTJ].[TJ036]
                                    ,[PURTJ].[TJ037]
                                    ,[PURTJ].[TJ038]
                                    ,[PURTJ].[TJ039]
                                    ,[PURTJ].[TJ040]
                                    ,[PURTJ].[TJ041]
                                    ,[PURTJ].[TJ042]
                                    ,[PURTJ].[TJ043]
                                    ,[PURTJ].[TJ044]
                                    ,[PURTJ].[TJ045]
                                    ,[PURTJ].[TJ046]
                                    ,[PURTJ].[TJ047]
                                    ,[PURTJ].[TJ048]
                                    ,[PURTJ].[TJ049]
                                    ,[PURTJ].[TJ050]
                                    ,[PURTJ].[TJ051]
                                    ,[PURTJ].[TJ052]
                                    ,[PURTJ].[TJ053]
                                    ,[PURTJ].[TJ054]
                                    ,[PURTJ].[TJ055]
                                    ,[PURTJ].[TJ056]
                                    ,[PURTJ].[TJ057]
                                    ,[PURTJ].[TJ058]
                                    ,[PURTJ].[TJ059]
                                    ,[PURTJ].[TJ060]
                                    ,[PURTJ].[TJ061]
                                    ,[PURTJ].[TJ062]
                                    ,[PURTJ].[TJ063]
                                    ,[PURTJ].[TJ064]
                                    ,[PURTJ].[TJ065]
                                    ,[PURTJ].[TJ066]
                                    ,[PURTJ].[TJ067]
                                    ,[PURTJ].[TJ068]
                                    ,[PURTJ].[TJ069]
                                    ,[PURTJ].[TJ070]
                                    ,[PURTJ].[TJ071]
                                    ,[PURTJ].[TJ072]
                                    ,[PURTJ].[TJ073]
                                    ,[PURTJ].[TJ074]
                                    ,[PURTJ].[TJ075]
                                    ,[PURTJ].[TJ076]
                                    ,[PURTJ].[TJ077]
                                    ,[PURTJ].[TJ078]
                                    ,[PURTJ].[TJ079]
                                    ,[PURTJ].[TJ080]
                                    ,[PURTJ].[TJ081]
                                    ,[PURTJ].[UDF01] AS 'PURTJUDF01'
                                    ,[PURTJ].[UDF02] AS 'PURTJUDF02'
                                    ,[PURTJ].[UDF03] AS 'PURTJUDF03'
                                    ,[PURTJ].[UDF04] AS 'PURTJUDF04'
                                    ,[PURTJ].[UDF05] AS 'PURTJUDF05'
                                    ,[PURTJ].[UDF06] AS 'PURTJUDF06'
                                    ,[PURTJ].[UDF07] AS 'PURTJUDF07'
                                    ,[PURTJ].[UDF08] AS 'PURTJUDF08'
                                    ,[PURTJ].[UDF09] AS 'PURTJUDF09'
                                    ,[PURTJ].[UDF10] AS 'PURTJUDF10'
                                    ,[TB_EB_USER].USER_GUID,NAME
                                    ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=PURTJ.CREATOR) AS 'MV002'

                                    FROM [TK].dbo.PURMA,[TK].dbo.PURTI,[TK].dbo.PURTJ
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT= PURTJ.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE 1=1
                                    AND TI001=TJ001 AND TI002=TJ002
                                    AND TI004=MA001
                                    AND TI001='{0}' AND TJ002='{1}'
                                    ) AS TEMP

                                 ", TI001, TI002);

                    using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    using (SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder(adapter1))
                    {
                        ds1.Clear();
                        adapter1.Fill(ds1, "ds1");
                    }
                }

                return ds1.Tables["ds1"].Rows.Count > 0 ? ds1.Tables["ds1"] : null;
            }
            catch
            {
                return null;
            }
        }


        public void UPDATE_PURTI_UDF01()
        {
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
            {
                sqlConn.Open();
                using (SqlTransaction tran = sqlConn.BeginTransaction())
                using (SqlCommand cmd = sqlConn.CreateCommand())
                {
                    try
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                            UPDATE [TK].dbo.PURTI
                                            SET UDF01 = 'UOF'
                                            WHERE UDF01 IN ('Y','y')
                                        ";

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback(); // 交易取消
                        }
                        else
                        {
                            tran.Commit();   // 交易提交
                        }
                    }
                    catch
                    {
                        tran.Rollback(); // 發生例外也回滾
                    }
                }
            }
        }


        //ERP COP30.銷貨單 > 轉入UOF簽核
        public void NEW_COPTGCOPTH()
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp22"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();

                //TL006='N' AND (UDF01 IN ('Y','y') ) 
                sbSql.AppendFormat(@" 
                                    SELECT TG001,TG002,UDF01
                                    FROM [TK].dbo.COPTG
                                    WHERE TG023='N'
                                    AND UDF03 IN ('Y','y')
                                    ORDER BY TG001,TG002

                                    ");

                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");


                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        ADD_COPTGCOPTH_TB_WKF_EXTERNAL_TASK(dr["TG001"].ToString().Trim(), dr["TG002"].ToString().Trim());
                    }
                }
                else
                {

                }
            }
            catch (Exception EX)
            {

            }
            finally
            {
                sqlConn.Close();
            }

            UPDATE_COPTG_UDF01();
        }
        public void ADD_COPTGCOPTH_TB_WKF_EXTERNAL_TASK(string TG001, string TG002)
        {
            DataTable DT = SEARCH_COPTG_COPTH(TG001, TG002);
            // 如果沒有資料就直接結束
            if (DT == null || DT.Rows.Count == 0)
            {
                return;
            }
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TG001"].ToString().Trim() + DT.Rows[0]["TG002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORM_ID = SEARCHFORM_UOF_VERSION_ID("COP30.銷貨單");
            if (!string.IsNullOrEmpty(FORM_ID))
            {
                Form.SetAttribute("formVersionId", FORM_ID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 使用你現有 AddFieldItem 函式
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG001", DT.Rows[0]["TG001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG002", DT.Rows[0]["TG002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG003", DT.Rows[0]["TG003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG004", DT.Rows[0]["TG004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG005", DT.Rows[0]["TG005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG006", DT.Rows[0]["TG006"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG007", DT.Rows[0]["TG007"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG008", DT.Rows[0]["TG008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG014", DT.Rows[0]["TG014"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG015", DT.Rows[0]["TG015"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG016", DT.Rows[0]["TG016"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TG017", DT.Rows[0]["TG017"].ToString(), fillerName, fillerUserGuid, account);

            // DataGrid 範例
            AddFieldItem(xmlDoc, FormFieldValue, "COPTH", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode PURTD = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='COPTH']");
            PURTD.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                // 使用你現有 AppendCellToRow
                AppendCellToRow(xmlDoc, Row, od, "TH003");
                AppendCellToRow(xmlDoc, Row, od, "TH004");
                AppendCellToRow(xmlDoc, Row, od, "TH005");
                AppendCellToRow(xmlDoc, Row, od, "TH006");
                AppendCellToRow(xmlDoc, Row, od, "TH007");
                AppendCellToRow(xmlDoc, Row, od, "TH008");
                AppendCellToRow(xmlDoc, Row, od, "TH024");
                AppendCellToRow(xmlDoc, Row, od, "TH009");
                AppendCellToRow(xmlDoc, Row, od, "TH012");
                AppendCellToRow(xmlDoc, Row, od, "TH013");
                AppendCellToRow(xmlDoc, Row, od, "TH037");
                AppendCellToRow(xmlDoc, Row, od, "TH038");
                AppendCellToRow(xmlDoc, Row, od, "TH014");
                AppendCellToRow(xmlDoc, Row, od, "TH015");
                AppendCellToRow(xmlDoc, Row, od, "TH016");

                rowscounts++;
                XmlNode DataGridS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='COPTH']/DataGrid");
                DataGridS.AppendChild(Row);
            }

            // 寫入 DB
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
            string connectionString = sqlsb.ConnectionString;

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                               (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                               VALUES (NEWID(),@XML,2,'{0}')",  EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = xmlDoc.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception EX)
            {
                // 可視需求加錯誤處理
            }
        }

        public DataTable SEARCH_COPTG_COPTH(string TG001, string TG002)
        {
            DataTable dt = new DataTable();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    StringBuilder sbSql = new StringBuilder();

                    sbSql.Append(@"
                                    SELECT *
                                    ,USER_GUID,NAME
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    FROM 
                                    (
                                    SELECT 
                                     [COPTG].[COMPANY]
                                    ,[COPTG].[CREATOR]
                                    ,[COPTG].[USR_GROUP]
                                    ,[COPTG].[CREATE_DATE]
                                    ,[COPTG].[MODIFIER]
                                    ,[COPTG].[MODI_DATE]
                                    ,[COPTG].[FLAG]
                                    ,[COPTG].[CREATE_TIME]
                                    ,[COPTG].[MODI_TIME]
                                    ,[COPTG].[TRANS_TYPE]
                                    ,[COPTG].[TRANS_NAME]
                                    ,[COPTG].[sync_date]
                                    ,[COPTG].[sync_time]
                                    ,[COPTG].[sync_mark]
                                    ,[COPTG].[sync_count]
                                    ,[COPTG].[DataUser]
                                    ,[COPTG].[DataGroup]
                                    ,[COPTG].[TG001]
                                    ,[COPTG].[TG002]
                                    ,[COPTG].[TG003]
                                    ,[COPTG].[TG004]
                                    ,[COPTG].[TG005]
                                    ,[COPTG].[TG006]
                                    ,[COPTG].[TG007]
                                    ,[COPTG].[TG008]
                                    ,[COPTG].[TG009]
                                    ,[COPTG].[TG010]
                                    ,[COPTG].[TG011]
                                    ,[COPTG].[TG012]
                                    ,[COPTG].[TG013]
                                    ,[COPTG].[TG014]
                                    ,[COPTG].[TG015]
                                    ,[COPTG].[TG016]
                                    ,[COPTG].[TG017]
                                    ,[COPTG].[TG018]
                                    ,[COPTG].[TG019]
                                    ,[COPTG].[TG020]
                                    ,[COPTG].[TG021]
                                    ,[COPTG].[TG022]
                                    ,[COPTG].[TG023]
                                    ,[COPTG].[TG024]
                                    ,[COPTG].[TG025]
                                    ,[COPTG].[TG026]
                                    ,[COPTG].[TG027]
                                    ,[COPTG].[TG028]
                                    ,[COPTG].[TG029]
                                    ,[COPTG].[TG030]
                                    ,[COPTG].[TG031]
                                    ,[COPTG].[TG032]
                                    ,[COPTG].[TG033]
                                    ,[COPTG].[TG034]
                                    ,[COPTG].[TG035]
                                    ,[COPTG].[TG036]
                                    ,[COPTG].[TG037]
                                    ,[COPTG].[TG038]
                                    ,[COPTG].[TG039]
                                    ,[COPTG].[TG040]
                                    ,[COPTG].[TG041]
                                    ,[COPTG].[TG042]
                                    ,[COPTG].[TG043]
                                    ,[COPTG].[TG044]
                                    ,[COPTG].[TG045]
                                    ,[COPTG].[TG046]
                                    ,[COPTG].[TG047]
                                    ,[COPTG].[TG048]
                                    ,[COPTG].[TG049]
                                    ,[COPTG].[TG050]
                                    ,[COPTG].[TG051]
                                    ,[COPTG].[TG052]
                                    ,[COPTG].[TG053]
                                    ,[COPTG].[TG054]
                                    ,[COPTG].[TG055]
                                    ,[COPTG].[TG056]
                                    ,[COPTG].[TG057]
                                    ,[COPTG].[TG058]
                                    ,[COPTG].[TG059]
                                    ,[COPTG].[TG060]
                                    ,[COPTG].[TG061]
                                    ,[COPTG].[TG062]
                                    ,[COPTG].[TG063]
                                    ,[COPTG].[TG064]
                                    ,[COPTG].[TG065]
                                    ,[COPTG].[TG066]
                                    ,[COPTG].[TG067]
                                    ,[COPTG].[TG068]
                                    ,[COPTG].[TG069]
                                    ,[COPTG].[TG070]
                                    ,[COPTG].[TG071]
                                    ,[COPTG].[TG072]
                                    ,[COPTG].[TG073]
                                    ,[COPTG].[TG074]
                                    ,[COPTG].[TG075]
                                    ,[COPTG].[TG076]
                                    ,[COPTG].[TG077]
                                    ,[COPTG].[TG078]
                                    ,[COPTG].[TG079]
                                    ,[COPTG].[TG080]
                                    ,[COPTG].[TG081]
                                    ,[COPTG].[TG082]
                                    ,[COPTG].[TG083]
                                    ,[COPTG].[TG084]
                                    ,[COPTG].[TG085]
                                    ,[COPTG].[TG086]
                                    ,[COPTG].[TG087]
                                    ,[COPTG].[TG088]
                                    ,[COPTG].[TG089]
                                    ,[COPTG].[TG090]
                                    ,[COPTG].[TG091]
                                    ,[COPTG].[TG092]
                                    ,[COPTG].[TG093]
                                    ,[COPTG].[TG094]
                                    ,[COPTG].[TG095]
                                    ,[COPTG].[TG096]
                                    ,[COPTG].[TG097]
                                    ,[COPTG].[TG098]
                                    ,[COPTG].[TG099]
                                    ,[COPTG].[TG100]
                                    ,[COPTG].[TG101]
                                    ,[COPTG].[TG102]
                                    ,[COPTG].[TG103]
                                    ,[COPTG].[TG104]
                                    ,[COPTG].[TG105]
                                    ,[COPTG].[TG106]
                                    ,[COPTG].[TG107]
                                    ,[COPTG].[TG108]
                                    ,[COPTG].[TG109]
                                    ,[COPTG].[TG110]
                                    ,[COPTG].[TG111]
                                    ,[COPTG].[TG112]
                                    ,[COPTG].[TG113]
                                    ,[COPTG].[TG114]
                                    ,[COPTG].[TG115]
                                    ,[COPTG].[TG116]
                                    ,[COPTG].[TG117]
                                    ,[COPTG].[TG118]
                                    ,[COPTG].[TG119]
                                    ,[COPTG].[TG120]
                                    ,[COPTG].[TG121]
                                    ,[COPTG].[TG122]
                                    ,[COPTG].[TG123]
                                    ,[COPTG].[TG124]
                                    ,[COPTG].[TG125]
                                    ,[COPTG].[TG126]
                                    ,[COPTG].[TG127]
                                    ,[COPTG].[TG128]
                                    ,[COPTG].[TG129]
                                    ,[COPTG].[TG130]
                                    ,[COPTG].[TG131]
                                    ,[COPTG].[TG132]
                                    ,[COPTG].[TG133]
                                    ,[COPTG].[TG134]
                                    ,[COPTG].[TG135]
                                    ,[COPTG].[TG136]
                                    ,[COPTG].[TG137]
                                    ,[COPTG].[TG138]
                                    ,[COPTG].[TG139]
                                    ,[COPTG].[TG140]
                                    ,[COPTG].[TG141]
                                    ,[COPTG].[TG142]
                                    ,[COPTG].[TG143]
                                    ,[COPTG].[TG144]
                                    ,[COPTG].[TG145]
                                    ,[COPTG].[TG146]
                                    ,[COPTG].[TG147]
                                    ,[COPTG].[TG148]
                                    ,[COPTG].[TG149]
                                    ,[COPTG].[TG150]
                                    ,[COPTG].[TG151]
                                    ,[COPTG].[TG152]
                                    ,[COPTG].[TG153]
                                    ,[COPTG].[TG154]
                                    ,[COPTG].[TG155]
                                    ,[COPTG].[TG156]
                                    ,[COPTG].[TG157]
                                    ,[COPTG].[TG158]
                                    ,[COPTG].[TG159]
                                    ,[COPTG].[TG160]
                                    ,[COPTG].[TG161]
                                    ,[COPTG].[TG162]
                                    ,[COPTG].[TG163]
                                    ,[COPTG].[UDF01] AS 'COPTGUDF01'
                                    ,[COPTG].[UDF02] AS 'COPTGUDF02'
                                    ,[COPTG].[UDF03] AS 'COPTGUDF03'
                                    ,[COPTG].[UDF04] AS 'COPTGUDF04'
                                    ,[COPTG].[UDF05] AS 'COPTGUDF05'
                                    ,[COPTG].[UDF06] AS 'COPTGUDF06'
                                    ,[COPTG].[UDF07] AS 'COPTGUDF07'
                                    ,[COPTG].[UDF08] AS 'COPTGUDF08'
                                    ,[COPTG].[UDF09] AS 'COPTGUDF09'
                                    ,[COPTG].[UDF10] AS 'COPTGUDF10'
                                    ,[COPTH].[TH001]
                                    ,[COPTH].[TH002]
                                    ,[COPTH].[TH003]
                                    ,[COPTH].[TH004]
                                    ,[COPTH].[TH005]
                                    ,[COPTH].[TH006]
                                    ,[COPTH].[TH007]
                                    ,[COPTH].[TH008]
                                    ,[COPTH].[TH009]
                                    ,[COPTH].[TH010]
                                    ,[COPTH].[TH011]
                                    ,[COPTH].[TH012]
                                    ,[COPTH].[TH013]
                                    ,[COPTH].[TH014]
                                    ,[COPTH].[TH015]
                                    ,[COPTH].[TH016]
                                    ,[COPTH].[TH017]
                                    ,[COPTH].[TH018]
                                    ,[COPTH].[TH019]
                                    ,[COPTH].[TH020]
                                    ,[COPTH].[TH021]
                                    ,[COPTH].[TH022]
                                    ,[COPTH].[TH023]
                                    ,[COPTH].[TH024]
                                    ,[COPTH].[TH025]
                                    ,[COPTH].[TH026]
                                    ,[COPTH].[TH027]
                                    ,[COPTH].[TH028]
                                    ,[COPTH].[TH029]
                                    ,[COPTH].[TH030]
                                    ,[COPTH].[TH031]
                                    ,[COPTH].[TH032]
                                    ,[COPTH].[TH033]
                                    ,[COPTH].[TH034]
                                    ,[COPTH].[TH035]
                                    ,[COPTH].[TH036]
                                    ,[COPTH].[TH037]
                                    ,[COPTH].[TH038]
                                    ,[COPTH].[TH039]
                                    ,[COPTH].[TH040]
                                    ,[COPTH].[TH041]
                                    ,[COPTH].[TH042]
                                    ,[COPTH].[TH043]
                                    ,[COPTH].[TH044]
                                    ,[COPTH].[TH045]
                                    ,[COPTH].[TH046]
                                    ,[COPTH].[TH047]
                                    ,[COPTH].[TH048]
                                    ,[COPTH].[TH049]
                                    ,[COPTH].[TH050]
                                    ,[COPTH].[TH051]
                                    ,[COPTH].[TH052]
                                    ,[COPTH].[TH053]
                                    ,[COPTH].[TH054]
                                    ,[COPTH].[TH055]
                                    ,[COPTH].[TH056]
                                    ,[COPTH].[TH057]
                                    ,[COPTH].[TH058]
                                    ,[COPTH].[TH059]
                                    ,[COPTH].[TH060]
                                    ,[COPTH].[TH061]
                                    ,[COPTH].[TH062]
                                    ,[COPTH].[TH063]
                                    ,[COPTH].[TH064]
                                    ,[COPTH].[TH065]
                                    ,[COPTH].[TH066]
                                    ,[COPTH].[TH067]
                                    ,[COPTH].[TH068]
                                    ,[COPTH].[TH069]
                                    ,[COPTH].[TH070]
                                    ,[COPTH].[TH071]
                                    ,[COPTH].[TH072]
                                    ,[COPTH].[TH073]
                                    ,[COPTH].[TH074]
                                    ,[COPTH].[TH075]
                                    ,[COPTH].[TH076]
                                    ,[COPTH].[TH077]
                                    ,[COPTH].[TH078]
                                    ,[COPTH].[TH079]
                                    ,[COPTH].[TH080]
                                    ,[COPTH].[TH081]
                                    ,[COPTH].[TH082]
                                    ,[COPTH].[TH083]
                                    ,[COPTH].[TH084]
                                    ,[COPTH].[TH085]
                                    ,[COPTH].[TH086]
                                    ,[COPTH].[TH087]
                                    ,[COPTH].[TH088]
                                    ,[COPTH].[TH089]
                                    ,[COPTH].[TH090]
                                    ,[COPTH].[TH091]
                                    ,[COPTH].[TH092]
                                    ,[COPTH].[TH093]
                                    ,[COPTH].[TH094]
                                    ,[COPTH].[TH095]
                                    ,[COPTH].[TH096]
                                    ,[COPTH].[TH097]
                                    ,[COPTH].[TH098]
                                    ,[COPTH].[TH099]
                                    ,[COPTH].[TH100]
                                    ,[COPTH].[TH101]
                                    ,[COPTH].[TH102]
                                    ,[COPTH].[TH103]
                                    ,[COPTH].[TH104]
                                    ,[COPTH].[TH105]
                                    ,[COPTH].[TH106]
                                    ,[COPTH].[TH107]
                                    ,[COPTH].[TH108]
                                    ,[COPTH].[TH109]
                                    ,[COPTH].[TH110]
                                    ,[COPTH].[TH111]
                                    ,[COPTH].[TH112]
                                    ,[COPTH].[TH113]
                                    ,[COPTH].[TH114]
                                    ,[COPTH].[TH115]
                                    ,[COPTH].[TH116]
                                    ,[COPTH].[TH117]
                                    ,[COPTH].[TH118]
                                    ,[COPTH].[TH119]
                                    ,[COPTH].[TH120]
                                    ,[COPTH].[TH121]
                                    ,[COPTH].[TH122]
                                    ,[COPTH].[TH123]
                                    ,[COPTH].[TH124]
                                    ,[COPTH].[TH125]
                                    ,[COPTH].[TH126]
                                    ,[COPTH].[TH127]
                                    ,[COPTH].[UDF01] AS 'COPTHUDF01'
                                    ,[COPTH].[UDF02] AS 'COPTHUDF02'
                                    ,[COPTH].[UDF03] AS 'COPTHUDF03'
                                    ,[COPTH].[UDF04] AS 'COPTHUDF04'
                                    ,[COPTH].[UDF05] AS 'COPTHUDF05'
                                    ,[COPTH].[UDF06] AS 'COPTHUDF06'
                                    ,[COPTH].[UDF07] AS 'COPTHUDF07'
                                    ,[COPTH].[UDF08] AS 'COPTHUDF08'
                                    ,[COPTH].[UDF09] AS 'COPTHUDF09'
                                    ,[COPTH].[UDF10] AS 'COPTHUDF10'
                                    ,[TB_EB_USER].USER_GUID,NAME
                                    ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=COPTG.CREATOR) AS 'MV002'

                                    FROM [TK].dbo.COPMA,[TK].dbo.COPTG,[TK].dbo.COPTH
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT= COPTH.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE 1=1
                                    AND TG001=TH001 AND TG002=TH002
                                    AND TG004=MA001
                                    AND TG001=@TG001 AND TG002=@TG002
                                    ) AS TEMP
                                    
                                ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        adapter.SelectCommand.Parameters.AddWithValue("@TG001", TG001);
                        adapter.SelectCommand.Parameters.AddWithValue("@TG002", TG002);

                        adapter.Fill(dt);
                    }
                }

                return dt.Rows.Count > 0 ? dt : null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"SEARCH_COPTG_COPTH Error: {ex.Message}");
                return null;
            }
        }

       
        public void UPDATE_COPTG_UDF01()
        {
            try
            {
                // 解密連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                        UPDATE [TK].dbo.COPTG
                                        SET UDF03 = 'UOF'
                                        WHERE UDF03 IN ('Y','y')";

                        try
                        {
                            int result = cmd.ExecuteNonQuery();

                            if (result > 0)
                                tran.Commit();
                            else
                                tran.Rollback();
                        }
                        catch (Exception ex)
                        {
                            tran.Rollback();
                            Console.WriteLine($"Error in UPDATE_COPTG_UDF01: {ex.Message}");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Connection error in UPDATE_COPTG_UDF01: {ex.Message}");
            }
        }

        //ERP COP40.銷退單>轉入UOF簽核
        public void NEW_COPTICOPTJ()
        {
            try
            {
                //20210902密
                Class1 TKID = new Class1(); //用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    DataSet ds1 = new DataSet();
                    SqlDataAdapter adapter1 = new SqlDataAdapter();

                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.Append(@"
                                    SELECT TI001,TI002,UDF01
                                    FROM [TK].dbo.COPTI
                                    WHERE TI019='N'
                                      AND UDF01 IN ('Y','y')
                                    ORDER BY TI001,TI002
                                ");

                    adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                    sqlConn.Open();
                    ds1.Clear();
                    adapter1.Fill(ds1, "ds1");

                    if (ds1.Tables["ds1"].Rows.Count > 0)
                    {
                        foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                        {
                            string TI001 = dr["TI001"].ToString().Trim();
                            string TI002 = dr["TI002"].ToString().Trim();

                            ADD_COPTICOPTJ_TB_WKF_EXTERNAL_TASK(TI001,TI002);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 可以視情況加上 log
            }
            finally
            {
                if (sqlConn != null && sqlConn.State == ConnectionState.Open)
                {
                    sqlConn.Close();
                }
            }

            UPDATE_COPTI_UDF01();
        }

        public void ADD_COPTICOPTJ_TB_WKF_EXTERNAL_TASK(string TI001, string TI002)
        {
            DataTable DT = SEARCH_COPTI_COPTJ(TI001, TI002);
            if (DT == null || DT.Rows.Count == 0)
            {
                return;
            }
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TI001"].ToString().Trim() + DT.Rows[0]["TI002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string PURTGID = SEARCHFORM_UOF_VERSION_ID("COP40.銷退單");
            if (!string.IsNullOrEmpty(PURTGID))
            {
                Form.SetAttribute("formVersionId", PURTGID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 逐一加入 FieldItem
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI001", DT.Rows[0]["TI001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI002", DT.Rows[0]["TI002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI003", DT.Rows[0]["TI003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI004", DT.Rows[0]["TI004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI021", DT.Rows[0]["TI021"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI015", DT.Rows[0]["TI015"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI014", DT.Rows[0]["TI014"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI017", DT.Rows[0]["TI017"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI012", DT.Rows[0]["TI012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI013", DT.Rows[0]["TI013"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI008", DT.Rows[0]["TI008"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI009", DT.Rows[0]["TI009"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI005", DT.Rows[0]["TI005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI006", DT.Rows[0]["TI006"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI007", DT.Rows[0]["TI007"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TI020", DT.Rows[0]["TI020"].ToString(), fillerName, fillerUserGuid, account);

            // DataGrid
            AddFieldItem(xmlDoc, FormFieldValue, "COPTJ", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode dgNode = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='COPTJ']");
            dgNode.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TJ003");
                AppendCellToRow(xmlDoc, Row, od, "TJ030");
                AppendCellToRow(xmlDoc, Row, od, "TJ004");
                AppendCellToRow(xmlDoc, Row, od, "TJ005");
                AppendCellToRow(xmlDoc, Row, od, "TJ006");
                AppendCellToRow(xmlDoc, Row, od, "TJ007");
                AppendCellToRow(xmlDoc, Row, od, "TJ008");
                AppendCellToRow(xmlDoc, Row, od, "TJ013");
                AppendCellToRow(xmlDoc, Row, od, "TJ014");
                AppendCellToRow(xmlDoc, Row, od, "TJ011");
                AppendCellToRow(xmlDoc, Row, od, "TJ012");
                AppendCellToRow(xmlDoc, Row, od, "TJ033");
                AppendCellToRow(xmlDoc, Row, od, "TJ034");
                AppendCellToRow(xmlDoc, Row, od, "TJ015");
                AppendCellToRow(xmlDoc, Row, od, "TJ016");
                AppendCellToRow(xmlDoc, Row, od, "TJ017");
                AppendCellToRow(xmlDoc, Row, od, "TJ018");
                AppendCellToRow(xmlDoc, Row, od, "TJ019");
                AppendCellToRow(xmlDoc, Row, od, "TJ020");

                rowscounts++;

                XmlNode dgS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='COPTJ']/DataGrid");
                dgS.AppendChild(Row);
            }

            // 寫入 DB
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
            string connectionString = sqlsb.ConnectionString;

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                 VALUES (NEWID(),@XML,2,'{0}')", EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = xmlDoc.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch
            {
                // 可加錯誤處理
            }
        }

        public DataTable SEARCH_COPTI_COPTJ(string TI001, string TI002)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                // 20210902密
                Class1 TKID = new Class1(); // 用 new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"
                                    SELECT *
                                          ,USER_GUID,NAME
                                          ,(SELECT TOP 1 GROUP_ID 
                                              FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                             WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS GROUP_ID
                                          ,(SELECT TOP 1 TITLE_ID 
                                              FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                             WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS TITLE_ID
                                    FROM 
                                    (
                                         SELECT 
                                        [COPTI].[COMPANY]
                                        ,[COPTI].[CREATOR]
                                        ,[COPTI].[USR_GROUP]
                                        ,[COPTI].[CREATE_DATE]
                                        ,[COPTI].[MODIFIER]
                                        ,[COPTI].[MODI_DATE]
                                        ,[COPTI].[FLAG]
                                        ,[COPTI].[CREATE_TIME]
                                        ,[COPTI].[MODI_TIME]
                                        ,[COPTI].[TRANS_TYPE]
                                        ,[COPTI].[TRANS_NAME]
                                        ,[COPTI].[sync_date]
                                        ,[COPTI].[sync_time]
                                        ,[COPTI].[sync_mark]
                                        ,[COPTI].[sync_count]
                                        ,[COPTI].[DataUser]
                                        ,[COPTI].[DataGroup]
                                        ,[COPTI].[TI001]
                                        ,[COPTI].[TI002]
                                        ,[COPTI].[TI003]
                                        ,[COPTI].[TI004]
                                        ,[COPTI].[TI005]
                                        ,[COPTI].[TI006]
                                        ,[COPTI].[TI007]
                                        ,[COPTI].[TI008]
                                        ,[COPTI].[TI009]
                                        ,[COPTI].[TI010]
                                        ,[COPTI].[TI011]
                                        ,[COPTI].[TI012]
                                        ,[COPTI].[TI013]
                                        ,[COPTI].[TI014]
                                        ,[COPTI].[TI015]
                                        ,[COPTI].[TI016]
                                        ,[COPTI].[TI017]
                                        ,[COPTI].[TI018]
                                        ,[COPTI].[TI019]
                                        ,[COPTI].[TI020]
                                        ,[COPTI].[TI021]
                                        ,[COPTI].[TI022]
                                        ,[COPTI].[TI023]
                                        ,[COPTI].[TI024]
                                        ,[COPTI].[TI025]
                                        ,[COPTI].[TI026]
                                        ,[COPTI].[TI027]
                                        ,[COPTI].[TI028]
                                        ,[COPTI].[TI029]
                                        ,[COPTI].[TI030]
                                        ,[COPTI].[TI031]
                                        ,[COPTI].[TI032]
                                        ,[COPTI].[TI033]
                                        ,[COPTI].[TI034]
                                        ,[COPTI].[TI035]
                                        ,[COPTI].[TI036]
                                        ,[COPTI].[TI037]
                                        ,[COPTI].[TI038]
                                        ,[COPTI].[TI039]
                                        ,[COPTI].[TI040]
                                        ,[COPTI].[TI041]
                                        ,[COPTI].[TI042]
                                        ,[COPTI].[TI043]
                                        ,[COPTI].[TI044]
                                        ,[COPTI].[TI045]
                                        ,[COPTI].[TI046]
                                        ,[COPTI].[TI047]
                                        ,[COPTI].[TI048]
                                        ,[COPTI].[TI049]
                                        ,[COPTI].[TI050]
                                        ,[COPTI].[TI051]
                                        ,[COPTI].[TI052]
                                        ,[COPTI].[TI053]
                                        ,[COPTI].[TI054]
                                        ,[COPTI].[TI055]
                                        ,[COPTI].[TI056]
                                        ,[COPTI].[TI057]
                                        ,[COPTI].[TI058]
                                        ,[COPTI].[TI059]
                                        ,[COPTI].[TI060]
                                        ,[COPTI].[TI061]
                                        ,[COPTI].[TI062]
                                        ,[COPTI].[TI063]
                                        ,[COPTI].[TI064]
                                        ,[COPTI].[TI065]
                                        ,[COPTI].[TI066]
                                        ,[COPTI].[TI067]
                                        ,[COPTI].[TI068]
                                        ,[COPTI].[TI069]
                                        ,[COPTI].[TI070]
                                        ,[COPTI].[TI071]
                                        ,[COPTI].[TI072]
                                        ,[COPTI].[TI073]
                                        ,[COPTI].[TI074]
                                        ,[COPTI].[TI075]
                                        ,[COPTI].[TI076]
                                        ,[COPTI].[TI077]
                                        ,[COPTI].[TI078]
                                        ,[COPTI].[TI079]
                                        ,[COPTI].[TI080]
                                        ,[COPTI].[TI081]
                                        ,[COPTI].[TI082]
                                        ,[COPTI].[TI083]
                                        ,[COPTI].[TI084]
                                        ,[COPTI].[TI085]
                                        ,[COPTI].[TI086]
                                        ,[COPTI].[TI087]
                                        ,[COPTI].[TI088]
                                        ,[COPTI].[TI089]
                                        ,[COPTI].[TI090]
                                        ,[COPTI].[TI091]
                                        ,[COPTI].[TI092]
                                        ,[COPTI].[TI093]
                                        ,[COPTI].[TI094]
                                        ,[COPTI].[TI095]
                                        ,[COPTI].[TI096]
                                        ,[COPTI].[TI097]
                                        ,[COPTI].[TI098]
                                        ,[COPTI].[TI099]
                                        ,[COPTI].[TI100]
                                        ,[COPTI].[TI101]
                                        ,[COPTI].[TI102]
                                        ,[COPTI].[TI103]
                                        ,[COPTI].[TI104]
                                        ,[COPTI].[TI105]
                                        ,[COPTI].[TI106]
                                        ,[COPTI].[TI107]
                                        ,[COPTI].[UDF01] AS 'COPTIUDF01'
                                        ,[COPTI].[UDF02] AS 'COPTIUDF02'
                                        ,[COPTI].[UDF03] AS 'COPTIUDF03'
                                        ,[COPTI].[UDF04] AS 'COPTIUDF04'
                                        ,[COPTI].[UDF05] AS 'COPTIUDF05'
                                        ,[COPTI].[UDF06] AS 'COPTIUDF06'
                                        ,[COPTI].[UDF07] AS 'COPTIUDF07'
                                        ,[COPTI].[UDF08] AS 'COPTIUDF08'
                                        ,[COPTI].[UDF09] AS 'COPTIUDF09'
                                        ,[COPTI].[UDF10] AS 'COPTIUDF10'
                                        ,[COPTJ].[TJ001]
                                        ,[COPTJ].[TJ002]
                                        ,[COPTJ].[TJ003]
                                        ,[COPTJ].[TJ004]
                                        ,[COPTJ].[TJ005]
                                        ,[COPTJ].[TJ006]
                                        ,[COPTJ].[TJ007]
                                        ,[COPTJ].[TJ008]
                                        ,[COPTJ].[TJ009]
                                        ,[COPTJ].[TJ010]
                                        ,[COPTJ].[TJ011]
                                        ,[COPTJ].[TJ012]
                                        ,[COPTJ].[TJ013]
                                        ,[COPTJ].[TJ014]
                                        ,[COPTJ].[TJ015]
                                        ,[COPTJ].[TJ016]
                                        ,[COPTJ].[TJ017]
                                        ,[COPTJ].[TJ018]
                                        ,[COPTJ].[TJ019]
                                        ,[COPTJ].[TJ020]
                                        ,[COPTJ].[TJ021]
                                        ,[COPTJ].[TJ022]
                                        ,[COPTJ].[TJ023]
                                        ,[COPTJ].[TJ024]
                                        ,[COPTJ].[TJ025]
                                        ,[COPTJ].[TJ026]
                                        ,[COPTJ].[TJ027]
                                        ,[COPTJ].[TJ028]
                                        ,[COPTJ].[TJ029]
                                        ,(CASE WHEN [COPTJ].[TJ030]='1' THEN '銷退'  WHEN [COPTJ].[TJ030]='2' THEN '折讓' ELSE [COPTJ].[TJ030]  END ) AS 'TJ030'
                                        ,[COPTJ].[TJ031]
                                        ,[COPTJ].[TJ032]
                                        ,[COPTJ].[TJ033]
                                        ,[COPTJ].[TJ034]
                                        ,[COPTJ].[TJ035]
                                        ,[COPTJ].[TJ036]
                                        ,[COPTJ].[TJ037]
                                        ,[COPTJ].[TJ038]
                                        ,[COPTJ].[TJ039]
                                        ,[COPTJ].[TJ040]
                                        ,[COPTJ].[TJ041]
                                        ,[COPTJ].[TJ042]
                                        ,[COPTJ].[TJ043]
                                        ,[COPTJ].[TJ044]
                                        ,[COPTJ].[TJ045]
                                        ,[COPTJ].[TJ046]
                                        ,[COPTJ].[TJ047]
                                        ,[COPTJ].[TJ048]
                                        ,[COPTJ].[TJ049]
                                        ,[COPTJ].[TJ050]
                                        ,[COPTJ].[TJ051]
                                        ,[COPTJ].[TJ052]
                                        ,[COPTJ].[TJ053]
                                        ,[COPTJ].[TJ054]
                                        ,[COPTJ].[TJ055]
                                        ,[COPTJ].[TJ056]
                                        ,[COPTJ].[TJ057]
                                        ,[COPTJ].[TJ058]
                                        ,[COPTJ].[TJ059]
                                        ,[COPTJ].[TJ060]
                                        ,[COPTJ].[TJ061]
                                        ,[COPTJ].[TJ062]
                                        ,[COPTJ].[TJ063]
                                        ,[COPTJ].[TJ064]
                                        ,[COPTJ].[TJ065]
                                        ,[COPTJ].[TJ066]
                                        ,[COPTJ].[TJ067]
                                        ,[COPTJ].[TJ068]
                                        ,[COPTJ].[TJ069]
                                        ,[COPTJ].[TJ070]
                                        ,[COPTJ].[TJ071]
                                        ,[COPTJ].[TJ072]
                                        ,[COPTJ].[TJ073]
                                        ,[COPTJ].[TJ074]
                                        ,[COPTJ].[TJ075]
                                        ,[COPTJ].[TJ076]
                                        ,[COPTJ].[TJ077]
                                        ,[COPTJ].[TJ078]
                                        ,[COPTJ].[TJ079]
                                        ,[COPTJ].[TJ080]
                                        ,[COPTJ].[TJ081]
                                        ,[COPTJ].[TJ082]
                                        ,[COPTJ].[TJ083]
                                        ,[COPTJ].[TJ084]
                                        ,[COPTJ].[TJ085]
                                        ,[COPTJ].[TJ086]
                                        ,[COPTJ].[TJ087]
                                        ,[COPTJ].[TJ088]
                                        ,[COPTJ].[TJ089]
                                        ,[COPTJ].[TJ090]
                                        ,[COPTJ].[TJ091]
                                        ,[COPTJ].[TJ092]
                                        ,[COPTJ].[TJ093]
                                        ,[COPTJ].[TJ094]
                                        ,[COPTJ].[TJ095]
                                        ,[COPTJ].[TJ096]
                                        ,[COPTJ].[TJ097]
                                        ,[COPTJ].[TJ098]
                                        ,[COPTJ].[TJ099]
                                        ,[COPTJ].[TJ100]
                                        ,[COPTJ].[TJ101]
                                        ,[COPTJ].[TJ102]
                                        ,[COPTJ].[TJ103]
                                        ,[COPTJ].[TJ104]
                                        ,[COPTJ].[TJ105]
                                        ,[COPTJ].[TJ106]
                                        ,[COPTJ].[TJ107]
                                        ,[COPTJ].[TJ108]
                                        ,[COPTJ].[TJ109]
                                        ,[COPTJ].[TJ110]
                                        ,[COPTJ].[UDF01]  AS 'COPTJUDF01'
                                        ,[COPTJ].[UDF02]  AS 'COPTJUDF02'
                                        ,[COPTJ].[UDF03]  AS 'COPTJUDF03'
                                        ,[COPTJ].[UDF04]  AS 'COPTJUDF04'
                                        ,[COPTJ].[UDF05]  AS 'COPTJUDF05'
                                        ,[COPTJ].[UDF06]  AS 'COPTJUDF06'
                                        ,[COPTJ].[UDF07]  AS 'COPTJUDF07'
                                        ,[COPTJ].[UDF08]  AS 'COPTJUDF08'
                                        ,[COPTJ].[UDF09]  AS 'COPTJUDF09'
                                        ,[COPTJ].[UDF10]  AS 'COPTJUDF10'
                                        ,[TB_EB_USER].USER_GUID,NAME
                                        ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=COPTI.CREATOR) AS 'MV002'

                                        FROM [TK].dbo.COPMA,[TK].dbo.COPTI,[TK].dbo.COPTJ
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT= COPTJ.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        WHERE 1=1
                                        AND TI001=TJ001 AND TI002=TJ002
                                        AND TI004=MA001
                                          AND TI001='{0}' AND TI002='{1}'
                                    ) AS TEMP
                                ", TI001, TI002);

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }


        public void UPDATE_COPTI_UDF01()
        {
            try
            {
                // 建立類別實體解密帳號密碼
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        sbSql.Clear();
                        sbSql.Append(@"
                                    UPDATE [TK].dbo.COPTI
                                    SET UDF01 = 'UOF'
                                    WHERE UDF01 IN ('Y','y')
                                ");

                        cmd.CommandText = sbSql.ToString();
                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback(); // 沒有更新任何資料 → 回滾
                        }
                        else
                        {
                            tran.Commit();   // 更新成功 → 提交交易
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // TODO: 可加入記錄 log 機制
            }
        }

        //ERP-INVI05.庫存異動單>轉入UOF簽核
        public void NEW_INVTAINVTB()
        {
            try
            {
                //20210902密
                Class1 TKID = new Class1(); // 用new建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    DataSet ds1 = new DataSet();
                    SqlDataAdapter adapter1 = new SqlDataAdapter();
                    SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.AppendFormat(@"
                                    SELECT TA001,TA002,UDF02
                                    FROM [TK].dbo.INVTA
                                    WHERE TA006='N'
                                    AND TA009='11'
                                    AND UDF02 IN ('Y','y')
                                    ORDER BY TA001,TA002
                                    ");

                    adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);

                    sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                    sqlConn.Open();
                    ds1.Clear();
                    adapter1.Fill(ds1, "ds1");

                    if (ds1.Tables["ds1"].Rows.Count >= 1)
                    {
                        foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                        {
                            string TA001 = dr["TA001"].ToString().Trim();
                            string TA002 = dr["TA002"].ToString().Trim();
                            ADD_INVTAINVTB_TB_WKF_EXTERNAL_TASK(TA001, TA002);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 這裡你可以加 log，方便除錯
                // e.g. Console.WriteLine(ex.Message);
            }
            finally
            {
                UPDATE_INVTA_UDF02();
            }
        }

        public void ADD_INVTAINVTB_TB_WKF_EXTERNAL_TASK(string TA001, string TA002)
        {
            try
            {
                DataTable DT = SEARCH_INVTA_INVTB(TA001, TA002);
                if (DT == null || DT.Rows.Count == 0) return;

                DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());
                if (DTUPFDEP == null || DTUPFDEP.Rows.Count == 0) return;

                string account = DT.Rows[0]["CREATOR"].ToString();
                string groupId = DT.Rows[0]["GROUP_ID"].ToString();
                string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
                string fillerName = DT.Rows[0]["MV002"].ToString();
                string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

                string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
                string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

                string EXTERNAL_FORM_NBR = DT.Rows[0]["TA001"].ToString().Trim() + DT.Rows[0]["TA002"].ToString().Trim();

                XmlDocument xmlDoc = new XmlDocument();
                XmlElement Form = xmlDoc.CreateElement("Form");

                // 取得表單版本 ID
                string PURTGID = SEARCHFORM_UOF_VERSION_ID("INVI05.庫存異動單");
                if (!string.IsNullOrEmpty(PURTGID))
                {
                    Form.SetAttribute("formVersionId", PURTGID);
                }
                Form.SetAttribute("urgentLevel", "2");
                xmlDoc.AppendChild(Form);

                // Applicant
                XmlElement Applicant = xmlDoc.CreateElement("Applicant");
                Applicant.SetAttribute("account", account);
                Applicant.SetAttribute("groupId", groupId);
                Applicant.SetAttribute("jobTitleId", jobTitleId);
                Form.AppendChild(Applicant);

                XmlElement Comment = xmlDoc.CreateElement("Comment");
                Comment.InnerText = "申請者意見";
                Applicant.AppendChild(Comment);

                // FormFieldValue
                XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
                Form.AppendChild(FormFieldValue);

                // 表單欄位
                AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA001", DT.Rows[0]["TA001"].ToString().Trim(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA002", DT.Rows[0]["TA002"].ToString().Trim(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA003", DT.Rows[0]["TA003"].ToString().Trim(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA004", DT.Rows[0]["TA004"].ToString().Trim(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA005", DT.Rows[0]["TA005"].ToString().Trim(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA008", DT.Rows[0]["TA008"].ToString().Trim(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA011", DT.Rows[0]["TA011"].ToString().Trim(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA012", DT.Rows[0]["TA012"].ToString().Trim(), fillerName, fillerUserGuid, account);
                
                // DataGrid
                AddFieldItem(xmlDoc, FormFieldValue, "INVTB", "", fillerName, fillerUserGuid, account);
                XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
                XmlNode INVTB = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='INVTB']");
                if (INVTB != null)
                    INVTB.AppendChild(DataGrid);

                int rowCounts = 0;
                foreach (DataRow od in DT.Rows)
                {
                    XmlElement Row = xmlDoc.CreateElement("Row");
                    Row.SetAttribute("order", rowCounts.ToString());

                    AppendCellToRow(xmlDoc, Row, od, "TB003");
                    AppendCellToRow(xmlDoc, Row, od, "TB004");
                    AppendCellToRow(xmlDoc, Row, od, "TB005");
                    AppendCellToRow(xmlDoc, Row, od, "TB006");
                    AppendCellToRow(xmlDoc, Row, od, "TB007");
                    AppendCellToRow(xmlDoc, Row, od, "TB008");
                    AppendCellToRow(xmlDoc, Row, od, "TB012");
                    AppendCellToRow(xmlDoc, Row, od, "TB013");
                    AppendCellToRow(xmlDoc, Row, od, "TB014");
                    AppendCellToRow(xmlDoc, Row, od, "TB017");

                    DataGrid.AppendChild(Row);
                    rowCounts++;
                }

                // 寫入 DB
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                string connectionString = sqlsb.ConnectionString;
                StringBuilder queryString = new StringBuilder();
                queryString.AppendFormat(@"
                                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(), @XML, 2, '{0}')"
                                        , EXTERNAL_FORM_NBR);

                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                // 這裡你可以加上 log
                Console.WriteLine("錯誤：" + ex.Message);
            }
        }


        public DataTable SEARCH_INVTA_INVTB(string TA001, string TA002)
        {
            DataTable dt = new DataTable();

            try
            {
                // 建立連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密使用者帳號與密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();

                    sbSql.Append(@"
                                SELECT *
                                      ,USER_GUID,NAME
                                      ,(SELECT TOP 1 GROUP_ID 
                                          FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                          WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS GROUP_ID
                                      ,(SELECT TOP 1 TITLE_ID 
                                          FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                          WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS TITLE_ID
                                FROM 
                                (
                                    SELECT 
                                        [INVTA].[COMPANY]
                                        ,[INVTA].[CREATOR]
                                        ,[INVTA].[USR_GROUP]
                                        ,[INVTA].[CREATE_DATE]
                                        ,[INVTA].[MODIFIER]
                                        ,[INVTA].[MODI_DATE]
                                        ,[INVTA].[FLAG]
                                        ,[INVTA].[CREATE_TIME]
                                        ,[INVTA].[MODI_TIME]
                                        ,[INVTA].[TRANS_TYPE]
                                        ,[INVTA].[TRANS_NAME]
                                        ,[INVTA].[sync_date]
                                        ,[INVTA].[sync_time]
                                        ,[INVTA].[sync_mark]
                                        ,[INVTA].[sync_count]
                                        ,[INVTA].[DataUser]
                                        ,[INVTA].[DataGroup]
                                        ,[INVTA].[TA001]
                                        ,[INVTA].[TA002]
                                        ,[INVTA].[TA003]
                                        ,[INVTA].[TA004]
                                        ,[INVTA].[TA005]
                                        ,[INVTA].[TA006]
                                        ,[INVTA].[TA007]
                                        ,[INVTA].[TA008]
                                        ,[INVTA].[TA009]
                                        ,[INVTA].[TA010]
                                        ,[INVTA].[TA011]
                                        ,[INVTA].[TA012]
                                        ,[INVTA].[TA013]
                                        ,[INVTA].[TA014]
                                        ,[INVTA].[TA015]
                                        ,[INVTA].[TA016]
                                        ,[INVTA].[TA017]
                                        ,[INVTA].[TA018]
                                        ,[INVTA].[TA019]
                                        ,[INVTA].[TA020]
                                        ,[INVTA].[TA021]
                                        ,[INVTA].[TA022]
                                        ,[INVTA].[TA023]
                                        ,[INVTA].[TA024]
                                        ,[INVTA].[TA025]
                                        ,[INVTA].[TA026]
                                        ,[INVTA].[TA027]
                                        ,[INVTA].[TA028]
                                        ,[INVTA].[TA029]
                                        ,[INVTA].[TA030]
                                        ,[INVTA].[TA031]
                                        ,[INVTA].[TA032]
                                        ,[INVTA].[TA033]
                                        ,[INVTA].[TA034]
                                        ,[INVTA].[TA035]
                                        ,[INVTA].[TA036]
                                        ,[INVTA].[TA037]
                                        ,[INVTA].[TA038]
                                        ,[INVTA].[TA039]
                                        ,[INVTA].[TA040]
                                        ,[INVTA].[TA041]
                                        ,[INVTA].[TA042]
                                        ,[INVTA].[TA043]
                                        ,[INVTA].[TA044]
                                        ,[INVTA].[TA045]
                                        ,[INVTA].[TA046]
                                        ,[INVTA].[TA047]
                                        ,[INVTA].[TA048]
                                        ,[INVTA].[TA049]
                                        ,[INVTA].[TA050]
                                        ,[INVTA].[TA051]
                                        ,[INVTA].[TA052]
                                        ,[INVTA].[TA053]
                                        ,[INVTA].[TA054]
                                        ,[INVTA].[TA055]
                                        ,[INVTA].[TA056]
                                        ,[INVTA].[TA057]
                                        ,[INVTA].[TA058]
                                        ,[INVTA].[TA059]
                                        ,[INVTA].[TA060]
                                        ,[INVTA].[TA061]
                                        ,[INVTA].[TA062]
                                        ,[INVTA].[TA063]
                                        ,[INVTA].[TA064]
                                        ,[INVTA].[TA065]
                                        ,[INVTA].[TA066]
                                        ,[INVTA].[TA067]
                                        ,[INVTA].[TA068]
                                        ,[INVTA].[TA200]
                                        ,[INVTA].[UDF01] AS INVTAUDF01
                                        ,[INVTA].[UDF02] AS INVTAUDF02
                                        ,[INVTA].[UDF03] AS INVTAUDF03
                                        ,[INVTA].[UDF04] AS INVTAUDF04
                                        ,[INVTA].[UDF05] AS INVTAUDF05
                                        ,[INVTA].[UDF06] AS INVTAUDF06
                                        ,[INVTA].[UDF07] AS INVTAUDF07
                                        ,[INVTA].[UDF08] AS INVTAUDF08
                                        ,[INVTA].[UDF09] AS INVTAUDF09
                                        ,[INVTA].[UDF10] AS INVTAUDF10
                                        ,[INVTB].[TB001]
                                        ,[INVTB].[TB002]
                                        ,[INVTB].[TB003]
                                        ,[INVTB].[TB004]
                                        ,[INVTB].[TB005]
                                        ,[INVTB].[TB006]
                                        ,[INVTB].[TB007]
                                        ,[INVTB].[TB008]
                                        ,[INVTB].[TB009]
                                        ,[INVTB].[TB010]
                                        ,[INVTB].[TB011]
                                        ,[INVTB].[TB012]
                                        ,[INVTB].[TB013]
                                        ,[INVTB].[TB014]
                                        ,[INVTB].[TB015]
                                        ,[INVTB].[TB016]
                                        ,[INVTB].[TB017]
                                        ,[INVTB].[TB018]
                                        ,[INVTB].[TB019]
                                        ,[INVTB].[TB020]
                                        ,[INVTB].[TB021]
                                        ,[INVTB].[TB022]
                                        ,[INVTB].[TB023]
                                        ,[INVTB].[TB024]
                                        ,[INVTB].[TB025]
                                        ,[INVTB].[TB026]
                                        ,[INVTB].[TB027]
                                        ,[INVTB].[TB028]
                                        ,[INVTB].[TB029]
                                        ,[INVTB].[TB030]
                                        ,[INVTB].[TB031]
                                        ,[INVTB].[TB032]
                                        ,[INVTB].[TB033]
                                        ,[INVTB].[TB034]
                                        ,[INVTB].[TB035]
                                        ,[INVTB].[TB036]
                                        ,[INVTB].[TB037]
                                        ,[INVTB].[TB038]
                                        ,[INVTB].[TB039]
                                        ,[INVTB].[TB040]
                                        ,[INVTB].[TB041]
                                        ,[INVTB].[TB042]
                                        ,[INVTB].[TB043]
                                        ,[INVTB].[TB044]
                                        ,[INVTB].[TB045]
                                        ,[INVTB].[TB046]
                                        ,[INVTB].[TB047]
                                        ,[INVTB].[TB048]
                                        ,[INVTB].[TB049]
                                        ,[INVTB].[TB050]
                                        ,[INVTB].[TB051]
                                        ,[INVTB].[TB052]
                                        ,[INVTB].[TB053]
                                        ,[INVTB].[TB054]
                                        ,[INVTB].[TB055]
                                        ,[INVTB].[TB056]
                                        ,[INVTB].[TB057]
                                        ,[INVTB].[TB058]
                                        ,[INVTB].[TB059]
                                        ,[INVTB].[TB060]
                                        ,[INVTB].[TB061]
                                        ,[INVTB].[TB062]
                                        ,[INVTB].[TB063]
                                        ,[INVTB].[TB064]
                                        ,[INVTB].[TB065]
                                        ,[INVTB].[TB066]
                                        ,[INVTB].[TB067]
                                        ,[INVTB].[TB068]
                                        ,[INVTB].[TB069]
                                        ,[INVTB].[TB070]
                                        ,[INVTB].[TB071]
                                        ,[INVTB].[TB072]
                                        ,[INVTB].[TB073]
                                        ,[INVTB].[UDF01] AS INVTBUDF01
                                        ,[INVTB].[UDF02] AS INVTBUDF02
                                        ,[INVTB].[UDF03] AS INVTBUDF03
                                        ,[INVTB].[UDF04] AS INVTBUDF04
                                        ,[INVTB].[UDF05] AS INVTBUDF05
                                        ,[INVTB].[UDF06] AS INVTBUDF06
                                        ,[INVTB].[UDF07] AS INVTBUDF07
                                        ,[INVTB].[UDF08] AS INVTBUDF08
                                        ,[INVTB].[UDF09] AS INVTBUDF09
                                        ,[INVTB].[UDF10] AS INVTBUDF10
                                        ,[TB_EB_USER].USER_GUID,NAME
                                        ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=INVTA.CREATOR) AS MV002
                                    FROM [TK].dbo.INVTB
                                    JOIN [TK].dbo.INVTA ON TA001=TB001 AND TA002=TB002
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                           ON [TB_EB_USER].ACCOUNT=INVTA.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE TA001=@TA001 AND TA002=@TA002
                                ) AS TEMP
                            ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        adapter.SelectCommand.Parameters.AddWithValue("@TA001", TA001);
                        adapter.SelectCommand.Parameters.AddWithValue("@TA002", TA002);

                        adapter.Fill(dt);
                    }
                }

                return dt.Rows.Count > 0 ? dt : null;
            }
            catch (Exception ex)
            {
                // 建議加 log
                // Console.WriteLine(ex.ToString());
                return null;
            }
        }

        public void UPDATE_INVTA_UDF02()
        {
            try
            {
                // 20210902密
                Class1 TKID = new Class1(); // 用 new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        sbSql.Clear();
                        sbSql.AppendFormat(@"
                                        UPDATE [TK].dbo.INVTA
                                        SET UDF02 = 'UOF',
                                            TA009  = '12'
                                        WHERE UDF02 IN ('Y','y')
                                    ");

                        cmd.CommandText = sbSql.ToString();
                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback(); // 交易取消
                        }
                        else
                        {
                            tran.Commit();   // 執行交易
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議加 log，方便日後除錯
                // e.g. Console.WriteLine(ex.ToString());
            }
        }

        //ERP-IINVI08.轉撥單
        public void NEW_INVTAINVTB_TRANS()
        {
            try
            {
                // 建立 TKID 解密物件
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    DataSet ds1 = new DataSet();

                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.AppendFormat(@"
                                    SELECT TA001,TA002,UDF01
                                    FROM [TK].dbo.INVTA
                                    WHERE TA006='N'
                                    AND TA009='12'
                                    AND UDF01 IN ('Y','y')
                                    ORDER BY TA001,TA002
                                ");

                    using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    using (SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder(adapter1))
                    {
                        sqlConn.Open();
                        ds1.Clear();
                        adapter1.Fill(ds1, "ds1");
                    }

                    if (ds1.Tables["ds1"].Rows.Count > 0)
                    {
                        foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                        {

                            string TA001 = dr["TA001"].ToString().Trim();
                            string TA002 = dr["TA002"].ToString().Trim();

                            ADD_INVTAINVTB_TB_WKF_EXTERNAL_TASK_TRANS(TA001, TA002);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議加上紀錄錯誤訊息
                Console.WriteLine($"NEW_INVTAINVTB_TRANS 發生錯誤: {ex.Message}");
            }
            finally
            {
                UPDATE_INVTA_UDF01_TRANS();
            }
        }

        public void ADD_INVTAINVTB_TB_WKF_EXTERNAL_TASK_TRANS(string TA001, string TA002)
        {
            try
            {
                DataTable DT = SEARCH_INVTA_INVTB_TRANS(TA001, TA002);
                if (DT == null || DT.Rows.Count == 0) return;

                DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());
                if (DTUPFDEP == null || DTUPFDEP.Rows.Count == 0) return;

                string account = DT.Rows[0]["CREATOR"].ToString();
                string groupId = DT.Rows[0]["GROUP_ID"].ToString();
                string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
                string fillerName = DT.Rows[0]["MV002"].ToString();
                string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

                string EXTERNAL_FORM_NBR = DT.Rows[0]["TA001"].ToString().Trim() + DT.Rows[0]["TA002"].ToString().Trim();

                XmlDocument xmlDoc = new XmlDocument();
                XmlElement Form = xmlDoc.CreateElement("Form");

                string PURTGID = SEARCHFORM_UOF_VERSION_ID("INVI08.轉撥單");
                if (!string.IsNullOrEmpty(PURTGID))
                {
                    Form.SetAttribute("formVersionId", PURTGID);
                }
                Form.SetAttribute("urgentLevel", "2");
                xmlDoc.AppendChild(Form);

                // Applicant
                XmlElement Applicant = xmlDoc.CreateElement("Applicant");
                Applicant.SetAttribute("account", account);
                Applicant.SetAttribute("groupId", groupId);
                Applicant.SetAttribute("jobTitleId", jobTitleId);
                Form.AppendChild(Applicant);

                XmlElement Comment = xmlDoc.CreateElement("Comment");
                Comment.InnerText = "申請者意見";
                Applicant.AppendChild(Comment);

                // FormFieldValue
                XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
                Form.AppendChild(FormFieldValue);

                // 單頭欄位
                AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA001", DT.Rows[0]["TA001"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA002", DT.Rows[0]["TA002"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA003", DT.Rows[0]["TA003"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA008", DT.Rows[0]["TA008"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA004", DT.Rows[0]["TA004"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA005", DT.Rows[0]["TA005"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA011", DT.Rows[0]["TA011"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "TA012", DT.Rows[0]["TA012"].ToString(), fillerName, fillerUserGuid, account);
                
                // DataGrid
                AddFieldItem(xmlDoc, FormFieldValue, "INVTB", "", fillerName, fillerUserGuid, account);
                XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
                XmlNode INVTB = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='INVTB']");
                if (INVTB != null)
                    INVTB.AppendChild(DataGrid);                

                int rowscounts = 0;
                foreach (DataRow od in DT.Rows)
                {
                    XmlElement Row = xmlDoc.CreateElement("Row");
                    Row.SetAttribute("order", rowscounts.ToString());

                    AppendCellToRow(xmlDoc, Row, od, "TB003");
                    AppendCellToRow(xmlDoc, Row, od, "TB004");
                    AppendCellToRow(xmlDoc, Row, od, "TB005");
                    AppendCellToRow(xmlDoc, Row, od, "TB006");
                    AppendCellToRow(xmlDoc, Row, od, "TB007");
                    AppendCellToRow(xmlDoc, Row, od, "TB008");
                    AppendCellToRow(xmlDoc, Row, od, "TB012");
                    AppendCellToRow(xmlDoc, Row, od, "TB013");
                    AppendCellToRow(xmlDoc, Row, od, "TB014");
                    AppendCellToRow(xmlDoc, Row, od, "TB017");

                    DataGrid.AppendChild(Row);
                    rowscounts++;
                }

                // 寫入 DB
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                string connectionString = sqlsb.ConnectionString;
                StringBuilder queryString = new StringBuilder();
                queryString.AppendFormat(@"
                                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(),@XML,2,'{0}')
                                    ",  EXTERNAL_FORM_NBR);

                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                // 可加上 log
                Console.WriteLine("Error: " + ex.Message);
            }
        }


        public DataTable SEARCH_INVTA_INVTB_TRANS(string TA001, string TA002)
        {
            try
            {
                // 建立 TKID 解密物件
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.Append(@"
                                    SELECT *
                                          ,USER_GUID,NAME
                                          ,(SELECT TOP 1 GROUP_ID 
                                            FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                            WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS GROUP_ID
                                          ,(SELECT TOP 1 TITLE_ID 
                                            FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                            WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS TITLE_ID
                                    FROM 
                                    (
                                        SELECT 
                                            INVTA.COMPANY,INVTA.CREATOR,INVTA.USR_GROUP,INVTA.CREATE_DATE,INVTA.MODIFIER,
                                            INVTA.MODI_DATE,INVTA.FLAG,INVTA.CREATE_TIME,INVTA.MODI_TIME,
                                            INVTA.TRANS_TYPE,INVTA.TRANS_NAME,INVTA.sync_date,INVTA.sync_time,
                                            INVTA.sync_mark,INVTA.sync_count,INVTA.DataUser,INVTA.DataGroup,
                                            INVTA.TA001,INVTA.TA002,INVTA.TA003,INVTA.TA004,INVTA.TA005,INVTA.TA006,
                                            INVTA.TA007,INVTA.TA008,INVTA.TA009,INVTA.TA010,INVTA.TA011,INVTA.TA012,
                                            INVTA.TA013,INVTA.TA014,INVTA.TA015,INVTA.TA016,INVTA.TA017,INVTA.TA018,
                                            INVTA.TA019,INVTA.TA020,INVTA.TA021,INVTA.TA022,INVTA.TA023,INVTA.TA024,
                                            INVTA.TA025,INVTA.TA026,INVTA.TA027,INVTA.TA028,INVTA.TA029,INVTA.TA030,
                                            INVTA.TA031,INVTA.TA032,INVTA.TA033,INVTA.TA034,INVTA.TA035,INVTA.TA036,
                                            INVTA.TA037,INVTA.TA038,INVTA.TA039,INVTA.TA040,INVTA.TA041,INVTA.TA042,
                                            INVTA.TA043,INVTA.TA044,INVTA.TA045,INVTA.TA046,INVTA.TA047,INVTA.TA048,
                                            INVTA.TA049,INVTA.TA050,INVTA.TA051,INVTA.TA052,INVTA.TA053,INVTA.TA054,
                                            INVTA.TA055,INVTA.TA056,INVTA.TA057,INVTA.TA058,INVTA.TA059,INVTA.TA060,
                                            INVTA.TA061,INVTA.TA062,INVTA.TA063,INVTA.TA064,INVTA.TA065,INVTA.TA066,
                                            INVTA.TA067,INVTA.TA068,INVTA.TA200,
                                            INVTA.UDF01 AS INVTAUDF01,INVTA.UDF02 AS INVTAUDF02,INVTA.UDF03 AS INVTAUDF03,
                                            INVTA.UDF04 AS INVTAUDF04,INVTA.UDF05 AS INVTAUDF05,INVTA.UDF06 AS INVTAUDF06,
                                            INVTA.UDF07 AS INVTAUDF07,INVTA.UDF08 AS INVTAUDF08,INVTA.UDF09 AS INVTAUDF09,
                                            INVTA.UDF10 AS INVTAUDF10,
                                            INVTB.TB001,INVTB.TB002,INVTB.TB003,INVTB.TB004,INVTB.TB005,INVTB.TB006,
                                            INVTB.TB007,INVTB.TB008,INVTB.TB009,INVTB.TB010,INVTB.TB011,INVTB.TB012,
                                            INVTB.TB013,INVTB.TB014,INVTB.TB015,INVTB.TB016,INVTB.TB017,INVTB.TB018,
                                            INVTB.TB019,INVTB.TB020,INVTB.TB021,INVTB.TB022,INVTB.TB023,INVTB.TB024,
                                            INVTB.TB025,INVTB.TB026,INVTB.TB027,INVTB.TB028,INVTB.TB029,INVTB.TB030,
                                            INVTB.TB031,INVTB.TB032,INVTB.TB033,INVTB.TB034,INVTB.TB035,INVTB.TB036,
                                            INVTB.TB037,INVTB.TB038,INVTB.TB039,INVTB.TB040,INVTB.TB041,INVTB.TB042,
                                            INVTB.TB043,INVTB.TB044,INVTB.TB045,INVTB.TB046,INVTB.TB047,INVTB.TB048,
                                            INVTB.TB049,INVTB.TB050,INVTB.TB051,INVTB.TB052,INVTB.TB053,INVTB.TB054,
                                            INVTB.TB055,INVTB.TB056,INVTB.TB057,INVTB.TB058,INVTB.TB059,INVTB.TB060,
                                            INVTB.TB061,INVTB.TB062,INVTB.TB063,INVTB.TB064,INVTB.TB065,INVTB.TB066,
                                            INVTB.TB067,INVTB.TB068,INVTB.TB069,INVTB.TB070,INVTB.TB071,INVTB.TB072,
                                            INVTB.TB073,
                                            INVTB.UDF01 AS INVTBUDF01,INVTB.UDF02 AS INVTBUDF02,INVTB.UDF03 AS INVTBUDF03,
                                            INVTB.UDF04 AS INVTBUDF04,INVTB.UDF05 AS INVTBUDF05,INVTB.UDF06 AS INVTBUDF06,
                                            INVTB.UDF07 AS INVTBUDF07,INVTB.UDF08 AS INVTBUDF08,INVTB.UDF09 AS INVTBUDF09,
                                            INVTB.UDF10 AS INVTBUDF10,
                                            TB_EB_USER.USER_GUID,TB_EB_USER.NAME,
                                            (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=INVTA.CREATOR) AS MV002
                                        FROM [TK].dbo.INVTB
                                        INNER JOIN [TK].dbo.INVTA 
                                            ON INVTA.TA001=INVTB.TB001 AND INVTA.TA002=INVTB.TB002
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                            ON TB_EB_USER.ACCOUNT=INVTA.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        WHERE INVTA.TA001=@TA001 AND INVTA.TA002=@TA002
                                    ) AS TEMP
                                ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        adapter.SelectCommand.Parameters.AddWithValue("@TA001", TA001);
                        adapter.SelectCommand.Parameters.AddWithValue("@TA002", TA002);

                        DataSet ds1 = new DataSet();
                        adapter.Fill(ds1, "ds1");

                        if (ds1.Tables["ds1"].Rows.Count > 0)
                        {
                            return ds1.Tables["ds1"];
                        }
                        else
                        {
                            return null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"SEARCH_INVTA_INVTB_TRANS 發生錯誤: {ex.Message}");
                return null;
            }
        }


        public void UPDATE_INVTA_UDF01_TRANS()
        {
            try
            {
                // 建立 TKID 解密物件
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        sbSql.Clear();
                        sbSql.Append(@"
                                    UPDATE [TK].dbo.INVTA
                                    SET UDF01 = 'UOF',
                                        TA009 = '12'
                                    WHERE UDF01 IN ('Y','y')
                                ");

                        cmd.CommandText = sbSql.ToString();

                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                        {
                            tran.Commit();   // 有更新才 Commit
                        }
                        else
                        {
                            tran.Rollback(); // 沒有更新則 Rollback
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"UPDATE_INVTA_UDF01_TRANS 發生錯誤: {ex.Message}");
            }
        }


        public void NEWTBUOFQC1001()
        {
            string year = DateTime.Now.ToString("yyyy");
            string yearShort = year.Substring(2, 2); // 西元年後兩位
            string yearStart = year + "0101";        // 當年1月1日

            try
            {
                // 建立連線字串 (UOF 資料庫)
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 解密帳號與密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();
                    sbSql.Append(@"
                                SELECT DOC_NBR, *
                                FROM [UOF].dbo.TB_WKF_TASK
                                WHERE TASK_STATUS = '2'
                                AND TASK_RESULT = '0'
                                AND DOC_NBR LIKE 'QC1001%'
                                AND DOC_NBR >= @MinDocNbr
                                AND CONVERT(NVARCHAR, BEGIN_TIME, 112) >= @YearStart
                                AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN 
                                (
                                    SELECT [QCFrm001SN] 
                                    FROM [192.168.1.105].[TKQC].[dbo].[TBUOFQC1001]
                                )
                                ORDER BY BEGIN_TIME"
                                );

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        adapter.SelectCommand.Parameters.AddWithValue("@MinDocNbr", "QC1001230300009");
                        adapter.SelectCommand.Parameters.AddWithValue("@YearStart", yearStart);

                        DataSet ds = new DataSet();
                        sqlConn.Open();
                        adapter.Fill(ds, "Tasks");

                        if (ds.Tables["Tasks"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds.Tables["Tasks"].Rows)
                            {
                                SEARCHUOFTB_WKF_TASKQC1001(dr["DOC_NBR"].ToString());
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議補充 logging
                Console.WriteLine("NEWTBUOFQC1001 Error: " + ex.Message);
            }
        }


        //找出UOF表單的資料，將CURRENT_DOC的內容，轉成xmlDoc
        //從xmlDoc找出各節點的Attributes
        public void SEARCHUOFTB_WKF_TASKQC1001(string DOC_NBR)
        {
            try
            {
                // 建立連線字串 (UOF 資料庫)
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();
                    sbSql.Append(@"
                                    SELECT T.*, U.USER_GUID, U.ACCOUNT, U.NAME 
                                    FROM [UOF].dbo.TB_WKF_TASK T
                                    LEFT JOIN [UOF].dbo.TB_EB_USER U ON U.USER_GUID = T.USER_GUID
                                    WHERE T.DOC_NBR LIKE @DocNbr + '%' 
                                    ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        adapter.SelectCommand.Parameters.AddWithValue("@DocNbr", DOC_NBR);

                        DataSet ds = new DataSet();
                        sqlConn.Open();
                        adapter.Fill(ds, "Task");
                        sqlConn.Close();

                        if (ds.Tables["Task"].Rows.Count > 0)
                        {
                            DataRow row = ds.Tables["Task"].Rows[0];
                            XmlDocument xmlDoc = new XmlDocument();
                            xmlDoc.LoadXml(row["CURRENT_DOC"].ToString());

                            // 預先定義欄位
                            string QCFrm001SN = TryGetXmlValue(xmlDoc, "QCFrm001SN");
                            string QCFrm001ASN = TryGetXmlValue(xmlDoc, "QCFrm001ASN");
                            string QCFrm001Date = TryGetXmlValue(xmlDoc, "QCFrm001Date");
                            string QCFrm001User = TryGetXmlValue(xmlDoc, "QCFrm001User");
                            string QCFrm001Dept = TryGetXmlValue(xmlDoc, "QCFrm001Dept");
                            string QCFrm001Rank = TryGetXmlValue(xmlDoc, "QCFrm001Rank");
                            string QCFrm001CUST = TryGetXmlValue(xmlDoc, "QCFrm001CUST");
                            string QCFrm001PNO = TryGetXmlValue(xmlDoc, "QCFrm001PNO");
                            string QCFrm001CN = TryGetXmlValue(xmlDoc, "QCFrm001CN");
                            string QCFrm001PRD = TryGetXmlValue(xmlDoc, "QCFrm001PRD");
                            string QCFrm001RDate = TryGetXmlValue(xmlDoc, "QCFrm001RDate");
                            string QCFrm001MD = TryGetXmlValue(xmlDoc, "QCFrm001MD");
                            string QCFrm001ND = TryGetXmlValue(xmlDoc, "QCFrm001ND");
                            string QCFrm002Cmf = TryGetXmlValue(xmlDoc, "QCFrm002Cmf");
                            string QCFrm002Abn = TryGetXmlValue(xmlDoc, "QCFrm002Abn");
                            string QCFrm002Abns = TryGetXmlValue(xmlDoc, "QCFrm002Abns");
                            string QCFrm001Range = TryGetXmlValue(xmlDoc, "QCFrm001Range");
                            string QCFrm001HB = TryGetXmlValue(xmlDoc, "QCFrm001HB");
                            string QCFrm001RCA = TryGetXmlValue(xmlDoc, "QCFrm001RCA");
                            string QCFrm001RCAU = TryGetXmlValue(xmlDoc, "QCFrm001RCAU");
                            string QCFrm001Cmf = TryGetXmlValue(xmlDoc, "QCFrm001Cmf");
                            string QCFrm001Comp = TryGetXmlValue(xmlDoc, "QCFrm001Comp");
                            string QCFrm001Cmf1 = TryGetXmlValue(xmlDoc, "QCFrm001Cmf1");

                            // DataGrid 需要清理 HTML
                            string QCFrm001PA = TryGetGridValue(xmlDoc, "QCFrm001PA", "PA10001");
                            string QCFrm001QA = TryGetGridValue(xmlDoc, "QCFrm001QA", "QA10001");
                            string QCFrm001PA2 = TryGetGridValue(xmlDoc, "QCFrm001PA2", "PA20001");
                            string QCFrm001QA2 = TryGetGridValue(xmlDoc, "QCFrm001QA2", "QA20001");
                            string QCFrm001PA3 = TryGetGridValue(xmlDoc, "QCFrm001PA3", "PA30001");
                            string QCFrm001QA3 = TryGetGridValue(xmlDoc, "QCFrm001QA3", "QA30001");

                            // 寫入資料庫
                            ADDTOTKQCTBUOFQC1001(
                                QCFrm001SN, QCFrm001ASN, QCFrm001Date, QCFrm001User, QCFrm001Dept,
                                QCFrm001Rank, QCFrm001CUST, QCFrm001PNO, QCFrm001CN, QCFrm001PRD,
                                QCFrm001RDate, QCFrm001MD, QCFrm001ND, QCFrm002Cmf, QCFrm002Abn,
                                QCFrm002Abns, QCFrm001Range, QCFrm001HB, QCFrm001RCA, QCFrm001RCAU,
                                QCFrm001Cmf, QCFrm001Comp, QCFrm001Cmf1,
                                QCFrm001PA, QCFrm001QA, QCFrm001PA2, QCFrm001QA2, QCFrm001PA3, QCFrm001QA3
                            );
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("SEARCHUOFTB_WKF_TASKQC1001 Error: " + ex.Message);
            }
        }

        /// <summary>
        /// 嘗試讀取 XML 欄位值 (單一 FieldItem)
        /// </summary>
        private string TryGetXmlValue(XmlDocument xmlDoc, string fieldId)
        {
            try
            {
                var node = xmlDoc.SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='{fieldId}']");
                return node?.Attributes["fieldValue"]?.Value ?? "";
            }
            catch { return ""; }
        }

        /// <summary>
        /// 嘗試讀取 DataGrid 中的欄位值並去除 HTML/符號
        /// </summary>
        private string TryGetGridValue(XmlDocument xmlDoc, string fieldId, string cellId)
        {
            try
            {
                string rawValue = xmlDoc
                    .SelectSingleNode($"/Form/FormFieldValue/FieldItem[@fieldId='{fieldId}']/DataGrid/Row/Cell[@fieldId='{cellId}']")
                    ?.Attributes["fieldValue"]?.Value ?? "";

                string cleaned = Regex.Replace(rawValue, @"[\W_]+", "");
                return Regex.Replace(cleaned, @"[0-9A-Za-z]+", "");
            }
            catch { return ""; }
        }


        public void ADDTOTKQCTBUOFQC1001(
                    string QCFrm001SN,
                    string QCFrm001ASN,
                    string QCFrm001Date,
                    string QCFrm001User,
                    string QCFrm001Dept,
                    string QCFrm001Rank,
                    string QCFrm001CUST,
                    string QCFrm001PNO,
                    string QCFrm001CN,
                    string QCFrm001PRD,
                    string QCFrm001RDate,
                    string QCFrm001MD,
                    string QCFrm001ND,
                    string QCFrm002Cmf,
                    string QCFrm002Abn,
                    string QCFrm002Abns,
                    string QCFrm001Range,
                    string QCFrm001HB,
                    string QCFrm001RCA,
                    string QCFrm001RCAU,
                    string QCFrm001Cmf,
                    string QCFrm001Comp,
                    string QCFrm001Cmf1,
                    string QCFrm001PA,
                    string QCFrm001QA,
                    string QCFrm001PA2,
                    string QCFrm001QA2,
                    string QCFrm001PA3,
                    string QCFrm001QA3
                )
        {
            try
            {
                // 解密連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        cmd.CommandText = @"
                                            INSERT INTO [TKQC].[dbo].[TBUOFQC1001]
                                            (
                                                [QCFrm001SN],
                                                [QCFrm001ASN],
                                                [QCFrm001Date],
                                                [QCFrm001User],
                                                [QCFrm001Dept],
                                                [QCFrm001Rank],
                                                [QCFrm001CUST],
                                                [QCFrm001PNO],
                                                [QCFrm001CN],
                                                [QCFrm001PRD],
                                                [QCFrm001RDate],
                                                [QCFrm001MD],
                                                [QCFrm001ND],
                                                [QCFrm002Cmf],
                                                [QCFrm002Abn],
                                                [QCFrm002Abns],
                                                [QCFrm001Range],
                                                [QCFrm001HB],
                                                [QCFrm001RCA],
                                                [QCFrm001RCAU],
                                                [QCFrm001PA],
                                                [QCFrm001QA],
                                                [QCFrm001PA2],
                                                [QCFrm001QA2],
                                                [QCFrm001PA3],
                                                [QCFrm001QA3],
                                                [QCFrm001Cmf],
                                                [QCFrm001Comp],
                                                [QCFrm001Cmf1]
                                            )
                                            VALUES
                                            (
                                                @QCFrm001SN, @QCFrm001ASN, @QCFrm001Date, @QCFrm001User, @QCFrm001Dept,
                                                @QCFrm001Rank, @QCFrm001CUST, @QCFrm001PNO, @QCFrm001CN, @QCFrm001PRD,
                                                @QCFrm001RDate, @QCFrm001MD, @QCFrm001ND, @QCFrm002Cmf, @QCFrm002Abn,
                                                @QCFrm002Abns, @QCFrm001Range, @QCFrm001HB, @QCFrm001RCA, @QCFrm001RCAU,
                                                @QCFrm001PA, @QCFrm001QA, @QCFrm001PA2, @QCFrm001QA2, @QCFrm001PA3,
                                                @QCFrm001QA3, @QCFrm001Cmf, @QCFrm001Comp, @QCFrm001Cmf1
                                            )";

                        // 建立參數，避免 SQL Injection
                        cmd.Parameters.AddWithValue("@QCFrm001SN", QCFrm001SN ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001ASN", QCFrm001ASN ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001Date", QCFrm001Date ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001User", QCFrm001User ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001Dept", QCFrm001Dept ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001Rank", QCFrm001Rank ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001CUST", QCFrm001CUST ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001PNO", QCFrm001PNO ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001CN", QCFrm001CN ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001PRD", QCFrm001PRD ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001RDate", QCFrm001RDate ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001MD", QCFrm001MD ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001ND", QCFrm001ND ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm002Cmf", QCFrm002Cmf ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm002Abn", QCFrm002Abn ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm002Abns", QCFrm002Abns ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001Range", QCFrm001Range ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001HB", QCFrm001HB ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001RCA", QCFrm001RCA ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001RCAU", QCFrm001RCAU ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001PA", QCFrm001PA ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001QA", QCFrm001QA ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001PA2", QCFrm001PA2 ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001QA2", QCFrm001QA2 ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001PA3", QCFrm001PA3 ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001QA3", QCFrm001QA3 ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001Cmf", QCFrm001Cmf ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001Comp", QCFrm001Comp ?? "");
                        cmd.Parameters.AddWithValue("@QCFrm001Cmf1", QCFrm001Cmf1 ?? "");

                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                        {
                            tran.Commit();
                        }
                        else
                        {
                            tran.Rollback();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 可以記錄 log
                Console.WriteLine("Insert Error: " + ex.Message);
            }
        }
        //ERP-INVI07成本開帳調整單>轉入UOF簽核
        public void NEW_INVTJINVTK()
        {
            try
            {
                // 建立解密後的連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    string query = @"
                                SELECT TJ001, TJ002, UDF01
                                FROM [TK].dbo.INVTJ
                                WHERE TJ010 = 'N'
                                  AND UDF01 IN ('Y','y')
                                ORDER BY TJ001, TJ002";

                    using (SqlCommand cmd = new SqlCommand(query, sqlConn))
                    using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                    {
                        DataSet ds = new DataSet();
                        adapter.Fill(ds, "ds1");

                        if (ds.Tables["ds1"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds.Tables["ds1"].Rows)
                            {
                                string TJ001 = dr["TJ001"].ToString().Trim();
                                string TJ002 = dr["TJ002"].ToString().Trim();

                                ADD_INVTJINVTK_TB_WKF_EXTERNAL_TASK(TJ001, TJ002);
                            }
                        }
                    }
                }

                // 查詢處理完後，執行更新
                UPDATE_INVTJ_UDF01();
            }
            catch (Exception ex)
            {
                // 建議記錄 log，避免錯誤被吃掉
                Console.WriteLine("Error in NEW_INVTJINVTK: " + ex.Message);
            }
        }

        public void ADD_INVTJINVTK_TB_WKF_EXTERNAL_TASK(string TJ001, string TJ002)
        {
            DataTable DT = SEARCH_INVTJ_INVTK(TJ001, TJ002);
            if (DT == null || DT.Rows.Count == 0) return;

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = TJ001.Trim() + TJ002.Trim();

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string PURTGID = SEARCHFORM_UOF_VERSION_ID("INVI07成本開帳調整單");
            if (!string.IsNullOrEmpty(PURTGID))
                Form.SetAttribute("formVersionId", PURTGID);

            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            // Applicant 節點
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 表單欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TJ001", DT.Rows[0]["TJ001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TJ002", DT.Rows[0]["TJ002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TJ003", DT.Rows[0]["TJ003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TJ004", DT.Rows[0]["TJ004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TJ005", DT.Rows[0]["TJ005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TJ006", DT.Rows[0]["TJ006"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TJ007", DT.Rows[0]["TJ007"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TJ008", DT.Rows[0]["TJ008"].ToString(), fillerName, fillerUserGuid, account);

            // DataGrid 節點
            AddFieldItem(xmlDoc, FormFieldValue, "INVTK", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode INVTK = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='INVTK']");
            if (INVTK != null) INVTK.AppendChild(DataGrid);

            int rowscounts = 0;
            foreach (DataRow od in DT.Rows)
            {
                // 新增 Row
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", (rowscounts).ToString());

                // 逐欄位使用 AppendCellToRow
                AppendCellToRow(xmlDoc, Row, od, "TK003");
                AppendCellToRow(xmlDoc, Row, od, "TK004");
                AppendCellToRow(xmlDoc, Row, od, "TK005");
                AppendCellToRow(xmlDoc, Row, od, "TK006");
                AppendCellToRow(xmlDoc, Row, od, "TK007");
                AppendCellToRow(xmlDoc, Row, od, "TK017");
                AppendCellToRow(xmlDoc, Row, od, "TK018");
                AppendCellToRow(xmlDoc, Row, od, "TK012");
                AppendCellToRow(xmlDoc, Row, od, "TK013");
                AppendCellToRow(xmlDoc, Row, od, "TK014");
                AppendCellToRow(xmlDoc, Row, od, "TK015");

                rowscounts++;

                // 將 Row 加入 DataGrid
                XmlNode DataGridS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='INVTK']/DataGrid");
                DataGridS.AppendChild(Row);
            }

            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
            {
                string query = $@"
                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                          (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                          VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')";
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
        }


        public DataTable SEARCH_INVTJ_INVTK(string TJ001, string TJ002)
        {
            try
            {
                // 建立解密後的連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    // 原本 SQL 不變
                    string sql = string.Format(@"
                                SELECT *
                                     ,USER_GUID,NAME
                                     ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                     ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                FROM 
                                (
                                  SELECT 
                                        [INVTJ].[COMPANY],[INVTJ].[CREATOR],[INVTJ].[USR_GROUP],[INVTJ].[CREATE_DATE],[INVTJ].[MODIFIER],[INVTJ].[MODI_DATE],
                                        [INVTJ].[FLAG],[INVTJ].[CREATE_TIME],[INVTJ].[MODI_TIME],[INVTJ].[TRANS_TYPE],[INVTJ].[TRANS_NAME],[INVTJ].[sync_date],
                                        [INVTJ].[sync_time],[INVTJ].[sync_mark],[INVTJ].[sync_count],[INVTJ].[DataUser],[INVTJ].[DataGroup],
                                        [INVTJ].[TJ001],[INVTJ].[TJ002],[INVTJ].[TJ003],[INVTJ].[TJ004],[INVTJ].[TJ005],[INVTJ].[TJ006],[INVTJ].[TJ007],
                                        [INVTJ].[TJ008],[INVTJ].[TJ009],[INVTJ].[TJ010],[INVTJ].[TJ011],[INVTJ].[TJ012],[INVTJ].[TJ013],[INVTJ].[TJ014],
                                        [INVTJ].[TJ015],[INVTJ].[TJ016],[INVTJ].[TJ017],[INVTJ].[TJ018],[INVTJ].[TJ019],[INVTJ].[TJ020],[INVTJ].[TJ021],
                                        [INVTJ].[TJ022],[INVTJ].[TJ023],[INVTJ].[TJ024],[INVTJ].[TJ025],[INVTJ].[TJ026],[INVTJ].[TJ027],
                                        [INVTJ].[UDF01] AS 'INVTJUDF01',[INVTJ].[UDF02] AS 'INVTJUDF02',[INVTJ].[UDF03] AS 'INVTJUDF03',
                                        [INVTJ].[UDF04] AS 'INVTJUDF04',[INVTJ].[UDF05] AS 'INVTJUDF05',[INVTJ].[UDF06] AS 'INVTJUDF06',
                                        [INVTJ].[UDF07] AS 'INVTJUDF07',[INVTJ].[UDF08] AS 'INVTJUDF08',[INVTJ].[UDF09] AS 'INVTJUDF09',
                                        [INVTJ].[UDF10] AS 'INVTJUDF10',
                                        [INVTK].[TK001]
										,[INVTK].[TK002]
										,[INVTK].[TK003]
										,[INVTK].[TK004]
										,[INVTK].[TK005]
										,[INVTK].[TK006]
										,[INVTK].[TK007]
										,[INVTK].[TK008]
										,[INVTK].[TK009]
										,[INVTK].[TK010]
										,[INVTK].[TK011]
										,[INVTK].[TK012]
										,[INVTK].[TK013]
										,[INVTK].[TK014]
										,[INVTK].[TK015]
										,[INVTK].[TK016]
										,[INVTK].[TK017]
										,[INVTK].[TK018]
										,[INVTK].[TK019]
										,[INVTK].[TK020]
										,[INVTK].[TK021]
										,[INVTK].[TK022]
										,[INVTK].[TK023]
										,[INVTK].[TK024]
										,[INVTK].[TK025]
										,[INVTK].[TK026]
										,[INVTK].[TK027]
										,[INVTK].[TK028]
										,[INVTK].[TK029]
										,[INVTK].[TK030]
										,[INVTK].[TK031]
										,[INVTK].[TK032]
										,[INVTK].[TK033]
										,[INVTK].[TK034]
										,[INVTK].[TK035]
										,[INVTK].[TK036]
										,[INVTK].[TK037]
										,[INVTK].[TK038]
										,[INVTK].[TK039]
										,[INVTK].[TK040]
										,[INVTK].[TK041]
										,[INVTK].[TK042]
										,[INVTK].[TK043]
										,[INVTK].[TK044]
										,[INVTK].[TK045]
										,[INVTK].[TK046]
										,[TB_EB_USER].USER_GUID, NAME,
                                        (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=INVTJ.CREATOR) AS 'MV002'
                                    FROM [TK].dbo.INVTK,[TK].dbo.INVTJ
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                        ON [TB_EB_USER].ACCOUNT=INVTJ.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE TJ001=TK001 AND TJ002=TK002
                                    AND TJ001='{0}' AND TJ002='{1}'
                                ) AS TEMP
                            ", TJ001, TJ002);

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sql, sqlConn))
                    {
                        DataTable dt = new DataTable();
                        adapter.Fill(dt);
                        return dt.Rows.Count > 0 ? dt : null;
                    }
                }
            }
            catch (Exception EX)
            {
                return null;
            }
        }


        public void UPDATE_INVTJ_UDF01()
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                    UPDATE  [TK].dbo.INVTJ
                                    SET UDF01 = 'UOF'                                   
                                    WHERE  UDF01 IN ('Y','y')

                                    ");

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  
                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }
        }
        //ERP-MOCI06託外進貨單>轉入UOF簽核
        public void NEW_MOCTH_MOCTI()
        {
            try
            {
                // 建立並解密連線
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string query = @"
                                    SELECT TH001, TH002, UDF01
                                    FROM [TK].dbo.MOCTH
                                    WHERE TH023='N' 
                                      AND UDF01 IN ('Y','y')
                                    ORDER BY TH001, TH002;
                                ";

                    DataTable dt = new DataTable();
                    using (SqlDataAdapter adapter = new SqlDataAdapter(query, sqlConn))
                    {
                        sqlConn.Open();
                        adapter.Fill(dt);
                    }

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            string TH001 = dr["TH001"].ToString().Trim();
                            string TH002 = dr["TH002"].ToString().Trim();
                            ADD_MOCTH_MOCTI_TB_WKF_EXTERNAL_TASK(TH001, TH002);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議你加個 log 記錄錯誤
                // Log.Error("NEW_MOCTH_MOCTI 錯誤", ex);
            }
            finally
            {
                // 確保呼叫更新方法
                UPDATE_MOCTH_UDF01();
            }
        }

        public void ADD_MOCTH_MOCTI_TB_WKF_EXTERNAL_TASK(string TH001, string TH002)
        {
            DataTable DT = SEARCH_MOCTH_MOCTI(TH001, TH002);
            if (DT == null || DT.Rows.Count == 0) return;  // 無資料直接返回

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TH001"].ToString().Trim() + DT.Rows[0]["TH002"].ToString().Trim();

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORM_ID = SEARCHFORM_UOF_VERSION_ID("MOCI06.託外進貨單");
            if (!string.IsNullOrEmpty(FORM_ID))
            {
                Form.SetAttribute("formVersionId", FORM_ID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // ===== 表頭欄位 (TH 系列) =====
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TH001", DT.Rows[0]["TH001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TH002", DT.Rows[0]["TH002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TH003", DT.Rows[0]["TH003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TH005", DT.Rows[0]["TH005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TH010", DT.Rows[0]["TH010"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TH011", DT.Rows[0]["TH011"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TH012", DT.Rows[0]["TH012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TH013", DT.Rows[0]["TH013"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TH014", DT.Rows[0]["TH014"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TH031", DT.Rows[0]["TH031"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TH032", DT.Rows[0]["TH032"].ToString(), fillerName, fillerUserGuid, account);

            // ===== DataGrid (MOCTI 明細) =====
            AddFieldItem(xmlDoc, FormFieldValue, "MOCTI", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode MOCTI = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='MOCTI']");
            MOCTI.AppendChild(DataGrid);

            int rowCount = 0;
            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowCount.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TI003");
                AppendCellToRow(xmlDoc, Row, od, "TI004");
                AppendCellToRow(xmlDoc, Row, od, "TI005");
                AppendCellToRow(xmlDoc, Row, od, "TI006");
                AppendCellToRow(xmlDoc, Row, od, "TI007");
                AppendCellToRow(xmlDoc, Row, od, "TI008");
                AppendCellToRow(xmlDoc, Row, od, "TI009");
                AppendCellToRow(xmlDoc, Row, od, "TI010");
                AppendCellToRow(xmlDoc, Row, od, "TI011");
                AppendCellToRow(xmlDoc, Row, od, "TI013");
                AppendCellToRow(xmlDoc, Row, od, "TI014");
                AppendCellToRow(xmlDoc, Row, od, "TI046");
                AppendCellToRow(xmlDoc, Row, od, "TI047");

                DataGrid.AppendChild(Row);
                rowCount++;
            }

            // ===== 寫入 DB =====
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string sql = $@"
                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                        VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')";

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
                using (SqlCommand command = new SqlCommand(sql, connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = xmlDoc.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }


        public DataTable SEARCH_MOCTH_MOCTI(string TH001, string TH002)
        {
            try
            {
                // 建立並解密連線
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string query = @"
                                    SELECT *
                                         , USER_GUID, NAME
                                         , (SELECT TOP 1 GROUP_ID 
                                            FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                            WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS GROUP_ID
                                         , (SELECT TOP 1 TITLE_ID 
                                            FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                            WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS TITLE_ID
                                    FROM (
                                        SELECT 
                                            -- MOCTH 欄位
                                            [MOCTH].[COMPANY],[MOCTH].[CREATOR],[MOCTH].[USR_GROUP],
                                            [MOCTH].[CREATE_DATE],[MOCTH].[MODIFIER],[MOCTH].[MODI_DATE],
                                            [MOCTH].[FLAG],[MOCTH].[CREATE_TIME],[MOCTH].[MODI_TIME],
                                            [MOCTH].[TRANS_TYPE],[MOCTH].[TRANS_NAME],[MOCTH].[sync_date],
                                            [MOCTH].[sync_time],[MOCTH].[sync_mark],[MOCTH].[sync_count],
                                            [MOCTH].[DataUser],[MOCTH].[DataGroup],
                                            [MOCTH].[TH001],[MOCTH].[TH002],[MOCTH].[TH003],[MOCTH].[TH004],
                                            [MOCTH].[TH005],[MOCTH].[TH006],[MOCTH].[TH007],[MOCTH].[TH008],
                                            [MOCTH].[TH009],[MOCTH].[TH010],[MOCTH].[TH011],[MOCTH].[TH012],
                                            [MOCTH].[TH013],[MOCTH].[TH014],[MOCTH].[TH015],[MOCTH].[TH016],
                                            [MOCTH].[TH017],[MOCTH].[TH018],[MOCTH].[TH019],[MOCTH].[TH020],
                                            [MOCTH].[TH021],[MOCTH].[TH022],[MOCTH].[TH023],[MOCTH].[TH024],
                                            [MOCTH].[TH025],[MOCTH].[TH026],[MOCTH].[TH027],[MOCTH].[TH028],
                                            [MOCTH].[TH029],[MOCTH].[TH030],[MOCTH].[TH031],[MOCTH].[TH032],
                                            [MOCTH].[TH033],[MOCTH].[TH034],[MOCTH].[TH035],[MOCTH].[TH036],
                                            [MOCTH].[TH037],[MOCTH].[TH038],[MOCTH].[TH039],[MOCTH].[TH040],
                                            [MOCTH].[TH041],[MOCTH].[TH042],[MOCTH].[TH043],[MOCTH].[TH044],
                                            [MOCTH].[TH045],[MOCTH].[TH046],[MOCTH].[TH047],[MOCTH].[TH048],
                                            [MOCTH].[TH049],[MOCTH].[TH050],[MOCTH].[TH051],[MOCTH].[TH052],
                                            [MOCTH].[TH053],[MOCTH].[TH054],
                                            [MOCTH].[TH500],[MOCTH].[TH501],[MOCTH].[TH502],[MOCTH].[TH503],
                                            [MOCTH].[TH504],[MOCTH].[TH505],[MOCTH].[TH506],
                                            [MOCTH].[UDF01] AS MOCTHUDF01,
                                            [MOCTH].[UDF02] AS MOCTHUDF02,
                                            [MOCTH].[UDF03] AS MOCTHUDF03,
                                            [MOCTH].[UDF04] AS MOCTHUDF04,
                                            [MOCTH].[UDF05] AS MOCTHUDF05,
                                            [MOCTH].[UDF06] AS MOCTHUDF06,
                                            [MOCTH].[UDF07] AS MOCTHUDF07,
                                            [MOCTH].[UDF08] AS MOCTHUDF08,
                                            [MOCTH].[UDF09] AS MOCTHUDF09,
                                            [MOCTH].[UDF10] AS MOCTHUDF10,

                                            -- MOCTI 欄位
                                            [MOCTI].[TI001],[MOCTI].[TI002],[MOCTI].[TI003],[MOCTI].[TI004],
                                            [MOCTI].[TI005],[MOCTI].[TI006],[MOCTI].[TI007],[MOCTI].[TI008],
                                            [MOCTI].[TI009],[MOCTI].[TI010],[MOCTI].[TI011],[MOCTI].[TI012],
                                            [MOCTI].[TI013],[MOCTI].[TI014],[MOCTI].[TI015],[MOCTI].[TI016],
                                            [MOCTI].[TI017],[MOCTI].[TI018],[MOCTI].[TI019],[MOCTI].[TI020],
                                            [MOCTI].[TI021],[MOCTI].[TI022],[MOCTI].[TI023],[MOCTI].[TI024],
                                            [MOCTI].[TI025],[MOCTI].[TI026],[MOCTI].[TI027],[MOCTI].[TI028],
                                            [MOCTI].[TI029],[MOCTI].[TI030],[MOCTI].[TI031],[MOCTI].[TI032],
                                            [MOCTI].[TI033],[MOCTI].[TI034],[MOCTI].[TI035],[MOCTI].[TI036],
                                            [MOCTI].[TI037],[MOCTI].[TI038],[MOCTI].[TI039],[MOCTI].[TI040],
                                            [MOCTI].[TI041],[MOCTI].[TI042],[MOCTI].[TI043],[MOCTI].[TI044],
                                            [MOCTI].[TI045],[MOCTI].[TI046],[MOCTI].[TI047],[MOCTI].[TI048],
                                            [MOCTI].[TI049],[MOCTI].[TI050],[MOCTI].[TI051],[MOCTI].[TI052],
                                            [MOCTI].[TI053],[MOCTI].[TI054],[MOCTI].[TI055],[MOCTI].[TI056],
                                            [MOCTI].[TI057],[MOCTI].[TI058],[MOCTI].[TI059],[MOCTI].[TI060],
                                            [MOCTI].[TI061],[MOCTI].[TI062],[MOCTI].[TI063],[MOCTI].[TI064],
                                            [MOCTI].[TI065],[MOCTI].[TI066],[MOCTI].[TI067],[MOCTI].[TI068],
                                            [MOCTI].[TI069],[MOCTI].[TI070],[MOCTI].[TI071],[MOCTI].[TI072],
                                            [MOCTI].[TI073],[MOCTI].[TI074],[MOCTI].[TI075],
                                            [MOCTI].[TI500],[MOCTI].[TI501],[MOCTI].[TI502],[MOCTI].[TI503],
                                            [MOCTI].[TI504],[MOCTI].[TI505],[MOCTI].[TI506],[MOCTI].[TI507],
                                            [MOCTI].[TI550],[MOCTI].[TI551],[MOCTI].[TI552],[MOCTI].[TI553],
                                            [MOCTI].[TI554],[MOCTI].[TI555],[MOCTI].[TI556],[MOCTI].[TI557],
                                            [MOCTI].[TI558],[MOCTI].[TI559],[MOCTI].[TI560],[MOCTI].[TI561],
                                            [MOCTI].[TI562],[MOCTI].[TI563],[MOCTI].[TI564],[MOCTI].[TI565],
                                            [MOCTI].[TI567],[MOCTI].[TI568],[MOCTI].[TI569],[MOCTI].[TI570],
                                            [MOCTI].[TI571],[MOCTI].[TI572],[MOCTI].[TI573],[MOCTI].[TI574],
                                            [MOCTI].[TI575],[MOCTI].[TI576],
                                            [MOCTI].[UDF01] AS MOCTIUDF01,
                                            [MOCTI].[UDF02] AS MOCTIUDF02,
                                            [MOCTI].[UDF03] AS MOCTIUDF03,
                                            [MOCTI].[UDF04] AS MOCTIUDF04,
                                            [MOCTI].[UDF05] AS MOCTIUDF05,
                                            [MOCTI].[UDF06] AS MOCTIUDF06,
                                            [MOCTI].[UDF07] AS MOCTIUDF07,
                                            [MOCTI].[UDF08] AS MOCTIUDF08,
                                            [MOCTI].[UDF09] AS MOCTIUDF09,
                                            [MOCTI].[UDF10] AS MOCTIUDF10,

                                            [TB_EB_USER].USER_GUID, NAME,
                                            (SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=MOCTH.CREATOR) AS MV002

                                        FROM [TK].dbo.MOCTI, [TK].dbo.MOCTH
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                            ON [TB_EB_USER].ACCOUNT=MOCTH.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        WHERE TH001=TI001 AND TH002=TI002
                                          AND TH001=@TH001 AND TH002=@TH002
                                    ) AS TEMP;";

                    using (SqlCommand cmd = new SqlCommand(query, sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@TH001", TH001);
                        cmd.Parameters.AddWithValue("@TH002", TH002);

                        using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                        {
                            DataTable dt = new DataTable();
                            adapter.Fill(dt);
                            return dt.Rows.Count > 0 ? dt : null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議紀錄 Log
                return null;
            }
        }


        public void UPDATE_MOCTH_UDF01()
        {
            try
            {
                // 建立並解密連線
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                        UPDATE [TK].dbo.MOCTH
                                        SET UDF01 = 'UOF'
                                        WHERE UDF01 IN ('Y','y');
                                    ";

                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                        {
                            tran.Commit();  // 有更新 → 提交
                        }
                        else
                        {
                            tran.Rollback(); // 沒有資料更新 → 回滾
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議加日誌紀錄，方便追蹤
                // Log.Error("UPDATE_MOCTH_UDF01 發生錯誤", ex);
            }
        }

        //ERP-MOCI07.託外退貨單>轉入UOF簽核
        public void NEW_MOCTK_MOCTL()
        {
            try
            {
                // 解密連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    DataSet ds1 = new DataSet();
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    // 保留原本 SQL 條件
                    sbSql.Append(@"
                                SELECT TK001, TK002, UDF01
                                FROM [TK].dbo.MOCTK
                                WHERE TK021 = 'N'
                                  AND UDF01 IN ('Y','y')
                                ORDER BY TK001, TK002
                            ");

                    using (SqlDataAdapter adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                        sqlConn.Open();
                        ds1.Clear();
                        adapter1.Fill(ds1, "ds1");
                    }

                    // 判斷是否有資料，逐筆處理
                    if (ds1.Tables["ds1"].Rows.Count > 0)
                    {
                        foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                        {
                            string TK001 = dr["TK001"].ToString().Trim();
                            string TK002 = dr["TK002"].ToString().Trim();
                            ADD_MOCTK_MOCTL_TB_WKF_EXTERNAL_TASK(TK001, TK002);
                        }
                    }
                }
            }
            catch
            {
                // 這裡建議補上 log 記錄錯誤，方便追蹤
            }
            finally
            {
                UPDATE_MOCTK_UDF01();
            }
        }

        public void ADD_MOCTK_MOCTL_TB_WKF_EXTERNAL_TASK(string TK001, string TK002)
        {
            DataTable DT = SEARCH_MOCTK_MOCTL(TK001, TK002);
            if (DT == null || DT.Rows.Count == 0) return;   // 無資料直接返回

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TK001"].ToString().Trim() + DT.Rows[0]["TK002"].ToString().Trim();

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORM_ID = SEARCHFORM_UOF_VERSION_ID("MOCI07.託外退貨單");
            if (!string.IsNullOrEmpty(FORM_ID))
            {
                Form.SetAttribute("formVersionId", FORM_ID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            // Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // ------- 單頭欄位 -------
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TK001", DT.Rows[0]["TK001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TK002", DT.Rows[0]["TK002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TK003", DT.Rows[0]["TK003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TK004", DT.Rows[0]["TK004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TK010", DT.Rows[0]["TK010"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TK011", DT.Rows[0]["TK011"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TK012", DT.Rows[0]["TK012"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TK013", DT.Rows[0]["TK013"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TK030", DT.Rows[0]["TK030"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TK031", DT.Rows[0]["TK031"].ToString(), fillerName, fillerUserGuid, account);

            // ------- DataGrid 明細 (MOCTL) -------
            AddFieldItem(xmlDoc, FormFieldValue, "MOCTL", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode MOCTL = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='MOCTL']");
            MOCTL.AppendChild(DataGrid);

            int rowCount = 0;
            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowCount.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TL003");
                AppendCellToRow(xmlDoc, Row, od, "TL004");
                AppendCellToRow(xmlDoc, Row, od, "TL005");
                AppendCellToRow(xmlDoc, Row, od, "TL006");
                AppendCellToRow(xmlDoc, Row, od, "TL007");
                AppendCellToRow(xmlDoc, Row, od, "TL008");
                AppendCellToRow(xmlDoc, Row, od, "TL013");
                AppendCellToRow(xmlDoc, Row, od, "TL014");
                AppendCellToRow(xmlDoc, Row, od, "TL015");
                AppendCellToRow(xmlDoc, Row, od, "TL016");
                AppendCellToRow(xmlDoc, Row, od, "TL031");
                AppendCellToRow(xmlDoc, Row, od, "TL032");

                DataGrid.AppendChild(Row);
                rowCount++;
            }

            // ------- 寫入 DB -------
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string sql = $@"
                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                        VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')";

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
                using (SqlCommand command = new SqlCommand(sql, connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = xmlDoc.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                // 你可以改成 log 錯誤訊息
                Console.WriteLine("Error: " + ex.Message);
            }
        }

        public DataTable SEARCH_MOCTK_MOCTL(string TK001, string TK002)
        {
            DataTable resultTable = new DataTable();

            try
            {
                // 建立並解密連線
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string query = @"
                                    SELECT *
                                          ,USER_GUID,NAME
                                          ,(SELECT TOP 1 GROUP_ID 
                                            FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                            WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS GROUP_ID
                                          ,(SELECT TOP 1 TITLE_ID 
                                            FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                            WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS TITLE_ID
                                    FROM (
                                        SELECT 
                                           [MOCTK].[COMPANY]
                                                        ,[MOCTK].[CREATOR]
                                                        ,[MOCTK].[USR_GROUP]
                                                        ,[MOCTK].[CREATE_DATE]
                                                        ,[MOCTK].[MODIFIER]
                                                        ,[MOCTK].[MODI_DATE]
                                                        ,[MOCTK].[FLAG]
                                                        ,[MOCTK].[CREATE_TIME]
                                                        ,[MOCTK].[MODI_TIME]
                                                        ,[MOCTK].[TRANS_TYPE]
                                                        ,[MOCTK].[TRANS_NAME]
                                                        ,[MOCTK].[sync_date]
                                                        ,[MOCTK].[sync_time]
                                                        ,[MOCTK].[sync_mark]
                                                        ,[MOCTK].[sync_count]
                                                        ,[MOCTK].[DataUser]
                                                        ,[MOCTK].[DataGroup]
                                                        ,[MOCTK].[TK001]
                                                        ,[MOCTK].[TK002]
                                                        ,[MOCTK].[TK003]
                                                        ,[MOCTK].[TK004]
                                                        ,[MOCTK].[TK005]
                                                        ,[MOCTK].[TK006]
                                                        ,[MOCTK].[TK007]
                                                        ,[MOCTK].[TK008]
                                                        ,[MOCTK].[TK009]
                                                        ,[MOCTK].[TK010]
                                                        ,[MOCTK].[TK011]
                                                        ,[MOCTK].[TK012]
                                                        ,[MOCTK].[TK013]
                                                        ,[MOCTK].[TK014]
                                                        ,[MOCTK].[TK015]
                                                        ,[MOCTK].[TK016]
                                                        ,[MOCTK].[TK017]
                                                        ,[MOCTK].[TK018]
                                                        ,[MOCTK].[TK019]
                                                        ,[MOCTK].[TK020]
                                                        ,[MOCTK].[TK021]
                                                        ,[MOCTK].[TK022]
                                                        ,[MOCTK].[TK023]
                                                        ,[MOCTK].[TK024]
                                                        ,[MOCTK].[TK025]
                                                        ,[MOCTK].[TK026]
                                                        ,[MOCTK].[TK027]
                                                        ,[MOCTK].[TK028]
                                                        ,[MOCTK].[TK029]
                                                        ,[MOCTK].[TK030]
                                                        ,[MOCTK].[TK031]
                                                        ,[MOCTK].[TK032]
                                                        ,[MOCTK].[TK033]
                                                        ,[MOCTK].[TK034]
                                                        ,[MOCTK].[TK035]
                                                        ,[MOCTK].[TK036]
                                                        ,[MOCTK].[TK037]
                                                        ,[MOCTK].[TK038]
                                                        ,[MOCTK].[TK039]
                                                        ,[MOCTK].[TK040]
                                                        ,[MOCTK].[TK041]
                                                        ,[MOCTK].[TK042]
                                                        ,[MOCTK].[TK043]
                                                        ,[MOCTK].[TK044]
                                                        ,[MOCTK].[TK045]
                                                        ,[MOCTK].[TK046]
                                                        ,[MOCTK].[TK047]
                                                        ,[MOCTK].[TK048]
                                                        ,[MOCTK].[TK049]
                                                        ,[MOCTK].[TK050]
                                                        ,[MOCTK].[TK051]
                                                        ,[MOCTK].[TK052]
                                                        ,[MOCTK].[TK053]
                                                        ,[MOCTK].[TK054]
                                                        ,[MOCTK].[TK055]
                                                        ,[MOCTK].[UDF01] AS 'MOCTKUDF01'
                                                        ,[MOCTK].[UDF02] AS 'MOCTKUDF02'
                                                        ,[MOCTK].[UDF03] AS 'MOCTKUDF03'
                                                        ,[MOCTK].[UDF04] AS 'MOCTKUDF04'
                                                        ,[MOCTK].[UDF05] AS 'MOCTKUDF05'
                                                        ,[MOCTK].[UDF06] AS 'MOCTKUDF06'
                                                        ,[MOCTK].[UDF07] AS 'MOCTKUDF07'
                                                        ,[MOCTK].[UDF08] AS 'MOCTKUDF08' 
                                                        ,[MOCTK].[UDF09] AS 'MOCTKUDF09'
                                                        ,[MOCTK].[UDF10] AS 'MOCTKUDF10'
                                                        ,[MOCTL].[TL001]
                                                        ,[MOCTL].[TL002]
                                                        ,[MOCTL].[TL003]
                                                        ,[MOCTL].[TL004]
                                                        ,[MOCTL].[TL005]
                                                        ,[MOCTL].[TL006]
                                                        ,[MOCTL].[TL007]
                                                        ,[MOCTL].[TL008]
                                                        ,[MOCTL].[TL009]
                                                        ,[MOCTL].[TL010]
                                                        ,[MOCTL].[TL011]
                                                        ,[MOCTL].[TL012]
                                                        ,[MOCTL].[TL013]
                                                        ,[MOCTL].[TL014]
                                                        ,[MOCTL].[TL015]
                                                        ,[MOCTL].[TL016]
                                                        ,[MOCTL].[TL017]
                                                        ,[MOCTL].[TL018]
                                                        ,[MOCTL].[TL019]
                                                        ,[MOCTL].[TL020]
                                                        ,[MOCTL].[TL021]
                                                        ,[MOCTL].[TL022]
                                                        ,[MOCTL].[TL023]
                                                        ,[MOCTL].[TL024]
                                                        ,[MOCTL].[TL025]
                                                        ,[MOCTL].[TL026]
                                                        ,[MOCTL].[TL027]
                                                        ,[MOCTL].[TL028]
                                                        ,[MOCTL].[TL029]
                                                        ,[MOCTL].[TL030]
                                                        ,[MOCTL].[TL031]
                                                        ,[MOCTL].[TL032]
                                                        ,[MOCTL].[TL033]
                                                        ,[MOCTL].[TL034]
                                                        ,[MOCTL].[TL035]
                                                        ,[MOCTL].[TL036]
                                                        ,[MOCTL].[TL037]
                                                        ,[MOCTL].[TL038]
                                                        ,[MOCTL].[TL039]
                                                        ,[MOCTL].[TL040]
                                                        ,[MOCTL].[TL041]
                                                        ,[MOCTL].[TL042]
                                                        ,[MOCTL].[TL043]
                                                        ,[MOCTL].[TL044]
                                                        ,[MOCTL].[TL045]
                                                        ,[MOCTL].[TL046]
                                                        ,[MOCTL].[TL047]
                                                        ,[MOCTL].[TL048]
                                                        ,[MOCTL].[TL049]
                                                        ,[MOCTL].[TL500]
                                                        ,[MOCTL].[TL501]
                                                        ,[MOCTL].[TL502]
                                                        ,[MOCTL].[TL503]
                                                        ,[MOCTL].[TL504]
                                                        ,[MOCTL].[TL505]
                                                        ,[MOCTL].[TL506]
                                                        ,[MOCTL].[TL507]
                                                        ,[MOCTL].[UDF01]  AS 'MOCTLUDF01'
                                                        ,[MOCTL].[UDF02]  AS 'MOCTLUDF02'
                                                        ,[MOCTL].[UDF03]  AS 'MOCTLUDF03'
                                                        ,[MOCTL].[UDF04]  AS 'MOCTLUDF04'
                                                        ,[MOCTL].[UDF05]  AS 'MOCTLUDF05'
                                                        ,[MOCTL].[UDF06]  AS 'MOCTLUDF06'
                                                        ,[MOCTL].[UDF07]  AS 'MOCTLUDF07'
                                                        ,[MOCTL].[UDF08]  AS 'MOCTLUDF08'
                                                        ,[MOCTL].[UDF09]  AS 'MOCTLUDF09'
                                                        ,[MOCTL].[UDF10]  AS 'MOCTLUDF10'

                                                        ,[TB_EB_USER].USER_GUID,NAME
                                                        ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=MOCTK.CREATOR) AS 'MV002'

                                        FROM [TK].dbo.MOCTL
                                        JOIN [TK].dbo.MOCTK ON TK001=TL001 AND TK002=TL002
                                        LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                            ON [TB_EB_USER].ACCOUNT = MOCTK.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                        WHERE TK001=@TK001 AND TK002=@TK002
                                    ) AS TEMP;
                                ";

                    using (SqlDataAdapter adapter = new SqlDataAdapter(query, sqlConn))
                    {
                        adapter.SelectCommand.Parameters.AddWithValue("@TK001", TK001);
                        adapter.SelectCommand.Parameters.AddWithValue("@TK002", TK002);

                        resultTable.Clear();
                        adapter.Fill(resultTable);
                    }
                }

                return resultTable.Rows.Count > 0 ? resultTable : null;
            }
            catch (Exception ex)
            {
                // 建議加 log 紀錄錯誤
                // Log.Error("SEARCH_MOCTK_MOCTL 錯誤", ex);
                return null;
            }
        }

      
        public void UPDATE_MOCTK_UDF01()
        {
            try
            {
                // 解密連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                        UPDATE [TK].dbo.MOCTK
                                        SET UDF01 = 'UOF'
                                        WHERE UDF01 IN ('Y','y')
                                    ";

                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                        {
                            tran.Commit();   // 有更新才 commit
                        }
                        else
                        {
                            tran.Rollback(); // 沒資料更新則 rollback
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議補上 log 紀錄錯誤
                // Log.Error("UPDATE_MOCTK_UDF01 發生錯誤", ex);
            }
        }


        public void NEW_MOCTF_MOCTG()
        {

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp22"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();

                //TL006='N' AND (UDF01 IN ('Y','y') ) 
                sbSql.AppendFormat(@" 
                                    SELECT TF001,TF002,UDF01
                                    FROM [TK].dbo.MOCTF
                                    WHERE TF006='N'                                  
                                    AND UDF01 IN ('Y','y')
                                    ORDER BY TF001,TF002


                                    ");

                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");


                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        ADD_MOCTF_MOCTG_TB_WKF_EXTERNAL_TASK(dr["TF001"].ToString().Trim(), dr["TF002"].ToString().Trim());
                    }

                }
                else
                {

                }

            }
            catch
            {

            }
            finally
            {
                sqlConn.Close();
            }

            UPDATE_MOCTF_UDF01();
        }
        public void ADD_MOCTF_MOCTG_TB_WKF_EXTERNAL_TASK(string TF001, string TF002)
        {

            DataTable DT = SEARCH_MOCTF_MOCTG(TF001, TF002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TF001"].ToString().Trim() + DT.Rows[0]["TF002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            //建立根節點
            XmlElement Form = xmlDoc.CreateElement("Form");

            //正式的id
            string FORM_ID = SEARCHFORM_UOF_VERSION_ID("MOCI05.生產入庫單");

            if (!string.IsNullOrEmpty(FORM_ID))
            {
                Form.SetAttribute("formVersionId", FORM_ID);
            }


            Form.SetAttribute("urgentLevel", "2");
            //加入節點底下
            xmlDoc.AppendChild(Form);

            ////建立節點Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            //加入節點底下
            Form.AppendChild(Applicant);

            //建立節點 Comment
            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            //加入至節點底下
            Applicant.AppendChild(Comment);

            //建立節點 FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            //加入至節點底下
            Form.AppendChild(FormFieldValue);

            //建立節點FieldItem
            //ID 表單編號	
            XmlElement FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "ID");
            FieldItem.SetAttribute("fieldValue", "");
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);


            //建立節點FieldItem
            //TF001	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TF001");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TF001"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //TF002	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TF002");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TF002"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //TF003	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TF003");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TF003"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //TF011	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TF011");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TF011"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下



            //DataGrid
            //建立節點FieldItem
            //MOCTG
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MOCTG");
            FieldItem.SetAttribute("fieldValue", "");
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點 DataGrid
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            //DataGrid 加入至 TB 節點底下
            XmlNode PURTD = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='MOCTG']");
            PURTD.AppendChild(DataGrid);


            foreach (DataRow od in DT.Rows)
            {
                // 新增 Row
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", (rowscounts).ToString());

                //Row	TG003
                XmlElement Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG003");
                Cell.SetAttribute("fieldValue", od["TG003"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TG004
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG004");
                Cell.SetAttribute("fieldValue", od["TG004"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                //Row	TG005
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG005");
                Cell.SetAttribute("fieldValue", od["TG005"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                //Row	TG006
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG006");
                Cell.SetAttribute("fieldValue", od["TG006"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                //Row	TG007
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG007");
                Cell.SetAttribute("fieldValue", od["TG007"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                //Row	TG010
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG010");
                Cell.SetAttribute("fieldValue", od["TG010"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                //Row	TG011
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG011");
                Cell.SetAttribute("fieldValue", od["TG011"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                //Row	TG017
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG017");
                Cell.SetAttribute("fieldValue", od["TG017"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                //Row	TG013
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG013");
                Cell.SetAttribute("fieldValue", od["TG013"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                //Row	TG014
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG014");
                Cell.SetAttribute("fieldValue", od["TG014"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                //Row	TG015
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG015");
                Cell.SetAttribute("fieldValue", od["TG015"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                //Row	TG018
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG018");
                Cell.SetAttribute("fieldValue", od["TG018"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                //Row	TG019
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TG019");
                Cell.SetAttribute("fieldValue", od["TG019"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Row.AppendChild(Cell);
                //Row

                rowscounts = rowscounts + 1;

                //DataGrid PURTM
                XmlNode DataGridS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='MOCTG']/DataGrid");
                DataGridS.AppendChild(Row);

            }


            ////用ADDTACK，直接啟動起單
            //ADDTACK(Form);

            //ADD TO DB
            ////string connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ToString();

            //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
            //sqlConn = new SqlConnection(connectionString);

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);
            connectionString = sqlConn.ConnectionString.ToString();

            StringBuilder queryString = new StringBuilder();




            queryString.AppendFormat(@" INSERT INTO [{0}].dbo.TB_WKF_EXTERNAL_TASK
                                         (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(),@XML,2,'{1}')
                                        ", DBNAME, EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public DataTable SEARCH_MOCTF_MOCTG(string TK001, string TK002)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);


                sbSql.Clear();
                sbSqlQuery.Clear();

                //庫存數量看LA009 IN ('20004','20006','20008','20019','20020'

                sbSql.AppendFormat(@"  
                                    
                                  SELECT *
                                    ,USER_GUID,NAME
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                    FROM 
                                    (
                                    SELECT 

                                    [MOCTF].[COMPANY]
                                    ,[MOCTF].[CREATOR]
                                    ,[MOCTF].[USR_GROUP]
                                    ,[MOCTF].[CREATE_DATE]
                                    ,[MOCTF].[MODIFIER]
                                    ,[MOCTF].[MODI_DATE]
                                    ,[MOCTF].[FLAG]
                                    ,[MOCTF].[CREATE_TIME]
                                    ,[MOCTF].[MODI_TIME]
                                    ,[MOCTF].[TRANS_TYPE]
                                    ,[MOCTF].[TRANS_NAME]
                                    ,[MOCTF].[sync_date]
                                    ,[MOCTF].[sync_time]
                                    ,[MOCTF].[sync_mark]
                                    ,[MOCTF].[sync_count]
                                    ,[MOCTF].[DataUser]
                                    ,[MOCTF].[DataGroup]
                                    ,[MOCTF].[TF001]
                                    ,[MOCTF].[TF002]
                                    ,[MOCTF].[TF003]
                                    ,[MOCTF].[TF004]
                                    ,[MOCTF].[TF005]
                                    ,[MOCTF].[TF006]
                                    ,[MOCTF].[TF007]
                                    ,[MOCTF].[TF008]
                                    ,[MOCTF].[TF009]
                                    ,[MOCTF].[TF010]
                                    ,[MOCTF].[TF011]
                                    ,[MOCTF].[TF012]
                                    ,[MOCTF].[TF013]
                                    ,[MOCTF].[TF014]
                                    ,[MOCTF].[TF015]
                                    ,[MOCTF].[TF016]
                                    ,[MOCTF].[TF017]
                                    ,[MOCTF].[TF018]
                                    ,[MOCTF].[TF019]
                                    ,[MOCTF].[TF020]
                                    ,[MOCTF].[TF021]
                                    ,[MOCTF].[TF022]
                                    ,[MOCTF].[TF023]
                                    ,[MOCTF].[TF024]
                                    ,[MOCTF].[TF025]
                                    ,[MOCTF].[TF026]
                                    ,[MOCTF].[TF027]
                                    ,[MOCTF].[UDF01] AS 'MOCTFUDF01'
                                    ,[MOCTF].[UDF02] AS 'MOCTFUDF02'
                                    ,[MOCTF].[UDF03] AS 'MOCTFUDF03'
                                    ,[MOCTF].[UDF04] AS 'MOCTFUDF04'
                                    ,[MOCTF].[UDF05] AS 'MOCTFUDF05'
                                    ,[MOCTF].[UDF06] AS 'MOCTFUDF06'
                                    ,[MOCTF].[UDF07] AS 'MOCTFUDF07'
                                    ,[MOCTF].[UDF08] AS 'MOCTFUDF08'
                                    ,[MOCTF].[UDF09] AS 'MOCTFUDF09'
                                    ,[MOCTF].[UDF10] AS 'MOCTFUDF10'
                                    ,[MOCTG].[TG001]
                                    ,[MOCTG].[TG002]
                                    ,[MOCTG].[TG003]
                                    ,[MOCTG].[TG004]
                                    ,[MOCTG].[TG005]
                                    ,[MOCTG].[TG006]
                                    ,[MOCTG].[TG007]
                                    ,[MOCTG].[TG008]
                                    ,[MOCTG].[TG009]
                                    ,[MOCTG].[TG010]
                                    ,[MOCTG].[TG011]
                                    ,[MOCTG].[TG012]
                                    ,[MOCTG].[TG013]
                                    ,[MOCTG].[TG014]
                                    ,[MOCTG].[TG015]
                                    ,[MOCTG].[TG016]
                                    ,[MOCTG].[TG017]
                                    ,[MOCTG].[TG018]
                                    ,[MOCTG].[TG019]
                                    ,[MOCTG].[TG020]
                                    ,[MOCTG].[TG021]
                                    ,[MOCTG].[TG022]
                                    ,[MOCTG].[TG023]
                                    ,[MOCTG].[TG024]
                                    ,[MOCTG].[TG025]
                                    ,[MOCTG].[TG026]
                                    ,[MOCTG].[TG027]
                                    ,[MOCTG].[TG028]
                                    ,[MOCTG].[TG029]
                                    ,[MOCTG].[TG030]
                                    ,[MOCTG].[TG031]
                                    ,[MOCTG].[TG032]
                                    ,[MOCTG].[TG033]
                                    ,[MOCTG].[TG034]
                                    ,[MOCTG].[TG035]
                                    ,[MOCTG].[TG036]
                                    ,[MOCTG].[TG037]
                                    ,[MOCTG].[TG038]
                                    ,[MOCTG].[TG039]
                                    ,[MOCTG].[TG040]
                                    ,[MOCTG].[TG041]
                                    ,[MOCTG].[TG042]
                                    ,[MOCTG].[TG043]
                                    ,[MOCTG].[TG044]
                                    ,[MOCTG].[TG045]
                                    ,[MOCTG].[TG500]
                                    ,[MOCTG].[TG501]
                                    ,[MOCTG].[TG502]
                                    ,[MOCTG].[TG503]
                                    ,[MOCTG].[TG504]
                                    ,[MOCTG].[TG505]
                                    ,[MOCTG].[TG506]
                                    ,[MOCTG].[TG507]
                                    ,[MOCTG].[TG550]
                                    ,[MOCTG].[TG553]
                                    ,[MOCTG].[TG554]
                                    ,[MOCTG].[TG555]
                                    ,[MOCTG].[TG556]
                                    ,[MOCTG].[TG560]
                                    ,[MOCTG].[TG561]
                                    ,[MOCTG].[TG562]
                                    ,[MOCTG].[TG563]
                                    ,[MOCTG].[TG564]
                                    ,[MOCTG].[TG565]
                                    ,[MOCTG].[TG567]
                                    ,[MOCTG].[TG568]
                                    ,[MOCTG].[TG569]
                                    ,[MOCTG].[TG570]
                                    ,[MOCTG].[TG571]
                                    ,[MOCTG].[TG572]
                                    ,[MOCTG].[TG573]
                                    ,[MOCTG].[UDF01] AS 'MOCTGUDF01'
                                    ,[MOCTG].[UDF02] AS 'MOCTGUDF02'
                                    ,[MOCTG].[UDF03] AS 'MOCTGUDF03'
                                    ,[MOCTG].[UDF04] AS 'MOCTGUDF04'
                                    ,[MOCTG].[UDF05] AS 'MOCTGUDF05'
                                    ,[MOCTG].[UDF06] AS 'MOCTGUDF06'
                                    ,[MOCTG].[UDF07] AS 'MOCTGUDF07'
                                    ,[MOCTG].[UDF08] AS 'MOCTGUDF08'
                                    ,[MOCTG].[UDF09] AS 'MOCTGUDF09'
                                    ,[MOCTG].[UDF10] AS 'MOCTGUDF10'
 
                                    ,[TB_EB_USER].USER_GUID,NAME
                                    ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=MOCTF.CREATOR) AS 'MV002'

                                    FROM [TK].dbo.MOCTG,[TK].dbo.MOCTF
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT=MOCTF.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE 1=1
                                    AND TF001=TG001 AND TF002=TG002
                                    AND TF001='{0}' AND TF002='{1}'
                                    ) AS TEMP
                                    
                              
                                    ", TK001, TK002);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_MOCTF_UDF01()
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                    UPDATE  [TK].dbo.MOCTF
                                    SET UDF01 = 'UOF'                                   
                                    WHERE  UDF01 IN ('Y','y')

                                    ");

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  
                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }
        }
        //轉入13.研發類表單:1002.設計需求內容清單
        public void NEW_TKRESEARCH_TK_UOF_RESEARCH_1002()
        {
            SqlDataAdapter adapter = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder = new SqlCommandBuilder();
            DataSet ds = new DataSet();

            try
            {

                // 20210902 密碼解密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSql.Append(@"
                                SELECT DOC_NBR, *
                                FROM [UOF].dbo.TB_WKF_TASK
                                WHERE TASK_STATUS = '2'
                                AND TASK_RESULT = '0'
                                AND DOC_NBR LIKE 'RD1002%'
                                AND DOC_NBR >= 'RD1002230400001'
                                AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN (
                                    SELECT [RDF1002SN] 
                                    FROM [192.168.1.105].[TKRESEARCH].[dbo].[TK_UOF_RESEARCH_1002]
                                )
                            ");

                    adapter = new SqlDataAdapter(sbSql.ToString(), conn);
                    sqlCmdBuilder = new SqlCommandBuilder(adapter);

                    conn.Open();
                    ds.Clear();
                    adapter.Fill(ds, "TB_WKF_TASK");

                    if (ds.Tables["TB_WKF_TASK"].Rows.Count > 0)
                    {
                        foreach (DataRow dr in ds.Tables["TB_WKF_TASK"].Rows)
                        {
                            string docNbr = dr["DOC_NBR"].ToString().Trim();
                            SEARCHUOFTB_WKF_TASK_RD1002(docNbr);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議加上 Log 紀錄錯誤
                Console.WriteLine("Error in NEW_TKRESEARCH_TK_UOF_RESEARCH_1002: " + ex.Message);
            }
        }


        //找出UOF表單的資料，將CURRENT_DOC的內容，轉成xmlDoc
        //從xmlDoc找出各節點的Attributes
        public void SEARCHUOFTB_WKF_TASK_RD1002(string DOC_NBR)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                // 20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                // 由 SQL 直接從 CURRENT_DOC 的 XML 抽出欄位值，並在 SQL 用 REPLACE 去掉 &#xD; 與 &#xA;
                sbSql.AppendFormat(@"
                                SELECT
                                    T.DOC_NBR,
                                    U.NAME AS UOF_NAME,
                                    U.USER_GUID,
                                    -- 單一欄位直接取 attribute @fieldValue 或 @fillerName
                                    T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDF1002SN""]/@fieldValue)[1]', 'nvarchar(200)') AS RDF1002SN,
                                    T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002DATE1""]/@fillerName)[1]', 'nvarchar(200)') AS NAME_FORM,
                                    T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002DATE1""]/@fieldValue)[1]', 'nvarchar(200)') AS RDFrm1002DATE1,
                                    T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002DATE2""]/@fieldValue)[1]', 'nvarchar(200)') AS RDFrm1002DATE2,
                                    T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002CS""]/@fieldValue)[1]', 'nvarchar(200)') AS RDFrm1002CS,
                                    T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002DP""]/@fieldValue)[1]', 'nvarchar(200)') AS RDFrm1002DP,
                                    T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002PD""]/@fieldValue)[1]', 'nvarchar(200)') AS RDFrm1002PD,
                                    T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002ST""]/@fieldValue)[1]', 'nvarchar(200)') AS RDFrm1002ST,
                                    -- 移除 CR/LF entity
                                    REPLACE(REPLACE(T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002DS""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', '') AS RDFrm1002DS,
                                    -- 取 DataGrid 第一列的各 Cell 欄位值（並移除 CR/LF entity）
                                    REPLACE(REPLACE(T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002G7""]/DataGrid/Row/Cell[@fieldId=""RDFrm1002G7T1""]/@fieldValue)[1]', 'nvarchar(400)'), '&#xD;', ''), '&#xA;', '') AS RDFrm1002G7T1,
                                    REPLACE(REPLACE(T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002G7""]/DataGrid/Row/Cell[@fieldId=""RDFrm1002G7T2""]/@fieldValue)[1]', 'nvarchar(400)'), '&#xD;', ''), '&#xA;', '') AS RDFrm1002G7T2,
                                    REPLACE(REPLACE(T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002G7""]/DataGrid/Row/Cell[@fieldId=""RDFrm1002G7T3""]/@fieldValue)[1]', 'nvarchar(400)'), '&#xD;', ''), '&#xA;', '') AS RDFrm1002G7T3,
                                    REPLACE(REPLACE(T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002G7""]/DataGrid/Row/Cell[@fieldId=""RDFrm1002G7T4""]/@fieldValue)[1]', 'nvarchar(400)'), '&#xD;', ''), '&#xA;', '') AS RDFrm1002G7T4,
                                    REPLACE(REPLACE(T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002G7""]/DataGrid/Row/Cell[@fieldId=""RDFrm1002G7T5""]/@fieldValue)[1]', 'nvarchar(400)'), '&#xD;', ''), '&#xA;', '') AS RDFrm1002G7T5,
                                    REPLACE(REPLACE(T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""RDFrm1002G7""]/DataGrid/Row/Cell[@fieldId=""RDFrm1002G5T6""]/@fieldValue)[1]', 'nvarchar(400)'), '&#xD;', ''), '&#xA;', '') AS RDFrm1002G5T6
                                FROM [UOF].DBO.TB_WKF_TASK T
                                LEFT JOIN [UOF].[dbo].[TB_EB_USER] U ON U.USER_GUID = T.USER_GUID
                                WHERE T.DOC_NBR LIKE '{0}%'
                                ", DOC_NBR);

                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    DataRow row = ds1.Tables["ds1"].Rows[0];

                    string RDF1002SN = row["DOC_NBR"] == DBNull.Value ? "" : row["DOC_NBR"].ToString();
                    // NAME 這個變數您原本是從 XML 的 fillerName 取得，這裡用 NAME_FORM（SQL 取的欄位）
                    string NAME = row.Table.Columns.Contains("NAME_FORM") && row["NAME_FORM"] != DBNull.Value ? row["NAME_FORM"].ToString() :
                                  (row.Table.Columns.Contains("UOF_NAME") && row["UOF_NAME"] != DBNull.Value ? row["UOF_NAME"].ToString() : "");
                    string RDFrm1002DATE1 = row["RDFrm1002DATE1"] == DBNull.Value ? "" : row["RDFrm1002DATE1"].ToString();
                    string RDFrm1002DATE2 = row["RDFrm1002DATE2"] == DBNull.Value ? "" : row["RDFrm1002DATE2"].ToString();
                    string RDFrm1002CS = row["RDFrm1002CS"] == DBNull.Value ? "" : row["RDFrm1002CS"].ToString();
                    string RDFrm1002DP = row["RDFrm1002DP"] == DBNull.Value ? "" : row["RDFrm1002DP"].ToString();
                    string RDFrm1002PD = row["RDFrm1002PD"] == DBNull.Value ? "" : row["RDFrm1002PD"].ToString();
                    string RDFrm1002ST = row["RDFrm1002ST"] == DBNull.Value ? "" : row["RDFrm1002ST"].ToString();
                    string RDFrm1002DS = row["RDFrm1002DS"] == DBNull.Value ? "" : row["RDFrm1002DS"].ToString();

                    string RDFrm1002G7T1 = row["RDFrm1002G7T1"] == DBNull.Value ? "" : row["RDFrm1002G7T1"].ToString();
                    string RDFrm1002G7T2 = row["RDFrm1002G7T2"] == DBNull.Value ? "" : row["RDFrm1002G7T2"].ToString();
                    string RDFrm1002G7T3 = row["RDFrm1002G7T3"] == DBNull.Value ? "" : row["RDFrm1002G7T3"].ToString();
                    string RDFrm1002G7T4 = row["RDFrm1002G7T4"] == DBNull.Value ? "" : row["RDFrm1002G7T4"].ToString();
                    string RDFrm1002G7T5 = row["RDFrm1002G7T5"] == DBNull.Value ? "" : row["RDFrm1002G7T5"].ToString();
                    string RDFrm1002G5T6 = row["RDFrm1002G5T6"] == DBNull.Value ? "" : row["RDFrm1002G5T6"].ToString();

                    // 呼叫既有的新增方法（參數順序沿用您原本的）
                    ADD_TK_UOF_RESEARCH_1002(
                         RDF1002SN,
                         NAME,
                         RDFrm1002DATE1,
                         RDFrm1002DATE2,
                         RDFrm1002CS,
                         RDFrm1002DP,
                         RDFrm1002PD,
                         RDFrm1002ST,
                         RDFrm1002G7T1,
                         RDFrm1002G7T2,
                         RDFrm1002G7T3,
                         RDFrm1002G7T4,
                         RDFrm1002G7T5,
                         RDFrm1002G5T6,
                         RDFrm1002DS
                    );
                }
                else
                {
                    // 沒資料
                }
            }
            catch (Exception EX)
            {
                // 例外處理（沿用您原本空的 catch）
            }
            finally
            {
                sqlConn.Close();
            }
        }



        public void ADD_TK_UOF_RESEARCH_1002(
                 string RDF1002SN,
                 string NAME,
                 string RDFrm1002DATE1,
                 string RDFrm1002DATE2,
                 string RDFrm1002CS,
                 string RDFrm1002DP,
                 string RDFrm1002PD,
                 string RDFrm1002ST,
                 string RDFrm1002G7T1,
                 string RDFrm1002G7T2,
                 string RDFrm1002G7T3,
                 string RDFrm1002G7T4,
                 string RDFrm1002G7T5,
                 string RDFrm1002G5T6,
                 string RDFrm1002DS
             )
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = new SqlCommand(@"
                        INSERT INTO [TKRESEARCH].[dbo].[TK_UOF_RESEARCH_1002]
                        (
                            [RDF1002SN],
                            [NAME],
                            [RDFrm1002DATE1],
                            [RDFrm1002DATE2],
                            [RDFrm1002CS],
                            [RDFrm1002DP],
                            [RDFrm1002PD],
                            [RDFrm1002ST],
                            [RDFrm1002G7T1],
                            [RDFrm1002G7T2],
                            [RDFrm1002G7T3],
                            [RDFrm1002G7T4],
                            [RDFrm1002G7T5],
                            [RDFrm1002G5T6],
                            [RDFrm1002DS]
                        )
                        VALUES
                        (
                            @RDF1002SN,
                            @NAME,
                            @RDFrm1002DATE1,
                            @RDFrm1002DATE2,
                            @RDFrm1002CS,
                            @RDFrm1002DP,
                            @RDFrm1002PD,
                            @RDFrm1002ST,
                            @RDFrm1002G7T1,
                            @RDFrm1002G7T2,
                            @RDFrm1002G7T3,
                            @RDFrm1002G7T4,
                            @RDFrm1002G7T5,
                            @RDFrm1002G5T6,
                            @RDFrm1002DS
                        )", sqlConn, tran))
                    {
                        cmd.Parameters.AddWithValue("@RDF1002SN", RDF1002SN ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@NAME", NAME ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002DATE1", RDFrm1002DATE1 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002DATE2", RDFrm1002DATE2 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002CS", RDFrm1002CS ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002DP", RDFrm1002DP ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002PD", RDFrm1002PD ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002ST", RDFrm1002ST ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002G7T1", RDFrm1002G7T1 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002G7T2", RDFrm1002G7T2 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002G7T3", RDFrm1002G7T3 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002G7T4", RDFrm1002G7T4 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002G7T5", RDFrm1002G7T5 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002G5T6", RDFrm1002G5T6 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@RDFrm1002DS", RDFrm1002DS ?? (object)DBNull.Value);

                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                        {
                            tran.Commit();
                        }
                        else
                        {
                            tran.Rollback();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議記錄 Log，方便追蹤
                Console.WriteLine("ADD_TK_UOF_RESEARCH_1002 發生錯誤：" + ex.Message);
            }
        }

        //轉入10.行企類表單-1002.產品設計申請
        public void NEW_TKRESEARCH_TK_UOF_DESIGN_1002()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();
                    sbSql.Append(@"
                                SELECT 
                                    TB_WKF_FORM.FORM_NAME,
                                    DOC_NBR,
                                    TB_WKF_TASK.*
                                FROM [UOF].dbo.TB_WKF_TASK
                                INNER JOIN [UOF].dbo.TB_WKF_FORM_VERSION
                                    ON TB_WKF_TASK.FORM_VERSION_ID = TB_WKF_FORM_VERSION.FORM_VERSION_ID
                                INNER JOIN [UOF].dbo.TB_WKF_FORM
                                    ON TB_WKF_FORM.FORM_ID = TB_WKF_FORM_VERSION.FORM_ID
                                WHERE TB_WKF_FORM.FORM_NAME IN ('1002.產品設計申請')
                                  AND TB_WKF_TASK.TASK_STATUS = '1'
                                  AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN 
                                      (SELECT [FIELDS1] FROM [192.168.1.105].[TKRESEARCH].[dbo].[TK_UOF_DESIGN_1002])
                            ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        DataSet ds1 = new DataSet();
                        sqlConn.Open();
                        adapter.Fill(ds1, "ds1");

                        if (ds1.Tables["ds1"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                            {
                                SEARCH_UOF_TK_UOF_DESIGN_1002(dr["DOC_NBR"].ToString());
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議記錄 Log 方便追蹤
                Console.WriteLine("NEW_TKRESEARCH_TK_UOF_DESIGN_1002 發生錯誤：" + ex.Message);
            }
        }


        //找出UOF表單的資料，將CURRENT_DOC的內容，轉成xmlDoc
        //從xmlDoc找出各節點的Attributes
        public void SEARCH_UOF_TK_UOF_DESIGN_1002(string DOC_NBR)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();

                sbSql.AppendFormat(@"
            SELECT 
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00001""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS1,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00000""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS2,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00005""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS3,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00012""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS4,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00002""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS5,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00003""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS6,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00004""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS7,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00011""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS8,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00013""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS9,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00010""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS10,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00009""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS11,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00014""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS12,
                LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(CurrentDoc.value('(/Form/FormFieldValue/FieldItem[@fieldId=""00015""]/@fieldValue)[1]', 'nvarchar(max)'), '&#xD;', ''), '&#xA;', ''), '<p>', ''), '</p>', ''))) AS FIELDS13
            FROM [UOF].DBO.TB_WKF_TASK
            CROSS APPLY (SELECT CAST(CURRENT_DOC AS XML) AS CurrentDoc) AS X
            WHERE DOC_NBR LIKE '{0}%'
        ", DOC_NBR);

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        // 先用 C# 變數接收
                        string FIELDS1 = dr["FIELDS1"].ToString();
                        string FIELDS2 = dr["FIELDS2"].ToString();
                        string FIELDS3 = dr["FIELDS3"].ToString();
                        string FIELDS4 = dr["FIELDS4"].ToString();
                        string FIELDS5 = dr["FIELDS5"].ToString();
                        string FIELDS6 = dr["FIELDS6"].ToString();
                        string FIELDS7 = dr["FIELDS7"].ToString();
                        string FIELDS8 = dr["FIELDS8"].ToString();
                        string FIELDS9 = dr["FIELDS9"].ToString();
                        string FIELDS10 = dr["FIELDS10"].ToString();
                        string FIELDS11 = dr["FIELDS11"].ToString();
                        string FIELDS12 = dr["FIELDS12"].ToString();
                        string FIELDS13 = dr["FIELDS13"].ToString();

                        // 再傳給 ADD_TK_UOF_DESIGN_1002
                        ADD_TK_UOF_DESIGN_1002(
                            FIELDS1,
                            FIELDS2,
                            FIELDS3,
                            FIELDS4,
                            FIELDS5,
                            FIELDS6,
                            FIELDS7,
                            FIELDS8,
                            FIELDS9,
                            FIELDS10,
                            FIELDS11,
                            FIELDS12,
                            FIELDS13
                        );
                    }
                }
            }
            catch
            {
            }
            finally
            {
                sqlConn.Close();
            }
        }


        public void ADD_TK_UOF_DESIGN_1002(
             string FIELDS1, string FIELDS2, string FIELDS3, string FIELDS4,
             string FIELDS5, string FIELDS6, string FIELDS7, string FIELDS8,
             string FIELDS9, string FIELDS10, string FIELDS11, string FIELDS12, string FIELDS13
            )
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        cmd.CommandText = @"
                                    INSERT INTO [TKRESEARCH].[dbo].[TK_UOF_DESIGN_1002]
                                    (
                                        [FIELDS1],[FIELDS2],[FIELDS3],[FIELDS4],[FIELDS5],
                                        [FIELDS6],[FIELDS7],[FIELDS8],[FIELDS9],[FIELDS10],
                                        [FIELDS11],[FIELDS12],[FIELDS13]
                                    )
                                    VALUES
                                    (
                                        @FIELDS1,@FIELDS2,@FIELDS3,@FIELDS4,@FIELDS5,
                                        @FIELDS6,@FIELDS7,@FIELDS8,@FIELDS9,@FIELDS10,
                                        @FIELDS11,@FIELDS12,@FIELDS13
                                    )";

                        // 參數化 SQL
                        cmd.Parameters.AddWithValue("@FIELDS1", FIELDS1);
                        cmd.Parameters.AddWithValue("@FIELDS2", FIELDS2);
                        cmd.Parameters.AddWithValue("@FIELDS3", FIELDS3);
                        cmd.Parameters.AddWithValue("@FIELDS4", FIELDS4);
                        cmd.Parameters.AddWithValue("@FIELDS5", FIELDS5);
                        cmd.Parameters.AddWithValue("@FIELDS6", FIELDS6);
                        cmd.Parameters.AddWithValue("@FIELDS7", FIELDS7);
                        cmd.Parameters.AddWithValue("@FIELDS8", FIELDS8);
                        cmd.Parameters.AddWithValue("@FIELDS9", FIELDS9);
                        cmd.Parameters.AddWithValue("@FIELDS10", FIELDS10);
                        cmd.Parameters.AddWithValue("@FIELDS11", FIELDS11);
                        cmd.Parameters.AddWithValue("@FIELDS12", FIELDS12);
                        cmd.Parameters.AddWithValue("@FIELDS13", FIELDS13);

                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                            tran.Commit();
                        else
                            tran.Rollback();
                    }
                }
            }
            catch (Exception ex)
            {
                // 可選：加日誌或 throw ex;
                Console.WriteLine(ex.Message);
            }
        }
        //ERP-MOCI03.領料單>轉入UOF簽核

        public void NEW_MOCTC_MOCTE()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    string sql = @"
                                    SELECT TC001, TC002, MOCTC.UDF01
                                    FROM [TK].dbo.MOCTC
                                    INNER JOIN [TK].dbo.CMSMQ ON TC001 = MQ001
                                    WHERE MQ010 = '-1'
                                      AND TC009 = 'N'
                                      AND MOCTC.UDF01 IN ('Y','y')
                                    ORDER BY TC001, TC002
                                ";

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sql, sqlConn))
                    {
                        DataSet ds1 = new DataSet();
                        adapter.Fill(ds1, "ds1");

                        if (ds1.Tables["ds1"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                            {
                                string TC001 = dr["TC001"].ToString().Trim();
                                string TC002 = dr["TC002"].ToString().Trim();

                                ADD_MOCTC_MOCTE_TB_WKF_EXTERNAL_TASK(TC001, TC002);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 可選：記錄或 Console.WriteLine(ex.Message);
                Console.WriteLine("NEW_MOCTC_MOCTE Error: " + ex.Message);
            }

            // 更新 MOCTC.UDF01
            UPDATE_MOCTC_UDF01();
        }

        public void ADD_MOCTC_MOCTE_TB_WKF_EXTERNAL_TASK(string TC001, string TC002)
        {
            DataTable DT = SEARCH_MOCTC_MOCTE(TC001, TC002);
            if (DT.Rows.Count == 0) return;

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TC001"].ToString().Trim() + DT.Rows[0]["TC002"].ToString().Trim();

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORM_ID = SEARCHFORM_UOF_VERSION_ID("MOCI03.領料單");
            if (!string.IsNullOrEmpty(FORM_ID))
                Form.SetAttribute("formVersionId", FORM_ID);

            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            // Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            // FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 單頭欄位
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC001", DT.Rows[0]["TC001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC002", DT.Rows[0]["TC002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC003", DT.Rows[0]["TC003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC004", DT.Rows[0]["TC004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC005", DT.Rows[0]["TC005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC006", DT.Rows[0]["TC006"].ToString(), fillerName, fillerUserGuid, account);

            // DataGrid 明細 (MOCTE)
            AddFieldItem(xmlDoc, FormFieldValue, "MOCTE", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode parentNode = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='MOCTE']");
            parentNode.AppendChild(DataGrid);

            int rowCount = 0;
            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowCount.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TE003");
                AppendCellToRow(xmlDoc, Row, od, "TE004");
                AppendCellToRow(xmlDoc, Row, od, "TE017");
                AppendCellToRow(xmlDoc, Row, od, "TE018");
                AppendCellToRow(xmlDoc, Row, od, "TE005");
                AppendCellToRow(xmlDoc, Row, od, "TE006");
                AppendCellToRow(xmlDoc, Row, od, "TE010");
                AppendCellToRow(xmlDoc, Row, od, "TE008");
                AppendCellToRow(xmlDoc, Row, od, "TE011");
                AppendCellToRow(xmlDoc, Row, od, "TE012");

                rowCount++;

                XmlNode dataGridNode = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='MOCTE']/DataGrid");
                dataGridNode.AppendChild(Row);
            }

            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
            string connectionString = sqlsb.ConnectionString;

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES (NEWID(), @XML, 2, '{0}')", EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                using (SqlCommand command = new SqlCommand(queryString.ToString(), connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception EX)
            {
                // 可加 Log
            }
        }


        public DataTable SEARCH_MOCTC_MOCTE(string TC001, string TC002)
        {
            DataTable dtResult = null;

            try
            {
                // 建立解密後的 SqlConnection
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    // 清空之前的 sbSql
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    // 保留原本 SQL
                    sbSql.AppendFormat(@"
                                        SELECT *
                                        ,USER_GUID,NAME
                                        ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                        ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                        FROM 
                                        (
                                            SELECT 
                                                [MOCTC].[COMPANY]
                                                ,[MOCTC].[CREATOR]
                                                ,[MOCTC].[USR_GROUP]
                                                ,[MOCTC].[CREATE_DATE]
                                                ,[MOCTC].[MODIFIER]
                                                ,[MOCTC].[MODI_DATE]
                                                ,[MOCTC].[FLAG]
                                                ,[MOCTC].[CREATE_TIME]
                                                ,[MOCTC].[MODI_TIME]
                                                ,[MOCTC].[TRANS_TYPE]
                                                ,[MOCTC].[TRANS_NAME]
                                                ,[MOCTC].[sync_date]
                                                ,[MOCTC].[sync_time]
                                                ,[MOCTC].[sync_mark]
                                                ,[MOCTC].[sync_count]
                                                ,[MOCTC].[DataUser]
                                                ,[MOCTC].[DataGroup]
                                                ,[TC001]
                                                ,[TC002]
                                                ,[TC003]
                                                ,[TC004]
                                                ,[TC005]
                                                ,[TC006]
                                                ,[TC007]
                                                ,[TC008]
                                                ,[TC009]
                                                ,[TC010]
                                                ,[TC011]
                                                ,[TC012]
                                                ,[TC013]
                                                ,[TC014]
                                                ,[TC015]
                                                ,[TC016]
                                                ,[TC017]
                                                ,[TC018]
                                                ,[TC019]
                                                ,[TC020]
                                                ,[TC021]
                                                ,[TC022]
                                                ,[TC023]
                                                ,[TC024]
                                                ,[TC025]
                                                ,[TC026]
                                                ,[TC027]
                                                ,[TC028]
                                                ,[TC029]
                                                ,[TC030]
                                                ,[TC031]
                                                ,[TC032]
                                                ,[MOCTC].[UDF01] AS 'MOCTCUDF01'
                                                ,[MOCTC].[UDF02] AS 'MOCTCUDF02'
                                                ,[MOCTC].[UDF03] AS 'MOCTCUDF03'
                                                ,[MOCTC].[UDF04] AS 'MOCTCUDF04'
                                                ,[MOCTC].[UDF05] AS 'MOCTCUDF05'
                                                ,[MOCTC].[UDF06] AS 'MOCTCUDF06'
                                                ,[MOCTC].[UDF07] AS 'MOCTCUDF07'
                                                ,[MOCTC].[UDF08] AS 'MOCTCUDF08'
                                                ,[MOCTC].[UDF09] AS 'MOCTCUDF09'
                                                ,[MOCTC].[UDF10] AS 'MOCTCUDF10'
                                                ,[TC200]
                                                ,[TC201]
                                                ,[TC202]
                                                ,[TE001]
                                                ,[TE002]
                                                ,[TE003]
                                                ,[TE004]
                                                ,[TE005]
                                                ,[TE006]
                                                ,[TE007]
                                                ,[TE008]
                                                ,[TE009]
                                                ,[TE010]
                                                ,[TE011]
                                                ,[TE012]
                                                ,[TE013]
                                                ,[TE014]
                                                ,[TE015]
                                                ,[TE016]
                                                ,[TE017]
                                                ,[TE018]
                                                ,[TE019]
                                                ,[TE020]
                                                ,[TE021]
                                                ,[TE022]
                                                ,[TE023]
                                                ,[TE024]
                                                ,[TE025]
                                                ,[TE026]
                                                ,[TE027]
                                                ,[TE028]
                                                ,[TE029]
                                                ,[TE030]
                                                ,[TE031]
                                                ,[TE032]
                                                ,[TE033]
                                                ,[TE034]
                                                ,[TE035]
                                                ,[TE036]
                                                ,[TE037]
                                                ,[TE038]
                                                ,[TE039]
                                                ,[TE040]
                                                ,[TE500]
                                                ,[TE501]
                                                ,[TE502]
                                                ,[TE503]
                                                ,[TE504]
                                                ,[TE505]
                                                ,[TE506]
                                                ,[TE507]
                                                ,[TE508]
                                                ,[MOCTE].[UDF01] AS 'MOCTEUDF01'
                                                ,[MOCTE].[UDF02] AS 'MOCTEUDF02'
                                                ,[MOCTE].[UDF03] AS 'MOCTEUDF03'
                                                ,[MOCTE].[UDF04] AS 'MOCTEUDF04'
                                                ,[MOCTE].[UDF05] AS 'MOCTEUDF05'
                                                ,[MOCTE].[UDF06] AS 'MOCTEUDF06'
                                                ,[MOCTE].[UDF07] AS 'MOCTEUDF07'
                                                ,[MOCTE].[UDF08] AS 'MOCTEUDF08'
                                                ,[MOCTE].[UDF09] AS 'MOCTEUDF09'
                                                ,[MOCTE].[UDF10] AS 'MOCTEUDF10'
                                                ,[TE200]
                                                ,[TE201]
                                                ,[TB_EB_USER].USER_GUID,NAME
                                                ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=MOCTC.CREATOR) AS 'MV002'
                                            FROM [TK].dbo.MOCTE,[TK].dbo.MOCTC
                                            LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                                ON [TB_EB_USER].ACCOUNT = MOCTC.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                            WHERE 1=1
                                                AND TC001 = TE001 
                                                AND TC002 = TE002
                                                AND TC001 = '{0}' 
                                                AND TC002 = '{1}'
                                        ) AS TEMP
                                    ", TC001, TC002);

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        DataSet ds = new DataSet();
                        adapter.Fill(ds, "ds1");

                        if (ds.Tables["ds1"].Rows.Count >= 1)
                        {
                            dtResult = ds.Tables["ds1"];
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("SEARCH_MOCTC_MOCTE Error: " + ex.Message);
            }

            return dtResult;
        }


        public void UPDATE_MOCTC_UDF01()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    {
                        try
                        {
                            string sql = @"
                                        UPDATE MC
                                        SET MC.UDF01 = 'UOF'
                                        FROM [TK].dbo.MOCTC MC
                                        INNER JOIN [TK].dbo.CMSMQ MQ ON MC.TC001 = MQ.MQ001
                                        WHERE MQ.MQ010 = '-1'
                                          AND MC.TC009 = 'N'
                                          AND MC.UDF01 IN ('Y','y')
                                    ";

                            using (SqlCommand cmd = new SqlCommand(sql, sqlConn, tran))
                            {
                                cmd.CommandTimeout = 60;
                                int result = cmd.ExecuteNonQuery();

                                if (result == 0)
                                {
                                    tran.Rollback(); // 沒更新到資料，回滾
                                }
                                else
                                {
                                    tran.Commit();   // 執行交易
                                }
                            }
                        }
                        catch (Exception exTran)
                        {
                            tran.Rollback();
                            Console.WriteLine("UPDATE_MOCTC_UDF01 Transaction Error: " + exTran.Message);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("UPDATE_MOCTC_UDF01 Error: " + ex.Message);
            }
        }

        //ERP-BOM表>轉入UOF簽核
        public void NEW_BOMMC_BOMMD()
        {
            try
            {
                // 建立解密後的 SqlConnection
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    // 保留原始 SQL
                    sbSql.AppendFormat(@"
                                        SELECT MC001, UDF01
                                        FROM [TK].dbo.BOMMC
                                        WHERE UDF01 IN ('Y','y')
                                        ORDER BY MC001
                                    ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        DataSet ds = new DataSet();
                        adapter.Fill(ds, "ds1");

                        if (ds.Tables["ds1"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds.Tables["ds1"].Rows)
                            {
                                string mc001 = dr["MC001"].ToString().Trim();
                                ADD_BOMMC_BOMMD_TB_WKF_EXTERNAL_TASK(mc001);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("NEW_BOMMC_BOMMD Error: " + ex.Message);
            }
            finally
            {
                // 不需要手動 Close，因為 using 已處理
            }

            // 更新 BOMMC.UDF01
            UPDATE_BOMMC_UDF01();
        }

        public void ADD_BOMMC_BOMMD_TB_WKF_EXTERNAL_TASK(string MC001)
        {
            DataTable DT = SEARCH_BOMMC_BOMMD(MC001);
            if (DT == null || DT.Rows.Count == 0) return;

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["MC001"].ToString().Trim();

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORM_ID = SEARCHFORM_UOF_VERSION_ID("BOM02.BOM表");
            if (!string.IsNullOrEmpty(FORM_ID))
                Form.SetAttribute("formVersionId", FORM_ID);

            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            // Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            // FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // ------- 單頭欄位 -------
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MC001", DT.Rows[0]["MC001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MC024", DT.Rows[0]["MC024"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MC025", DT.Rows[0]["MC025"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MC002", DT.Rows[0]["MB004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MC004", DT.Rows[0]["MC004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MC009", DT.Rows[0]["MC009"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MC010", DT.Rows[0]["MC010"].ToString(), fillerName, fillerUserGuid, account);

            // ------- DataGrid (BOMMD) -------
            AddFieldItem(xmlDoc, FormFieldValue, "BOMMD", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode BOMMD = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='BOMMD']");
            BOMMD.AppendChild(DataGrid);

            int rowCount = 0;
            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowCount.ToString());

                AppendCellToRow(xmlDoc, Row, od, "MD002");
                AppendCellToRow(xmlDoc, Row, od, "MD003");
                AppendCellToRow(xmlDoc, Row, od, "MD035");
                AppendCellToRow(xmlDoc, Row, od, "MD036");
                AppendCellToRow(xmlDoc, Row, od, "MD004");
                AppendCellToRow(xmlDoc, Row, od, "MD006");
                AppendCellToRow(xmlDoc, Row, od, "MD007");
                AppendCellToRow(xmlDoc, Row, od, "MD008");
                AppendCellToRow(xmlDoc, Row, od, "MD016");

                rowCount++;
                XmlNode DataGridS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='BOMMD']/DataGrid");
                DataGridS.AppendChild(Row);
            }

            // ------- 寫入資料庫 -------
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString = sqlsb.ConnectionString;

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES (NEWID(), @XML, 2, '{0}')",  EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                using (SqlCommand command = new SqlCommand(queryString.ToString(), connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
            catch
            {
                // 可以加 Log
            }
        }


        public DataTable SEARCH_BOMMC_BOMMD(string MC001)
        {
            try
            {
                // 建立解密後的 SqlConnection
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    using (SqlDataAdapter adapter = new SqlDataAdapter())
                    {
                        sbSql.Clear();
                        sbSqlQuery.Clear();

                        // 保留原始 SQL，不更動
                        sbSql.AppendFormat(@"
                                            SELECT *
                                                  ,USER_GUID,NAME
                                                  ,(SELECT TOP 1 GROUP_ID 
                                                    FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                                    WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                                  ,(SELECT TOP 1 TITLE_ID 
                                                    FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] 
                                                    WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                            FROM 
                                            (
                                                SELECT 
                                                    [BOMMC].[COMPANY]
                                                    ,[BOMMC].[CREATOR]
                                                    ,[BOMMC].[USR_GROUP]
                                                    ,[BOMMC].[CREATE_DATE]
                                                    ,[BOMMC].[MODIFIER]
                                                    ,[BOMMC].[MODI_DATE]
                                                    ,[BOMMC].[FLAG]
                                                    ,[BOMMC].[CREATE_TIME]
                                                    ,[BOMMC].[MODI_TIME]
                                                    ,[BOMMC].[TRANS_TYPE]
                                                    ,[BOMMC].[TRANS_NAME]
                                                    ,[BOMMC].[sync_date]
                                                    ,[BOMMC].[sync_time]
                                                    ,[BOMMC].[sync_mark]
                                                    ,[BOMMC].[sync_count]
                                                    ,[BOMMC].[DataUser]
                                                    ,[BOMMC].[DataGroup]
                                                    ,[BOMMC].[MC001]
                                                    ,[BOMMC].[MC002]
                                                    ,[BOMMC].[MC003]
                                                    ,[BOMMC].[MC004]
                                                    ,[BOMMC].[MC005]
                                                    ,[BOMMC].[MC006]
                                                    ,[BOMMC].[MC007]
                                                    ,[BOMMC].[MC008]
                                                    ,[BOMMC].[MC009]
                                                    ,[BOMMC].[MC010]
                                                    ,[BOMMC].[MC011]
                                                    ,[BOMMC].[MC012]
                                                    ,[BOMMC].[MC013]
                                                    ,[BOMMC].[MC014]
                                                    ,[BOMMC].[MC015]
                                                    ,[BOMMC].[MC016]
                                                    ,[BOMMC].[MC017]
                                                    ,[BOMMC].[MC018]
                                                    ,[BOMMC].[MC019]
                                                    ,[BOMMC].[MC020]
                                                    ,[BOMMC].[MC021]
                                                    ,[BOMMC].[MC022]
                                                    ,[BOMMC].[MC023]
                                                    ,[BOMMC].[MC024]
                                                    ,[BOMMC].[MC025]
                                                    ,[BOMMC].[MC026]
                                                    ,[BOMMC].[MC027]
                                                    ,[BOMMC].[UDF01] AS 'BOMMCUDF01'
                                                    ,[BOMMC].[UDF02] AS 'BOMMCUDF02'
                                                    ,[BOMMC].[UDF03] AS 'BOMMCUDF03'
                                                    ,[BOMMC].[UDF04] AS 'BOMMCUDF04'
                                                    ,[BOMMC].[UDF05] AS 'BOMMCUDF05'
                                                    ,[BOMMC].[UDF06] AS 'BOMMCUDF06'
                                                    ,[BOMMC].[UDF07] AS 'BOMMCUDF07'
                                                    ,[BOMMC].[UDF08] AS 'BOMMCUDF08'
                                                    ,[BOMMC].[UDF09] AS 'BOMMCUDF09'
                                                    ,[BOMMC].[UDF10] AS 'BOMMCUDF10'
                                                    ,[BOMMD].[MD001]
                                                    ,[BOMMD].[MD002]
                                                    ,[BOMMD].[MD003]
                                                    ,[BOMMD].[MD004]
                                                    ,[BOMMD].[MD005]
                                                    ,[BOMMD].[MD006]
                                                    ,[BOMMD].[MD007]
                                                    ,[BOMMD].[MD008]
                                                    ,[BOMMD].[MD009]
                                                    ,[BOMMD].[MD010]
                                                    ,[BOMMD].[MD011]
                                                    ,[BOMMD].[MD012]
                                                    ,[BOMMD].[MD013]
                                                    ,[BOMMD].[MD014]
                                                    ,[BOMMD].[MD015]
                                                    ,[BOMMD].[MD016]
                                                    ,[BOMMD].[MD017]
                                                    ,[BOMMD].[MD018]
                                                    ,[BOMMD].[MD019]
                                                    ,[BOMMD].[MD020]
                                                    ,[BOMMD].[MD021]
                                                    ,[BOMMD].[MD022]
                                                    ,[BOMMD].[MD023]
                                                    ,[BOMMD].[MD024]
                                                    ,[BOMMD].[MD025]
                                                    ,[BOMMD].[MD026]
                                                    ,[BOMMD].[MD027]
                                                    ,[BOMMD].[MD028]
                                                    ,[BOMMD].[MD029]
                                                    ,[BOMMD].[MD030]
                                                    ,[BOMMD].[MD031]
                                                    ,[BOMMD].[MD032]
                                                    ,[BOMMD].[MD033]
                                                    ,[BOMMD].[MD034]
                                                    ,[BOMMD].[MD035]
                                                    ,[BOMMD].[MD036]
                                                    ,[BOMMD].[MD037]
                                                    ,[BOMMD].[MD038]
                                                    ,[BOMMD].[UDF01] AS 'BOMMDUDF01'
                                                    ,[BOMMD].[UDF02] AS 'BOMMDUDF02'
                                                    ,[BOMMD].[UDF03] AS 'BOMMDUDF03'
                                                    ,[BOMMD].[UDF04] AS 'BOMMDUDF04'
                                                    ,[BOMMD].[UDF05] AS 'BOMMDUDF05'
                                                    ,[BOMMD].[UDF06] AS 'BOMMDUDF06'
                                                    ,[BOMMD].[UDF07] AS 'BOMMDUDF07'
                                                    ,[BOMMD].[UDF08] AS 'BOMMDUDF08'
                                                    ,[BOMMD].[UDF09] AS 'BOMMDUDF09'
                                                    ,[BOMMD].[UDF10] AS 'BOMMDUDF10'
                                                    ,[TB_EB_USER].USER_GUID,NAME
                                                    ,(SELECT TOP 1 MV002 
                                                      FROM [TK].dbo.CMSMV 
                                                      WHERE MV001=BOMMC.CREATOR) AS 'MV002'
                                                    ,INVMB1.MB004
                                                FROM [TK].dbo.BOMMD,[TK].dbo.BOMMC
                                                LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                                    ON [TB_EB_USER].ACCOUNT=BOMMC.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                                LEFT JOIN [TK].dbo.INVMB INVMB1 ON INVMB1.MB001=MC001
                                                WHERE 1=1
                                                AND MC001=MD001
                                                AND MC001='{0}'
                                            ) AS TEMP
                                        ", MC001);

                        DataSet ds = new DataSet();
                        adapter.SelectCommand = new SqlCommand(sbSql.ToString(), sqlConn);

                        sqlConn.Open();
                        adapter.Fill(ds, "ds1");

                        if (ds.Tables["ds1"].Rows.Count >= 1)
                        {
                            return ds.Tables["ds1"];
                        }
                        else
                        {
                            return null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("SEARCH_BOMMC_BOMMD Error: " + ex.Message);
                return null;
            }
        }


        public void UPDATE_BOMMC_UDF01()
        {
            try
            {
                // 建立解密後的 SqlConnection
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        sbSql.Clear();

                        // 保留原始 SQL
                        sbSql.AppendFormat(@"
                                            UPDATE [TK].dbo.BOMMC
                                            SET UDF01 = 'UOF簽核中'                                   
                                            WHERE UDF01 IN ('Y','y')
                                        ");

                        cmd.Connection = sqlConn;
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = sbSql.ToString();

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();    // 沒有更新資料 → 回滾
                        }
                        else
                        {
                            tran.Commit();      // 有更新 → 提交
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("UPDATE_BOMMC_UDF01 Error: " + ex.Message);
            }
        }

        //ERP-EBOM表>轉入UOF簽核
        public void NEW_BOMMJ_BOMMK()
        {
            try
            {
                // 建立解密後的連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    // 保留原始 SQL，不做修改
                    sbSql.AppendFormat(@"
                                        SELECT MJ001,UDF01
                                        FROM [TK].dbo.BOMMJ
                                        WHERE UDF01 IN ('Y','y')
                                        ORDER BY MJ001
                                    ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        DataSet ds1 = new DataSet();

                        sqlConn.Open();
                        adapter.Fill(ds1, "ds1");

                        if (ds1.Tables["ds1"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                            {
                                ADD_BOMMJ_BOMMK_TB_WKF_EXTERNAL_TASK(dr["MJ001"].ToString().Trim());
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("NEW_BOMMJ_BOMMK Error: " + ex.Message);
            }

            // 確保一定會執行
            UPDATE_BOMMJ_UDF01();
        }

        public void ADD_BOMMJ_BOMMK_TB_WKF_EXTERNAL_TASK(string MJ001)
        {
            DataTable DT = SEARCH_BOMMJ_BOMMK(MJ001);
            if (DT == null || DT.Rows.Count == 0) return;

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());
            if (DTUPFDEP == null || DTUPFDEP.Rows.Count == 0) return;

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["MJ001"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            // 取得表單版本
            string FORM_ID = SEARCHFORM_UOF_VERSION_ID("BOM11.EBOM表");
            if (!string.IsNullOrEmpty(FORM_ID))
            {
                Form.SetAttribute("formVersionId", FORM_ID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            // 建立 Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            // FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // ------- 單頭欄位 -------
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MJ001", DT.Rows[0]["MJ001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MMB002", DT.Rows[0]["MMB002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MMB003", DT.Rows[0]["MMB003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MMB004", DT.Rows[0]["MMB004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "MJ004", DT.Rows[0]["MJ004"].ToString(), fillerName, fillerUserGuid, account);

            // ------- DataGrid 明細 (BOMMK) -------
            AddFieldItem(xmlDoc, FormFieldValue, "BOMMK", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode BOMMK = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='BOMMK']");
            BOMMK.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "MK002");
                AppendCellToRow(xmlDoc, Row, od, "MK003");
                AppendCellToRow(xmlDoc, Row, od, "DMB002");
                AppendCellToRow(xmlDoc, Row, od, "DMB003");
                AppendCellToRow(xmlDoc, Row, od, "DMB004");
                AppendCellToRow(xmlDoc, Row, od, "MK006");
                AppendCellToRow(xmlDoc, Row, od, "MK007");
                AppendCellToRow(xmlDoc, Row, od, "MK008");

                rowscounts++;

                XmlNode DataGridS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='BOMMK']/DataGrid");
                DataGridS.AppendChild(Row);
            }

            // 寫入 TB_WKF_EXTERNAL_TASK
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);
            connectionString = sqlConn.ConnectionString.ToString();

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                    (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                    VALUES (NEWID(),@XML,2,'{0}')
                                     ",  EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    command.Connection.Open();
                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();
                }
            }
            catch
            {
            }
            finally
            {
            }
        }

        public DataTable SEARCH_BOMMJ_BOMMK(string MJ001)
        {
            try
            {
                // 連線字串解密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    // 原本 SQL 完全保留
                    sbSql.AppendFormat(@"
                                        SELECT *
                                        ,USER_GUID,NAME
                                        ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                        ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                        FROM 
                                        (
                                            SELECT 
                                            [BOMMJ].[COMPANY]
                                            ,[BOMMJ].[CREATOR]
                                            ,[BOMMJ].[USR_GROUP]
                                            ,[BOMMJ].[CREATE_DATE]
                                            ,[BOMMJ].[MODIFIER]
                                            ,[BOMMJ].[MODI_DATE]
                                            ,[BOMMJ].[FLAG]
                                            ,[BOMMJ].[CREATE_TIME]
                                            ,[BOMMJ].[MODI_TIME]
                                            ,[BOMMJ].[TRANS_TYPE]
                                            ,[BOMMJ].[TRANS_NAME]
                                            ,[BOMMJ].[sync_date]
                                            ,[BOMMJ].[sync_time]
                                            ,[BOMMJ].[sync_mark]
                                            ,[BOMMJ].[sync_count]
                                            ,[BOMMJ].[DataUser]
                                            ,[BOMMJ].[DataGroup]
                                            ,[BOMMJ].[MJ001]
                                            ,[BOMMJ].[MJ004]
                                            ,[BOMMJ].[MJ005]
                                            ,[BOMMJ].[MJ006]
                                            ,[BOMMJ].[MJ007]
                                            ,[BOMMJ].[MJ008]
                                            ,[BOMMJ].[MJ009]
                                            ,[BOMMJ].[MJ010]
                                            ,[BOMMJ].[MJ011]
                                            ,[BOMMJ].[MJ012]
                                            ,[BOMMJ].[MJ013]
                                            ,[BOMMJ].[MJ014]
                                            ,[BOMMJ].[MJ015]
                                            ,[BOMMJ].[MJ016]
                                            ,[BOMMJ].[MJ017]
                                            ,[BOMMJ].[MJ018]
                                            ,[BOMMJ].[MJ019]
                                            ,[BOMMJ].[MJ020]
                                            ,[BOMMJ].[MJ021]
                                            ,[BOMMJ].[MJ022]
                                            ,[BOMMJ].[UDF01] AS 'BOMMJUDF01'
                                            ,[BOMMJ].[UDF02] AS 'BOMMJUDF02'
                                            ,[BOMMJ].[UDF03] AS 'BOMMJUDF03'
                                            ,[BOMMJ].[UDF04] AS 'BOMMJUDF04'
                                            ,[BOMMJ].[UDF05] AS 'BOMMJUDF05'
                                            ,[BOMMJ].[UDF06] AS 'BOMMJUDF06'
                                            ,[BOMMJ].[UDF07] AS 'BOMMJUDF07'
                                            ,[BOMMJ].[UDF08] AS 'BOMMJUDF08'
                                            ,[BOMMJ].[UDF09] AS 'BOMMJUDF09'
                                            ,[BOMMJ].[UDF10] AS 'BOMMJUDF10'
                                            ,[BOMMK].[MK001]
                                            ,[BOMMK].[MK002]
                                            ,[BOMMK].[MK003]
                                            ,[BOMMK].[MK006]
                                            ,[BOMMK].[MK007]
                                            ,[BOMMK].[MK008]
                                            ,[BOMMK].[MK009]
                                            ,[BOMMK].[MK010]
                                            ,[BOMMK].[MK011]
                                            ,[BOMMK].[MK012]
                                            ,[BOMMK].[MK013]
                                            ,[BOMMK].[MK014]
                                            ,[BOMMK].[MK015]
                                            ,[BOMMK].[MK016]
                                            ,[BOMMK].[MK017]
                                            ,[BOMMK].[MK018]
                                            ,[BOMMK].[MK019]
                                            ,[BOMMK].[MK020]
                                            ,[BOMMK].[MK021]
                                            ,[BOMMK].[MK022]
                                            ,[BOMMK].[MK023]
                                            ,[BOMMK].[MK024]
                                            ,[BOMMK].[MK025]
                                            ,[BOMMK].[MK026]
                                            ,[BOMMK].[MK027]
                                            ,[BOMMK].[MK028]
                                            ,[BOMMK].[MK029]
                                            ,[BOMMK].[MK030]
                                            ,[BOMMK].[MK031]
                                            ,[BOMMK].[MK032]
                                            ,[BOMMK].[MK033]
                                            ,[BOMMK].[MK034]
                                            ,[BOMMK].[MK035]
                                            ,[BOMMK].[MK036]
                                            ,[BOMMK].[MK037]
                                            ,[BOMMK].[MK038]
                                            ,[BOMMK].[UDF01] AS 'BOMMKUDF01'
                                            ,[BOMMK].[UDF02] AS 'BOMMKUDF02'
                                            ,[BOMMK].[UDF03] AS 'BOMMKUDF03'
                                            ,[BOMMK].[UDF04] AS 'BOMMKUDF04'
                                            ,[BOMMK].[UDF05] AS 'BOMMKUDF05'
                                            ,[BOMMK].[UDF06] AS 'BOMMKUDF06'
                                            ,[BOMMK].[UDF07] AS 'BOMMKUDF07'
                                            ,[BOMMK].[UDF08] AS 'BOMMKUDF08'
                                            ,[BOMMK].[UDF09] AS 'BOMMKUDF09'
                                            ,[BOMMK].[UDF10] AS 'BOMMKUDF10'
                                            ,[TB_EB_USER].USER_GUID,NAME
                                            ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=BOMMJ.CREATOR) AS 'MV002'
                                            ,INVMB1.MB002 MMB002
                                            ,INVMB1.MB003 MMB003
                                            ,INVMB1.MB004 MMB004
                                            ,INVMB2.MB002 DMB002
                                            ,INVMB2.MB003 DMB003
                                            ,INVMB2.MB004 DMB004
                                            FROM [TK].dbo.BOMMK
                                            LEFT JOIN [TK].dbo.INVMB INVMB2 ON INVMB2.MB001=MK003
                                            ,[TK].dbo.BOMMJ
                                            LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] 
                                                ON [TB_EB_USER].ACCOUNT=BOMMJ.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                            LEFT JOIN [TK].dbo.INVMB INVMB1 ON INVMB1.MB001=MJ001
                                            WHERE 1=1
                                            AND MJ001=MK001
                                            AND MJ001='{0}'
                                        ) AS TEMP
                                    ", MJ001);

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        DataSet ds1 = new DataSet();
                        adapter.Fill(ds1, "ds1");

                        if (ds1.Tables["ds1"].Rows.Count > 0)
                        {
                            return ds1.Tables["ds1"];
                        }
                        else
                        {
                            return null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("SEARCH_BOMMJ_BOMMK Error: " + ex.Message);
                return null;
            }
        }


        public void UPDATE_BOMMJ_UDF01()
        {
            try
            {
                // 建立解密後的連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        sbSql.Clear();
                        sbSql.AppendFormat(@"
                                            UPDATE [TK].dbo.BOMMJ
                                            SET UDF01 = 'UOF簽核中'
                                            WHERE UDF01 IN ('Y','y')
                                        ");

                        cmd.CommandText = sbSql.ToString();
                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();    // 沒更新 → 回滾
                        }
                        else
                        {
                            tran.Commit();      // 有更新 → 提交
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("UPDATE_BOMMJ_UDF01 Error: " + ex.Message);
            }
        }

        //ERP的品號，轉入EBOM品號
        public void NEW_BOMMI()
        {
            try
            {
                // 解密連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        sbSql.Clear();
                        sbSql.Append(@"
                                        INSERT INTO [TK].[dbo].[BOMMI]
                                        (
                                            [COMPANY],[CREATOR],[USR_GROUP],[CREATE_DATE],[MODIFIER],[MODI_DATE],
                                            [FLAG],[CREATE_TIME],[MODI_TIME],[TRANS_TYPE],[TRANS_NAME],
                                            [sync_date],[sync_time],[sync_mark],[sync_count],
                                            [DataUser],[DataGroup],[MI001],[MI002],[MI003],[MI004],[MI005],[MI006]
                                        )
                                        SELECT 
                                            [COMPANY],[CREATOR],[USR_GROUP],[CREATE_DATE],[MODIFIER],[MODI_DATE],
                                            [FLAG],[CREATE_TIME],[MODI_TIME],[TRANS_TYPE],[TRANS_NAME],
                                            [sync_date],[sync_time],[sync_mark],[sync_count],
                                            [DataUser],[DataGroup],
                                            MB001 AS [MI001],
                                            MB002 AS [MI002],
                                            MB003 AS [MI003],
                                            MB004 AS [MI004],
                                            MB005 AS [MI005],
                                            MB001 AS [MI006]
                                        FROM [TK].[dbo].[INVMB]
                                        WHERE MB001 NOT IN (SELECT MI001 FROM [TK].[dbo].[BOMMI])
                                    ");

                        cmd.CommandText = sbSql.ToString();
                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                        {
                            tran.Commit();
                        }
                        else
                        {
                            tran.Rollback();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("NEW_BOMMI Error: " + ex.Message);
                // 這裡可加上 Log 寫入檔案或資料庫
            }
        }

        //ERP-MOCI03.退料單>轉入UOF簽核
        public void NEW_MOCTC_MOCTE_B()
        {
            try
            {
                // 建立加解密後的連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    sbSql.Clear();
                    sbSql.Append(@"
                                    SELECT TC001, TC002, MOCTC.UDF01
                                    FROM [TK].dbo.MOCTC
                                    INNER JOIN [TK].dbo.CMSMQ ON TC001 = MQ001
                                    WHERE MQ010 = '-1'
                                      AND TC009 = 'N'
                                      AND MOCTC.UDF01 IN ('Y','y')
                                    ORDER BY TC001, TC002
                                ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        DataSet ds1 = new DataSet();
                        adapter.Fill(ds1, "ds1");

                        if (ds1.Tables["ds1"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                            {
                                string tc001 = dr["TC001"].ToString().Trim();
                                string tc002 = dr["TC002"].ToString().Trim();

                                ADD_MOCTC_MOCTE_TB_WKF_EXTERNAL_TASK_B(tc001, tc002);
                            }
                        }
                    }
                }

                // 更新 MOCTC 標記
                UPDATE_MOCTC_UDF01_B();
            }
            catch (Exception ex)
            {
                Console.WriteLine("NEW_MOCTC_MOCTE_B Error: " + ex.Message);
                // 可加上 Log 紀錄 ex.StackTrace
            }
        }

        public void ADD_MOCTC_MOCTE_TB_WKF_EXTERNAL_TASK_B(string TC001, string TC002)
        {
            DataTable DT = SEARCH_MOCTC_MOCTE_B(TC001, TC002);
            if (DT == null || DT.Rows.Count == 0) return;

            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());
            if (DTUPFDEP == null || DTUPFDEP.Rows.Count == 0) return;

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TC001"].ToString().Trim() + DT.Rows[0]["TC002"].ToString().Trim();

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");

            string FORM_ID = SEARCHFORM_UOF_VERSION_ID("MOCI03B.退料單");
            if (!string.IsNullOrEmpty(FORM_ID))
            {
                Form.SetAttribute("formVersionId", FORM_ID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            // Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            // FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // ------- 表頭欄位 -------
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC001", DT.Rows[0]["TC001"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC002", DT.Rows[0]["TC002"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC003", DT.Rows[0]["TC003"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC004", DT.Rows[0]["TC004"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC005", DT.Rows[0]["TC005"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "TC006", DT.Rows[0]["TC006"].ToString(), fillerName, fillerUserGuid, account);

            // ------- DataGrid (MOCTE) -------
            AddFieldItem(xmlDoc, FormFieldValue, "MOCTE", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            XmlNode MOCTE = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='MOCTE']");
            MOCTE.AppendChild(DataGrid);

            int rowCount = 0;
            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowCount.ToString());

                AppendCellToRow(xmlDoc, Row, od, "TE003");
                AppendCellToRow(xmlDoc, Row, od, "TE004");
                AppendCellToRow(xmlDoc, Row, od, "TE017");
                AppendCellToRow(xmlDoc, Row, od, "TE018");
                AppendCellToRow(xmlDoc, Row, od, "TE005");
                AppendCellToRow(xmlDoc, Row, od, "TE006");
                AppendCellToRow(xmlDoc, Row, od, "TE010");
                AppendCellToRow(xmlDoc, Row, od, "TE008");
                AppendCellToRow(xmlDoc, Row, od, "TE011");
                AppendCellToRow(xmlDoc, Row, od, "TE012");

                DataGrid.AppendChild(Row);
                rowCount++;
            }

            // 寫入 DB
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);
            connectionString = sqlConn.ConnectionString.ToString();

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                    (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES (NEWID(), @XML, 2, '{0}')",
                                             EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    connection.Open();
                    int count = command.ExecuteNonQuery();
                    connection.Close();
                }
            }
            catch (Exception ex)
            {
                // 可加 log ex.Message
            }
        }


        public DataTable SEARCH_MOCTC_MOCTE_B(string TC001, string TC002)
        {
            try
            {
                // 連線字串解密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    // ⚠️ 保持原本 SQL 不動
                    sbSql.AppendFormat(@"
                                        SELECT *
                                        ,USER_GUID,NAME
                                        ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                        ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
                                        FROM 
                                        (
                                            SELECT 
                                            [MOCTC].[COMPANY]
                                            ,[MOCTC].[CREATOR]
                                            ,[MOCTC].[USR_GROUP]
                                            ,[MOCTC].[CREATE_DATE]
                                            ,[MOCTC].[MODIFIER]
                                            ,[MOCTC].[MODI_DATE]
                                            ,[MOCTC].[FLAG]
                                            ,[MOCTC].[CREATE_TIME]
                                            ,[MOCTC].[MODI_TIME]
                                            ,[MOCTC].[TRANS_TYPE]
                                            ,[MOCTC].[TRANS_NAME]
                                            ,[MOCTC].[sync_date]
                                            ,[MOCTC].[sync_time]
                                            ,[MOCTC].[sync_mark]
                                            ,[MOCTC].[sync_count]
                                            ,[MOCTC].[DataUser]
                                            ,[MOCTC].[DataGroup]
                                            ,[TC001]
                                            ,[TC002]
                                            ,[TC003]
                                            ,[TC004]
                                            ,[TC005]
                                            ,[TC006]
                                            ,[TC007]
                                            ,[TC008]
                                            ,[TC009]
                                            ,[TC010]
                                            ,[TC011]
                                            ,[TC012]
                                            ,[TC013]
                                            ,[TC014]
                                            ,[TC015]
                                            ,[TC016]
                                            ,[TC017]
                                            ,[TC018]
                                            ,[TC019]
                                            ,[TC020]
                                            ,[TC021]
                                            ,[TC022]
                                            ,[TC023]
                                            ,[TC024]
                                            ,[TC025]
                                            ,[TC026]
                                            ,[TC027]
                                            ,[TC028]
                                            ,[TC029]
                                            ,[TC030]
                                            ,[TC031]
                                            ,[TC032]
                                            ,[MOCTC].[UDF01] AS 'MOCTCUDF01'
                                            ,[MOCTC].[UDF02] AS 'MOCTCUDF02'
                                            ,[MOCTC].[UDF03] AS 'MOCTCUDF03'
                                            ,[MOCTC].[UDF04] AS 'MOCTCUDF04'
                                            ,[MOCTC].[UDF05] AS 'MOCTCUDF05'
                                            ,[MOCTC].[UDF06] AS 'MOCTCUDF06'
                                            ,[MOCTC].[UDF07] AS 'MOCTCUDF07'
                                            ,[MOCTC].[UDF08] AS 'MOCTCUDF08'
                                            ,[MOCTC].[UDF09] AS 'MOCTCUDF09'
                                            ,[MOCTC].[UDF10] AS 'MOCTCUDF10'
                                            ,[TC200]
                                            ,[TC201]
                                            ,[TC202]
                                            ,[TE001]
                                            ,[TE002]
                                            ,[TE003]
                                            ,[TE004]
                                            ,[TE005]
                                            ,[TE006]
                                            ,[TE007]
                                            ,[TE008]
                                            ,[TE009]
                                            ,[TE010]
                                            ,[TE011]
                                            ,[TE012]
                                            ,[TE013]
                                            ,[TE014]
                                            ,[TE015]
                                            ,[TE016]
                                            ,[TE017]
                                            ,[TE018]
                                            ,[TE019]
                                            ,[TE020]
                                            ,[TE021]
                                            ,[TE022]
                                            ,[TE023]
                                            ,[TE024]
                                            ,[TE025]
                                            ,[TE026]
                                            ,[TE027]
                                            ,[TE028]
                                            ,[TE029]
                                            ,[TE030]
                                            ,[TE031]
                                            ,[TE032]
                                            ,[TE033]
                                            ,[TE034]
                                            ,[TE035]
                                            ,[TE036]
                                            ,[TE037]
                                            ,[TE038]
                                            ,[TE039]
                                            ,[TE040]
                                            ,[TE500]
                                            ,[TE501]
                                            ,[TE502]
                                            ,[TE503]
                                            ,[TE504]
                                            ,[TE505]
                                            ,[TE506]
                                            ,[TE507]
                                            ,[TE508]
                                            ,[MOCTE].[UDF01] AS 'MOCTEUDF01'
                                            ,[MOCTE].[UDF02] AS 'MOCTEUDF02'
                                            ,[MOCTE].[UDF03] AS 'MOCTEUDF03'
                                            ,[MOCTE].[UDF04] AS 'MOCTEUDF04'
                                            ,[MOCTE].[UDF05] AS 'MOCTEUDF05'
                                            ,[MOCTE].[UDF06] AS 'MOCTEUDF06'
                                            ,[MOCTE].[UDF07] AS 'MOCTEUDF07'
                                            ,[MOCTE].[UDF08] AS 'MOCTEUDF08'
                                            ,[MOCTE].[UDF09] AS 'MOCTEUDF09'
                                            ,[MOCTE].[UDF10] AS 'MOCTEUDF10'
                                            ,[TE200]
                                            ,[TE201]
                                            ,[TB_EB_USER].USER_GUID,NAME
                                            ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=MOCTC.CREATOR) AS 'MV002'
                                            FROM [TK].dbo.MOCTE,[TK].dbo.MOCTC
                                            LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT=MOCTC.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                            WHERE 1=1
                                            AND TC001=TE001 AND TC002=TE002
                                            AND TC001='{0}' AND TC002='{1}'
                                        ) AS TEMP
                                    ", TC001, TC002);

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        DataSet ds1 = new DataSet();
                        adapter.Fill(ds1, "ds1");

                        if (ds1.Tables["ds1"].Rows.Count > 0)
                        {
                            return ds1.Tables["ds1"];
                        }
                        else
                        {
                            return null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("SEARCH_MOCTC_MOCTE_B Error: " + ex.Message);
                return null;
            }
        }


        public void UPDATE_MOCTC_UDF01_B()
        {
            try
            {
                // 取得解密後的連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        sbSql.Clear();
                        sbSql.Append(@"
                                    UPDATE MOCTC
                                    SET UDF01 = 'UOF'
                                    FROM [TK].dbo.MOCTC
                                    INNER JOIN [TK].dbo.CMSMQ ON TC001 = MQ001
                                    WHERE MQ010 = '1'
                                      AND TC009 = 'N'
                                      AND MOCTC.UDF01 IN ('Y','y')
                                ");

                        cmd.CommandText = sbSql.ToString();
                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();
                        }
                        else
                        {
                            tran.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("UPDATE_MOCTC_UDF01_B Error: " + ex.Message);
                // 可以加上 Log(ex) 紀錄詳細錯誤
            }
        }

        public void ADD_TBPROMOTIONNFEE()
        {
            DataTable dt = FIND_UOF_PROMOT();

            if (dt == null || dt.Rows.Count == 0) return;

            foreach (DataRow dr in dt.Rows)
            {
                string docNbr = dr["DOC_NBR"]?.ToString() ?? "";
                string years = dr["YEARS"]?.ToString() ?? "";
                string depName = dr["COFrm002MDP"]?.ToString() ?? "";
                string titles = dr["COFrm002CS"]?.ToString() ?? "";
                string sales = dr["SALES"]?.ToString() ?? "";
                string names = dr["COFrm002Main"]?.ToString() ?? "";
                string actions = dr["COFrm002TD"]?.ToString() ?? "";

                // 處理 HTML → 純文字
                string html = "@" + actions;
                string text = "";
                // 使用HtmlAgilityPack解析HTML
                HtmlAgilityPack.HtmlDocument htmlDoc = new HtmlAgilityPack.HtmlDocument();
                htmlDoc.LoadHtml(html);

                // 清理字串
                text = text.Replace("&nbsp;", "").Replace("@u", "");
                if (!string.IsNullOrWhiteSpace(text))
                {
                    actions = text.Length <= 990 ? text : text.Substring(0, 990);
                }

                // 寫入 DB
                ADD_TO_TKBUSINESS_TBPROMOTIONNFEE(
                    docNbr,
                    years,
                    depName,
                    titles,
                    sales,
                    names,
                    actions
                );
            }
        }
        
        public static string ExtractTextFromHtml(HtmlNode node)
        {
            if (node.NodeType == HtmlNodeType.Text)
            {
                return node.InnerText;
            }

            if (node.NodeType == HtmlNodeType.Element && !node.HasChildNodes)
            {
                string text = node.InnerText.Trim();
                return !string.IsNullOrEmpty(text) ? text + " " : string.Empty;
            }

            return string.Concat(node.ChildNodes.Select(ExtractTextFromHtml));
        }
        public DataTable FIND_UOF_PROMOT()
        {
            DataTable result = new DataTable();

            try
            {
                //20210902密
                Class1 TKID = new Class1(); //用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString
                );

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
                using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), conn))
                {
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.Append(@"
                                    SELECT *
                                        ,SUBSTRING(COFrm002Date,1,4) AS 'YEARS'
                                        ,SUBSTRING(COFrm002Usr,1,3) AS 'SALES'
                                    FROM 
                                    (
                                        SELECT DOC_NBR
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""COFrm002Date""]/@fieldValue)[1]', 'nvarchar(max)') AS COFrm002Date
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""COFrm002Main""]/@fieldValue)[1]', 'nvarchar(max)') AS COFrm002Main
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""COFrm002Usr""]/@fieldValue)[1]', 'nvarchar(max)')  AS COFrm002Usr
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""COFrm002CS""]/@fieldValue)[1]', 'nvarchar(max)')  AS COFrm002CS
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""COFrm002MDP""]/@fieldValue)[1]', 'nvarchar(max)')  AS COFrm002MDP
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""COFrm002MG""]/@fieldValue)[1]', 'nvarchar(max)') AS COFrm002MG
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""COFrm002TD""]/@fieldValue)[1]', 'nvarchar(max)') AS COFrm002TD
                                            ,TB_WKF_FORM.FORM_NAME
                                        FROM [UOF].dbo.TB_WKF_TASK
                                            ,[UOF].dbo.TB_WKF_FORM
                                            ,[UOF].dbo.TB_WKF_FORM_VERSION
                                        WHERE TB_WKF_TASK.FORM_VERSION_ID = TB_WKF_FORM_VERSION.FORM_VERSION_ID
                                          AND TB_WKF_FORM.FORM_ID = TB_WKF_FORM_VERSION.FORM_ID
                                          AND TB_WKF_FORM.FORM_NAME IN ('2001.會辦單（行企）','1002.會辦單（一般）')
                                          AND TB_WKF_TASK.TASK_STATUS = '2' 
                                          AND TASK_RESULT = '0'
                                    ) AS TEMP
                                    WHERE COFrm002MG IN ('年節/產品活動或價格事宜')
                                      AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN (
                                          SELECT [DOC_NBR] 
                                          FROM [192.168.1.105].[TKBUSINESS].[dbo].[TBPROMOTIONNFEE] 
                                          WHERE ISNULL([DOC_NBR],'') <> ''
                                      )
                                    ORDER BY COFrm002Date
                                ");

                    adapter.SelectCommand.CommandText = sbSql.ToString();
                    adapter.Fill(result);
                }
            }
            catch
            {
                // log 可加上例外紀錄
            }

            return result;
        }


        public void ADD_TO_TKBUSINESS_TBPROMOTIONNFEE(
              string DOC_NBR,
              string YEARS,
              string DEPNAME,
              string TITLES,
              string SALES,
              string NAMES,
              string ACTIONS
            )
        {
            try
            {
                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
                {
                    conn.Open();
                    using (SqlTransaction tran = conn.BeginTransaction())
                    using (SqlCommand cmd = conn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                            INSERT INTO [TKBUSINESS].[dbo].[TBPROMOTIONNFEE]
                                            (
                                                [DOC_NBR],
                                                [YEARS],
                                                [DEPNAME],
                                                [TITLES],
                                                [SALES],
                                                [NAMES],
                                                [ACTIONS]
                                            )
                                            VALUES
                                            (
                                                @DOC_NBR,
                                                @YEARS,
                                                @DEPNAME,
                                                @TITLES,
                                                @SALES,
                                                @NAMES,
                                                @ACTIONS
                                            )";

                        cmd.Parameters.AddWithValue("@DOC_NBR", DOC_NBR ?? string.Empty);
                        cmd.Parameters.AddWithValue("@YEARS", YEARS ?? string.Empty);
                        cmd.Parameters.AddWithValue("@DEPNAME", DEPNAME ?? string.Empty);
                        cmd.Parameters.AddWithValue("@TITLES", TITLES ?? string.Empty);
                        cmd.Parameters.AddWithValue("@SALES", SALES ?? string.Empty);
                        cmd.Parameters.AddWithValue("@NAMES", NAMES ?? string.Empty);
                        cmd.Parameters.AddWithValue("@ACTIONS", ACTIONS ?? string.Empty);

                        try
                        {
                            int rows = cmd.ExecuteNonQuery();
                            if (rows > 0)
                                tran.Commit();
                            else
                                tran.Rollback();
                        }
                        catch
                        {
                            tran.Rollback();
                            throw;
                        }
                    }
                }
            }
            catch
            {
                // 建議補上 Log
            }
        }


        public string FIND_TKGAFFAIRS_TBASSINGS(string ASSINGS)
        {
            DataTable DT = new DataTable();
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                //庫存數量看LA009 IN ('20004','20006','20008','20019','20020'

                sbSql.AppendFormat(@"  
                                    SELECT TOP 1
                                    [ID]
                                    ,[ASSINGS]
                                    ,[TOS]
                                    FROM [TKGAFFAIRS].[dbo].[TBASSINGS]
                                    WHERE [ASSINGS]='{0}'
                                    ", ASSINGS);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"].Rows[0]["TOS"].ToString();
                }
                else
                {
                    return null;
                }

            }
            catch
            {

            }
            finally
            {
                sqlConn.Close();
            }


            return null;
        }

        /// <summary>
        /// 更新官網訂單宅配
        /// 利用COPMA的MA0012來比對訂單、銷貨單的收貨部門，如果是SevenEleven、 Family、 HiLife 改成地址
        /// </summary>
        public void COPTC_TC010_TC011_UPDATE()
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                sbSql.AppendFormat(@"                                   
                                    UPDATE  [TK].dbo.COPTC
                                    SET COPTC.TC011=TEMP.TC010,COPTC.TC010=TEMP.MA027
                                    FROM 
                                    (
                                    SELECT TC054,TC010,TC011,TC001,TC002
                                    ,MA027
                                    FROM [TK].dbo.COPTC,[TK].dbo.COPMA
                                    WHERE 1=1
                                    AND TC054=MA002
                                    AND TC054 IN (SELECT  [ID] FROM [TK].[dbo].[ZCOPMATOADDRESS])
                                    AND TC010<>MA027
                                    ) AS TEMP
                                    WHERE TEMP.TC001=COPTC.TC001 AND TEMP.TC002=COPTC.TC002
                                    AND COPTC.TC010<>TEMP.MA027

                                    UPDATE [TK].dbo.COPTG
                                    SET COPTG.TG008=TEMP.MA027
                                    FROM
                                    (
                                    SELECT TG001,TG002,TG075,TG008,MA027
                                    FROM [TK].dbo.COPTG,[TK].dbo.COPMA
                                    WHERE 1=1
                                    AND TG075=MA002
                                    AND TG023 IN ('N')
                                    AND TG075 IN ( (SELECT  [ID] FROM [TK].[dbo].[ZCOPMATOADDRESS]))
                                    AND TG008<>MA027
                                    ) AS TEMP
                                    WHERE TEMP.TG001=COPTG.TG001 AND TEMP.TG002=COPTG.TG002
                                    AND COPTG.TG008<>TEMP.MA027
                                    "
                                    );

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  
                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }
        }

        //更新工程品號基本資料檔
        public void UPDATE_TK_BOMMI()
        {
            try
            {
                // 20210902密
                Class1 TKID = new Class1(); // 用 new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
                {
                    conn.Open();
                    using (SqlTransaction tran = conn.BeginTransaction())
                    using (SqlCommand cmd = conn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                            UPDATE B
                                            SET B.MI004 = M.MB004
                                            FROM [TK].dbo.BOMMI B
                                            JOIN [TK].dbo.INVMB M ON B.MI001 = M.MB001
                                            WHERE B.MI004 <> M.MB004;

                                            UPDATE B
                                            SET B.MI002 = M.MB002
                                            FROM [TK].dbo.BOMMI B
                                            JOIN [TK].dbo.INVMB M ON B.MI001 = M.MB001
                                            WHERE B.MI002 <> M.MB002;
                                        ";

                        try
                        {
                            int rowsAffected = cmd.ExecuteNonQuery();

                            if (rowsAffected > 0)
                                tran.Commit();
                            else
                                tran.Rollback();
                        }
                        catch
                        {
                            tran.Rollback();
                            throw;
                        }
                    }
                }
            }
            catch
            {
                // TODO: 可以加上 log 紀錄錯誤
            }
        }

        //更新銷貨代收貨款
        public void UPDATE_TK_COPTGTG113()
        {
            try
            {
                // 20210902密
                Class1 TKID = new Class1(); // 用 new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
                {
                    conn.Open();
                    using (SqlTransaction tran = conn.BeginTransaction())
                    using (SqlCommand cmd = conn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                        -- 更新符合 TG142 條件的 TG113
                                        UPDATE G
                                        SET G.TG113 = G.TG045 + G.TG046
                                        FROM [TK].dbo.COPTG G
                                        JOIN [TK].dbo.ZCOPTG Z ON G.TG142 = Z.TG142
                                        WHERE Z.KIND = 'TG142'
                                          AND G.TG023 <> 'V'
                                          AND G.TG113 <> (G.TG045 + G.TG046);

                                        -- 更新符合 TG146 條件的 TG113
                                        UPDATE G
                                        SET G.TG113 = G.TG045 + G.TG046
                                        FROM [TK].dbo.COPTG G
                                        JOIN [TK].dbo.ZCOPTG Z ON G.TG146 = Z.TG142
                                        WHERE Z.KIND = 'TG146'
                                          AND G.TG023 <> 'V'
                                          AND G.TG113 <> (G.TG045 + G.TG046);
                                    ";

                        try
                        {
                            int rowsAffected = cmd.ExecuteNonQuery();

                            if (rowsAffected > 0)
                                tran.Commit();
                            else
                                tran.Rollback();
                        }
                        catch
                        {
                            tran.Rollback();
                            throw;
                        }
                    }
                }
            }
            catch
            {
                // TODO: 可加上 Log 紀錄錯誤
            }
        }

        //轉入1006.委外送驗申請單
        public void NEWUOFQC1006()
        {
            DataTable DT = FIND_UOF_QC1006();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach(DataRow DR in DT.Rows)
                {
                    string DOC_NBR = DR["DOC_NBR"].ToString();
                    string QCFrm004SN = DR["QCFrm004SN"].ToString();
                    string QCFrm004Date = DR["QCFrm004Date"].ToString();
                    string QCFrm004UserLevel = DR["QCFrm004UserLevel"].ToString();
                    string QC6001 = DR["QC6001"].ToString();
                    string QC6002 = DR["QC6002"].ToString();
                    string QC6012 = DR["QC6012"].ToString();
                    string QC6003 = DR["QC6003"].ToString();
                    string QC6004 = DR["QC6004"].ToString();
                    string QC6005 = DR["QC6005"].ToString();
                    string QC6006 = DR["QC6006"].ToString();
                    string QC6007 = DR["QC6007"].ToString();
                    string QC6008 = DR["QC6008"].ToString();
                    string QC6009 = DR["QC6009"].ToString();
                    string QC60010 = DR["QC60010"].ToString();

                    ADD_NEW_TO_TMQC_TBUOFQC1006(
                                                DOC_NBR
                                                , QCFrm004SN
                                                , QCFrm004Date
                                                , QCFrm004UserLevel
                                                , QC6001
                                                , QC6002
                                                , QC6012
                                                , QC6003
                                                , QC6004
                                                , QC6005
                                                , QC6006
                                                , QC6007
                                                , QC6008
                                                , QC6009
                                                , QC60010
                                                );
                }
                
            }

             //MessageBox.Show("完成");
        }
        public DataTable FIND_UOF_QC1006()
        {
            DataTable dt = new DataTable();

            try
            {
                // 20210902密
                Class1 TKID = new Class1(); // 用 new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString
                );

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                string sql = @"
                            SELECT  
                            DOC_NBR,  

                            SN_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QCFrm004SN,  
                            DATE_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QCFrm004Date,  
                            USERLV_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QCFrm004UserLevel,  

                            C1_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QC6001,  
                            C2_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QC6002,  
                            C12_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QC6012,  
                            C3_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QC6003,  
                            C4_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QC6004,  
                            C5_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QC6005,  
                            C6_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QC6006,  
                            C8_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QC6008,  
                            C9_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QC6009,  
                            C10_X.value('(./@fieldValue)[1]', 'nvarchar(200)') AS QC60010,  

                            QC6007 = STUFF((
                            SELECT '、' + 
                                CELL.value('(./@fieldValue)[1]', 'nvarchar(100)')
                            FROM T.CURRENT_DOC.nodes('//DataGrid[@fieldId=""QC6007""]/Row/Cell[@fieldId=""QC60071"" or @fieldId=""QC60072""]') AS D(CELL)
                            FOR XML PATH(''), TYPE
                            ).value('.', 'nvarchar(max)'), 1, 1, '')

                            FROM [UOF].[dbo].[TB_WKF_TASK] T
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QCFrm004SN""]') AS SN(SN_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QCFrm004Date""]') AS DT(DATE_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QCFrm004UserLevel""]') AS UL(USERLV_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QC6001""]') AS F1(C1_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QC6002""]') AS F2(C2_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QC6012""]') AS F12(C12_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QC6003""]') AS F3(C3_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QC6004""]') AS F4(C4_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QC6005""]') AS F5(C5_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QC6006""]') AS F6(C6_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QC6008""]') AS F8(C8_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QC6009""]') AS F9(C9_X)
                            CROSS APPLY T.CURRENT_DOC.nodes('//FieldItem[@fieldId=""QC60010""]') AS F10(C10_X)
                            WHERE T.FORM_VERSION_ID IN (
                                SELECT FV.FORM_VERSION_ID
                                FROM [UOF].[dbo].[TB_WKF_FORM_VERSION] FV
                                JOIN [UOF].[dbo].[TB_WKF_FORM] F
                                    ON FV.FORM_ID = F.FORM_ID
                                WHERE F.FORM_NAME LIKE '%委外送驗申請單%'
                            )
                            AND T.DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN (
                                SELECT Q.DOC_NBR
                                FROM [192.168.1.105].[TKQC].[dbo].[TBUOFQC1006] Q
                            );
        ";

                using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
                using (SqlDataAdapter adapter = new SqlDataAdapter(sql, conn))
                {
                    conn.Open();
                    adapter.Fill(dt);
                }

                return dt.Rows.Count > 0 ? dt : null;
            }
            catch
            {
                // TODO: 可以加上 log
                return null;
            }
        }

       

        public string FIND_UOF_QC1006(string DOC_NBR)
        {
            DataTable DT = new DataTable();
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                //庫存數量看LA009 IN ('20004','20006','20008','20019','20020'

                sbSql.AppendFormat(@"  
                                    SELECT 
                                    DOC_NBR,CONVERT(nvarchar(MAX),CURRENT_DOC) CURRENT_DOC
                                    FROM [UOF].[dbo].[TB_WKF_TASK]
                                    WHERE DOC_NBR='{0}'
                                    ", DOC_NBR);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"].Rows[0]["CURRENT_DOC"].ToString();
                }
                else
                {
                    return null;
                }

            }
            catch
            {

            }
            finally
            {
                sqlConn.Close();
            }


            return null;
        }
        public void ADD_NEW_TO_TMQC_TBUOFQC1006(
            string DOC_NBR,
            string QCFrm004SN,
            string QCFrm004Date,
            string QCFrm004UserLevel,
            string QC6001,
            string QC6002,
            string QC6012,
            string QC6003,
            string QC6004,
            string QC6005,
            string QC6006,
            string QC6007,
            string QC6008,
            string QC6009,
            string QC60010
            )
        {
            try
            {
                // 20210902 密
                Class1 TKID = new Class1(); // 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = @"
                                            INSERT INTO [TKQC].[dbo].[TBUOFQC1006]
                                            (
                                                [DOC_NBR],
                                                [QCFrm004SN],
                                                [QCFrm004Date],
                                                [QCFrm004UserLevel],
                                                [QC6001],
                                                [QC6002],
                                                [QC6012],
                                                [QC6003],
                                                [QC6004],
                                                [QC6005],
                                                [QC6006],
                                                [QC6007],
                                                [QC6008],
                                                [QC6009],
                                                [QC60010]
                                            )
                                            VALUES
                                            (
                                                @DOC_NBR,
                                                @QCFrm004SN,
                                                @QCFrm004Date,
                                                @QCFrm004UserLevel,
                                                @QC6001,
                                                @QC6002,
                                                @QC6012,
                                                @QC6003,
                                                @QC6004,
                                                @QC6005,
                                                @QC6006,
                                                @QC6007,
                                                @QC6008,
                                                @QC6009,
                                                @QC60010
                                            )";

                        cmd.Parameters.AddWithValue("@DOC_NBR", DOC_NBR ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QCFrm004SN", QCFrm004SN ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QCFrm004Date", QCFrm004Date ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QCFrm004UserLevel", QCFrm004UserLevel ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QC6001", QC6001 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QC6002", QC6002 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QC6012", QC6012 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QC6003", QC6003 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QC6004", QC6004 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QC6005", QC6005 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QC6006", QC6006 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QC6007", QC6007 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QC6008", QC6008 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QC6009", QC6009 ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@QC60010", QC60010 ?? (object)DBNull.Value);

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback(); // 交易取消
                        }
                        else
                        {
                            tran.Commit(); // 執行交易
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議至少 log 下來
                Console.WriteLine("ADD_NEW_TO_TMQC_TBUOFQC1006 發生錯誤: " + ex.Message);
                throw;
            }
        }


        public void ADD_UOF_COPMA_100A(string MA001)
        {
            //新增客戶資料
            ADD_TB_UOF_COPMA_100A(MA001);

            DataTable dt = FIND_TB_UOF_COPMA_100A();
            if (dt != null && dt.Rows.Count >= 1)
            {
                ADD_TB_WKF_EXTERNAL_TASK_UOF_COPMA_100A(dt);
            }

            //MessageBox.Show("完成,到UOF 的拋轉暫時表、正式表單查看");
        }

        public void ADD_TB_UOF_COPMA_100A(string MA001)
        {
            try
            {
                // 20210902密
                Class1 TKID = new Class1(); // 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );

                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        StringBuilder SQL_EXE = new StringBuilder();
                        SQL_EXE.AppendFormat(@"
                                    DELETE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                     INSERT INTO [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    (
                                    [MA001]
                                    ,[MA016]
                                    ,[sd001]
                                    ,[sd002]
                                    ,[sd003]
                                    ,[sd004]
                                    ,[sd005]
                                    ,[sd90]
                                    ,[sd006]
                                    ,[sd007]
                                    ,[sd008]
                                    ,[sd009]
                                    ,[sd010]
                                    ,[sd011]
                                    ,[sd012]
                                    ,[sd013]
                                    ,[sd014]
                                    ,[sd015]
                                    ,[sd016]
                                    ,[sd017]
                                    ,[sd018]
                                    ,[sd019]
                                    ,[sd020]
                                    ,[sd021]
                                    ,[sd022]
                                    ,[sd023]
                                    ,[sd024]
                                    ,[sd025]
                                    ,[sd026]
                                    ,[sd027]
                                    ,[sd028]
                                    ,[sd029]
                                    ,[sd030]
                                    ,[sd031]
                                    ,[sd032]
                                    ,[sd033]
                                    ,[sd034]
                                    ,[sd035]
                                    ,[sd036]
                                    ,[sd037]
                                    ,[sd038]
                                    ,[sd039]
                                    ,[sd040]
                                    ,[sd041]
                                    ,[sd042]
                                    ,[sd043]
                                    ,[sd044]
                                    ,[sd0]
                                    ,[sd051]
                                    ,[sd052]
                                    ,[sd053]
                                    ,[sd054]
                                    ,[sd055]
                                    ,[sd056]
                                    ,[sd057]
                                    ,[sd058]
                                    ,[sd060]
                                    ,[sd061]
                                    ,[sd062]
                                    ,[sd063]
                                    ,[sd064]
                                    ,[sd065]
                                    ,[sd066]
                                    ,[sd067]
                                    ,[sd068]
                                    ,[sd069]
                                    ,[sd070]
                                    ,[sd071]
                                    ,[sd072]
                                    ,[sd073]
                                    ,[sd074]
                                    ,[sd075]
                                    ,[sd076]
                                    ,[sd077]
                                    ,[sd078]
                                    ,[sd079]
                                    ,[sd080]
                                    ,[sd081]
                                    ,[sd082]
                                    ,[sd083]
                                    )

                                   SELECT   
                                    MA001
                                    ,MA016
                                    ,'' AS  sd001
                                    ,CONVERT(NVARCHAR,CONVERT(DATETIME,GETDATE()),111) AS  sd002
                                    ,'修改' AS  sd003
                                    ,MA002 AS  sd004
                                    ,MA003 AS  sd005
                                    ,(CASE WHEN MA001 LIKE '2%' THEN '國內業務@國內業務' WHEN MA001 LIKE 'A%' THEN '國內業務@國內業務'  WHEN MA001 LIKE '3%' THEN '國外業務@國外業務' WHEN MA001 LIKE 'B%' THEN '國外業務@國外業務' END  )AS  sd90
                                    ,MA023 AS  sd006
                                    ,MA025 AS  sd007
                                    ,MA010 AS  sd008
                                    ,MA004 AS  sd009
                                    ,MA005 AS  sd010
                                    ,MA007 AS  sd011
                                    ,MA079 AS  sd012
                                    ,MA008 AS  sd013
                                    ,MA006 AS  sd014
                                    ,MA007 AS  sd015
                                    ,MA009 AS  sd016
                                    ,(CASE WHEN ISDATE(MA020) = 1  THEN (CONVERT(NVARCHAR,CONVERT(DATETIME,COPMA.MA020),111)) END)  AS  sd017
                                    ,MA011*10000  AS  sd018
                                    ,'有限公司' AS  sd019
                                    ,MA013 AS  sd020
                                    ,(CASE WHEN MA067>=1 THEN '有' ELSE '無' END ) AS  sd021
                                    ,'' AS  sd022
                                    ,(CASE WHEN MA067>=1 THEN '有' ELSE '無' END ) AS  sd023
                                    ,'' AS  sd024
                                    ,'自有' AS  sd025
                                    ,'0' AS  sd026
                                    ,'電子發票' AS  sd027
                                    ,(CASE WHEN MA041='1' THEN '現金'  WHEN MA041='2' THEN '電匯' WHEN MA041='3' THEN '支票' WHEN MA041='4' THEN '其他'END ) AS  sd028 
                                    ,'法人' AS  sd029
                                    ,COPMA.UDF02 AS  sd030
                                    ,'0' AS  sd031
                                    ,'無' AS  sd032
                                    ,'0' AS  sd033
                                    ,'25號' AS  sd034
                                    ,MO006 AS  sd035
                                    ,'月結' AS  sd036
                                    ,'' AS  sd037
                                    ,'' AS  sd038
                                    ,NA003 AS  sd039
                                    ,NA003 AS  sd041
                                    ,NA005 AS  sd040
                                    ,MA033 AS  sd042
                                    ,MA033 AS  sd043
                                    ,MA014 AS  sd044
                                    ,'客戶信用評分及信用額度' AS  sd0
                                    ,'信用評分' AS  sd051
                                    ,'' AS  sd052
                                    ,'' AS  sd053
                                    ,'' AS  sd054
                                    ,'' AS  sd055
                                    ,'信用評分' AS  sd056
                                    ,'3000萬以下(4分)' AS  sd057
                                    ,'4' AS  sd058
                                    ,'0' AS  sd060
                                    ,'0' AS  sd061
                                    ,'0' AS  sd062
                                    ,'' AS  sd063
                                    ,'3000萬以下（4分）' AS  sd064
                                    ,'4' AS  sd065
                                    ,'0' AS  sd066
                                    ,'0' AS  sd067
                                    ,'0' AS  sd068
                                    ,'0' AS  sd069
                                    ,'50萬以下(5分)' AS  sd070
                                    ,'5' AS  sd071
                                    ,'沒有(10分)' AS  sd072
                                    ,'10' AS  sd073
                                    ,'正常(10分)' AS  sd074
                                    ,'10' AS  sd075
                                    ,'' AS  sd076
                                    ,'5%以下(5分)' AS  sd077
                                    ,'5' AS  sd078
                                    ,'38' AS  sd079
                                    ,'0' AS  sd080
                                    ,'0' AS  sd081
                                    ,'38' AS  sd082
                                    ,'0' AS  sd083
                                    FROM [TK].dbo.COPMA
                                    LEFT JOIN [DSCSYS].dbo.CMSMO ON MO001=MA046
                                    LEFT JOIN [TK].dbo.CMSNA ON NA001='2' AND NA002=MA083
                                    WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    AND    MA001='{0}' 

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET [sd057]='3000萬以下(4分)'

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET [sd057]='3001萬~5000萬(6分)'
                                    WHERE MA001 IN (
                                    SELECT MA001 
                                    FROM [TK].dbo.COPMA
                                    WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    AND  MA011>=30000001
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET [sd057]='5001萬~1億以上(10分)'
                                    WHERE MA001 IN (
                                    SELECT MA001 
                                    FROM [TK].dbo.COPMA
                                    WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    AND  MA011>=50000001
                                    )


                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET sd058='4'

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET sd058='6'
                                    WHERE MA001 IN (
                                    SELECT MA001 
                                    FROM [TK].dbo.COPMA
                                    WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    AND  MA011>=30000001
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET sd058='10'
                                    WHERE MA001 IN (
                                    SELECT MA001 
                                    FROM [TK].dbo.COPMA
                                    WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    AND  MA011>=50000001
                                    )


                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET [sd070]='50萬以下(5分)'

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET [sd070]='51萬~150萬(10分)'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 510000
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET [sd070]='151萬~300萬(15分)'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 1510000
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET [sd070]='300萬以上(20分)'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 3000000
                                    )


                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET [sd071]='5'

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET [sd071]='10'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 510000
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET [sd071]='15'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 1510000
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    SET [sd071]='20'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 3000000
                                    )
                                    ", MA001);

                        cmd.CommandText = SQL_EXE.ToString();
                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback(); // 交易取消
                        }
                        else
                        {
                            tran.Commit(); // 執行交易
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("ADD_TB_UOF_COPMA_100A 發生錯誤: " + ex.Message);
                throw;
            }
        }


        public DataTable FIND_TB_UOF_COPMA_100A()
        {
            DataTable dt = new DataTable();
            DataTable DT = new DataTable();
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                //庫存數量看LA009 IN ('20004','20006','20008','20019','20020'

                sbSql.AppendFormat(@"  
                                    SELECT *
                                    FROM [TKBUSINESS].[dbo].[UOF_COPMA100A]
                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];
                }
                else
                {
                    return null;
                }

            }
            catch
            {

            }
            finally
            {
                sqlConn.Close();
            }

            return dt;
        }


        public void ADD_TB_WKF_EXTERNAL_TASK_UOF_COPMA_100A(DataTable dt)
        {
            DataTable DTUPFDEP = SEARCHUOFDEP("140078");          

            string VERSION_ID = SEARCHFORM_UOF_VERSION_ID("100A.客戶基本資料表");

            foreach (DataRow DR in dt.Rows)
            {
                // 更新申請者資訊
                DTUPFDEP = SEARCHUOFDEP(DR["MA016"].ToString());
                string account = DTUPFDEP.Rows[0]["ACCOUNT"].ToString();
                string groupId = DTUPFDEP.Rows[0]["GROUP_ID"].ToString();
                string jobTitleId = DTUPFDEP.Rows[0]["TITLE_ID"].ToString();
                string fillerName = DTUPFDEP.Rows[0]["NAME"].ToString();
                string fillerUserGuid = DTUPFDEP.Rows[0]["USER_GUID"].ToString();

                string EXTERNAL_FORM_NBR = DR["MA001"].ToString();

                // 建立 XML
                XmlDocument xmlDoc = new XmlDocument();
                XmlElement Form = xmlDoc.CreateElement("Form");
                if (!string.IsNullOrEmpty(VERSION_ID))
                    Form.SetAttribute("formVersionId", VERSION_ID);
                Form.SetAttribute("urgentLevel", "2");
                xmlDoc.AppendChild(Form);

                XmlElement Applicant = xmlDoc.CreateElement("Applicant");
                Applicant.SetAttribute("account", account);
                Applicant.SetAttribute("groupId", groupId);
                Applicant.SetAttribute("jobTitleId", jobTitleId);
                Form.AppendChild(Applicant);

                XmlElement Comment = xmlDoc.CreateElement("Comment");
                Comment.InnerText = "申請者意見";
                Applicant.AppendChild(Comment);

                XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
                Form.AppendChild(FormFieldValue);

                // 使用新的 AddFieldItem
                AddFieldItem(xmlDoc, FormFieldValue, "sd001", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "MA001", DR["MA001"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd002", DR["sd002"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd003", DR["sd003"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd004", DR["sd004"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd005", DR["sd005"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd90", DR["sd90"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd006", DR["sd006"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd007", DR["sd007"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd008", DR["sd008"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd009", DR["sd009"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd010", DR["sd010"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd011", DR["sd011"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd012", DR["sd012"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd013", DR["sd013"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd014", DR["sd014"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd015", DR["sd015"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd016", DR["sd016"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd017", DR["sd017"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd018", DR["sd018"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd019", DR["sd019"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd020", DR["sd020"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd021", DR["sd021"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd022", DR["sd022"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd023", DR["sd023"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd024", DR["sd024"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd025", DR["sd025"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd026", DR["sd026"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd027", DR["sd027"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd028", DR["sd028"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd029", DR["sd029"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd030", DR["sd030"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd031", DR["sd031"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd032", DR["sd032"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd033", DR["sd033"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd034", DR["sd034"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd035", DR["sd035"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd036", DR["sd036"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd037", DR["sd037"].ToString(), fillerName, fillerUserGuid, account);                        
                AddFieldItem(xmlDoc, FormFieldValue, "sd038", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd039", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd040", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd041", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd042", DR["sd042"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd043", DR["sd043"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd0", DR["sd0"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd044", DR["sd044"].ToString(), fillerName, fillerUserGuid, account);                
                AddFieldItem(xmlDoc, FormFieldValue, "sd051", DR["sd051"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd057", DR["sd057"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd058", DR["sd058"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd060", DR["sd060"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd061", DR["sd061"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd062", DR["sd062"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd063", DR["sd063"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd064", DR["sd064"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd065", DR["sd065"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd066", DR["sd066"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd067", DR["sd067"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd068", DR["sd068"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd069", DR["sd069"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd070", DR["sd070"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd071", DR["sd071"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd072", DR["sd072"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd073", DR["sd073"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd074", DR["sd074"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd075", DR["sd075"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd076", DR["sd076"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd077", DR["sd077"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd078", DR["sd078"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd079", DR["sd079"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd080", DR["sd080"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd081", DR["sd081"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd082", DR["sd082"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd083", DR["sd083"].ToString(), fillerName, fillerUserGuid, account);

                // 其他欄位依需求繼續加...

                // 資料庫連線
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                string connectionString = sqlsb.ConnectionString;

                string query = $@"
                                INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                VALUES (NEWID(),@XML,2,'{EXTERNAL_FORM_NBR}')
                            ";

                try
                {
                    using (SqlConnection conn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                        conn.Open();
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception EX)
                {
                    // 可加 Log
                }
            }
        }

       
        //ERP客戶轉-1001客戶基本資料表
        public void ADD_UOF_COPMA_1001()
        {
            //新增客戶資料 TKBUSINESS UOF_COPMA1001
            ADD_TB_UOF_COPMA_1001();

            DataTable dt = FIND_TB_UOF_COPMA_1001();
            if (dt != null && dt.Rows.Count >= 1)
            {
                ADD_TB_WKF_EXTERNAL_TASK_UOF_COPMA_1001(dt);
            }
        }

        public void ADD_TB_UOF_COPMA_1001()
        {
            // 建立加密解密物件
            Class1 TKID = new Class1();

            // 讀取並解密連線字串
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
            );
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
            {
                sqlConn.Open();
                using (SqlTransaction tran = sqlConn.BeginTransaction())
                using (SqlCommand cmd = new SqlCommand())
                {
                    try
                    {
                        cmd.Connection = sqlConn;
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        // 清空 StringBuilder 並塞入 SQL
                        sbSql.Clear();
                        sbSql.AppendFormat(@"
                                    DELETE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                     INSERT INTO [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    (
                                    [MA001]
                                    ,[MA016]
                                    ,[sd001]
                                    ,[sd002]
                                    ,[sd003]
                                    ,[sd004]
                                    ,[sd005]
                                    ,[sd90]
                                    ,[sd006]
                                    ,[sd007]
                                    ,[sd008]
                                    ,[sd009]
                                    ,[sd010]
                                    ,[sd011]
                                    ,[sd012]
                                    ,[sd013]
                                    ,[sd014]
                                    ,[sd015]
                                    ,[sd016]
                                    ,[sd017]
                                    ,[sd018]
                                    ,[sd019]
                                    ,[sd020]
                                    ,[sd021]
                                    ,[sd022]
                                    ,[sd023]
                                    ,[sd024]
                                    ,[sd025]
                                    ,[sd026]
                                    ,[sd027]
                                    ,[sd028]
                                    ,[sd029]
                                    ,[sd030]
                                    ,[sd031]
                                    ,[sd032]
                                    ,[sd033]
                                    ,[sd034]
                                    ,[sd035]
                                    ,[sd036]
                                    ,[sd037]
                                    ,[sd038]
                                    ,[sd039]
                                    ,[sd040]
                                    ,[sd041]
                                    ,[sd042]
                                    ,[sd043]
                                    ,[sd044]
                                    ,[sd0]
                                    ,[sd051]
                                    ,[sd052]
                                    ,[sd053]
                                    ,[sd054]
                                    ,[sd055]
                                    ,[sd056]
                                    ,[sd057]
                                    ,[sd058]
                                    ,[sd060]
                                    ,[sd061]
                                    ,[sd062]
                                    ,[sd063]
                                    ,[sd064]
                                    ,[sd065]
                                    ,[sd066]
                                    ,[sd067]
                                    ,[sd068]
                                    ,[sd069]
                                    ,[sd070]
                                    ,[sd071]
                                    ,[sd072]
                                    ,[sd073]
                                    ,[sd074]
                                    ,[sd075]
                                    ,[sd076]
                                    ,[sd077]
                                    ,[sd078]
                                    ,[sd079]
                                    ,[sd080]
                                    ,[sd081]
                                    ,[sd082]
                                    ,[sd083]
                                    )

                                    SELECT   
                                     MA001
                                    ,MA016
                                    ,'' AS  sd001
                                    ,CONVERT(NVARCHAR,CONVERT(DATETIME,GETDATE()),111) AS  sd002
                                    ,'新增' AS  sd003
                                    ,MA003 AS  sd004
                                    ,MA002 AS  sd005
                                    ,(CASE WHEN MA001 LIKE '2%' THEN '國內業務@國內業務' WHEN MA001 LIKE 'A%' THEN '國內業務@國內業務'  WHEN MA001 LIKE '3%' THEN '國外業務@國外業務' WHEN MA001 LIKE 'B%' THEN '國外業務@國外業務' END  )AS  sd90
                                    ,MA023 AS  sd006
                                    ,MA025 AS  sd007
                                    ,MA010 AS  sd008
                                    ,MA004 AS  sd009
                                    ,MA005 AS  sd010
                                    ,'' AS  sd011
                                    ,'' AS  sd012
                                    ,'' AS  sd013
                                    ,MA006 AS  sd014
                                    ,MA007 AS  sd015
                                    ,MA009 AS  sd016
                                    ,(CASE WHEN ISDATE(MA020) = 1  THEN (CONVERT(NVARCHAR,CONVERT(DATETIME,COPMA.MA020),111)) END)  AS  sd017
                                    ,MA011*10000 AS  sd018
                                    ,'有限公司' AS  sd019
                                    ,MA013 AS  sd020
                                    ,(CASE WHEN MA067>=1 THEN '有' ELSE '無' END ) AS  sd021
                                    ,'' AS  sd022
                                    ,(CASE WHEN MA067>=1 THEN '有' ELSE '無' END ) AS  sd023
                                    ,'' AS  sd024
                                    ,'自有' AS  sd025
                                    ,'' AS  sd026
                                    ,'電子發票' AS  sd027
                                    ,(CASE WHEN MA041='1' THEN '現金'  WHEN MA041='2' THEN '電匯' WHEN MA041='3' THEN '支票' WHEN MA041='4' THEN '其他'END ) AS  sd028 
                                    ,'法人' AS  sd029
                                    ,COPMA.UDF02 AS  sd030
                                    ,'' AS  sd031
                                    ,'' AS  sd032
                                    ,'0' AS  sd033
                                    ,'25號' AS  sd034
                                    ,MO006 AS  sd035
                                    ,'' AS  sd036
                                    ,'' AS  sd037
                                    ,'' AS  sd038
                                    ,NA003 AS  sd039
                                    ,NA003 AS  sd041
                                    ,NA005 AS  sd040
                                    ,MA033 AS  sd042
                                    ,MA033 AS  sd043
                                    ,MA014 AS  sd044
                                    ,'客戶信用評分及信用額度' AS  sd0
                                    ,'信用評分' AS  sd051
                                    ,'' AS  sd052
                                    ,'' AS  sd053
                                    ,'' AS  sd054
                                    ,'' AS  sd055
                                    ,'信用評分' AS  sd056
                                    ,'3000萬以下(4分)' AS  sd057
                                    ,'4' AS  sd058
                                    ,'0' AS  sd060
                                    ,'0' AS  sd061
                                    ,'0' AS  sd062
                                    ,'' AS  sd063
                                    ,'3000萬以下（4分）' AS  sd064
                                    ,'4' AS  sd065
                                    ,'0' AS  sd066
                                    ,'' AS  sd067
                                    ,'0' AS  sd068
                                    ,'' AS  sd069
                                    ,'50萬以下(5分)' AS  sd070
                                    ,'5' AS  sd071
                                    ,'沒有(10分)' AS  sd072
                                    ,'10' AS  sd073
                                    ,'正常(10分)' AS  sd074
                                    ,'10' AS  sd075
                                    ,'' AS  sd076
                                    ,'5%以下(5分)' AS  sd077
                                    ,'5' AS  sd078
                                    ,'38' AS  sd079
                                    ,'0' AS  sd080
                                    ,'' AS  sd081
                                    ,'38' AS  sd082
                                    ,'0' AS  sd083
                                    FROM [TK].dbo.COPMA
                                    LEFT JOIN [DSCSYS].dbo.CMSMO ON MO001=MA046
                                    LEFT JOIN [TK].dbo.CMSNA ON NA001='2' AND NA002=MA083
                                    WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    AND MA001 COLLATE Chinese_Taiwan_Stroke_CI_AS  NOT IN 
                                    (
                                    SELECT [MA001]
                                    FROM [192.168.1.223].[UOF].[dbo].[View_TB_WKF_TASK_COPMA1001]
                                    )
                                    AND MA001 COLLATE Chinese_Taiwan_Stroke_CI_AS  NOT IN 
                                    (
                                    SELECT  [EXTERNAL_FORM_NBR]
                                    FROM [192.168.1.223].[UOF].[dbo].[View_TB_WKF_TASK_COPMA1001_EXTERNAL_TASK]
                                    )


                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET [sd057]='3000萬以下(4分)'

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET [sd057]='3001萬~5000萬(6分)'
                                    WHERE MA001 IN (
                                    SELECT MA001 
                                    FROM [TK].dbo.COPMA
                                    WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    AND  MA011>=30000001
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET [sd057]='5001萬~1億以上(10分)'
                                    WHERE MA001 IN (
                                    SELECT MA001 
                                    FROM [TK].dbo.COPMA
                                    WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    AND  MA011>=50000001
                                    )


                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET sd058='4'

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET sd058='6'
                                    WHERE MA001 IN (
                                    SELECT MA001 
                                    FROM [TK].dbo.COPMA
                                    WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    AND  MA011>=30000001
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET sd058='10'
                                    WHERE MA001 IN (
                                    SELECT MA001 
                                    FROM [TK].dbo.COPMA
                                    WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    AND  MA011>=50000001
                                    )


                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET [sd070]='50萬以下(5分)'

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET [sd070]='51萬~150萬(10分)'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 510000
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET [sd070]='151萬~300萬(15分)'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 1510000
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET [sd070]='300萬以上(20分)'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 3000000
                                    )


                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET [sd071]='5'

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET [sd071]='10'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 510000
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET [sd071]='15'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 1510000
                                    )

                                    UPDATE [TKBUSINESS].[dbo].[UOF_COPMA1001]
                                    SET [sd071]='20'
                                    WHERE MA001 IN (
                                    SELECT MA001
                                    FROM (
                                        SELECT MA001,
                                            (
                                                SELECT SUM(LA017 - LA020 - LA022 - LA023)
                                                FROM [TK].dbo.SASLA
                                                WHERE LA006 = MA001 AND  YEAR(LA015) = YEAR(DATEADD(YEAR, -1, GETDATE()))
                                            ) AS LASTMONEYS
                                        FROM [TK].dbo.COPMA
                                        WHERE (MA001 LIKE '2%' OR MA001 LIKE 'A%' OR MA001 LIKE '3%' OR MA001 LIKE 'B%')
                                    ) AS TEMP
                                    WHERE LASTMONEYS > 3000000
                                    )
                                    ");

                        cmd.CommandText = sbSql.ToString();
                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                            tran.Rollback();
                        else
                            tran.Commit();
                    }
                    catch (Exception EX)
                    {
                        tran.Rollback();
                        throw; // 保留例外資訊，方便除錯
                    }
                }
            }
        }


        public DataTable FIND_TB_UOF_COPMA_1001()
        {
            DateTime SDAY = DateTime.Now.AddMonths(-2);
            string SDAYS = SDAY.ToString("yyyyMMdd");

            DataTable dt = new DataTable();

            try
            {
                // 建立加密解密物件
                Class1 TKID = new Class1();

                // 取得並解密連線字串
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString
                );
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    // 組 SQL
                    sbSql.Clear();
                    sbSql.AppendFormat(@"
                                        SELECT *
                                        FROM [192.168.1.105].[TKBUSINESS].[dbo].[UOF_COPMA1001]
                                        WHERE MA001 COLLATE Chinese_Taiwan_Stroke_CI_AS NOT IN
                                        (
                                            SELECT EXTERNAL_FORM_NBR
                                            FROM [UOF].[dbo].[TB_WKF_EXTERNAL_TASK]
                                            LEFT JOIN [UOF].[dbo].[TB_WKF_FORM_VERSION] 
                                                ON [TB_WKF_FORM_VERSION].FORM_VERSION_ID=[TB_WKF_EXTERNAL_TASK].FORM_INFO.value('(/Form/@formVersionId)[1]', 'VARCHAR(50)')
                                            LEFT JOIN [UOF].[dbo].[TB_WKF_FORM] 
                                                ON [TB_WKF_FORM].FORM_ID=[TB_WKF_FORM_VERSION].FORM_ID
                                            WHERE 1=1
                                            AND STATUS IN ('1','2')
                                            AND ISNULL(EXTERNAL_FORM_NBR,'')<>''
                                            AND [TB_WKF_FORM].FORM_NAME='1001.客戶基本資料表'
                                            AND MODIFY_TIME>='{0}'
                                        )
                                    ", SDAYS);

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    using (SqlCommandBuilder builder = new SqlCommandBuilder(adapter))
                    {
                        DataSet ds = new DataSet();
                        sqlConn.Open();
                        adapter.Fill(ds, "ds1");

                        if (ds.Tables["ds1"].Rows.Count > 0)
                            return ds.Tables["ds1"];
                        else
                            return null;
                    }
                }
            }
            catch
            {
                // 可以加 logging 或拋出例外以便除錯
                return null;
            }
        }

        public void ADD_TB_WKF_EXTERNAL_TASK_UOF_COPMA_1001(DataTable dt)
        {
            DataTable DTUPFDEP = SEARCHUOFDEP("140078");

            string account = DTUPFDEP.Rows[0]["ACCOUNT"].ToString();
            string groupId = DTUPFDEP.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DTUPFDEP.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DTUPFDEP.Rows[0]["NAME"].ToString();
            string fillerUserGuid = DTUPFDEP.Rows[0]["USER_GUID"].ToString();

            string EXTERNAL_FORM_NBR = "";
            string VERSION_ID = SEARCHFORM_UOF_VERSION_ID("1001.客戶基本資料表");

            //20210902密
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
            string connectionString = sqlsb.ConnectionString;

            foreach (DataRow DR in dt.Rows)
            {
                //更新部門/帳號資訊
                DTUPFDEP = SEARCHUOFDEP(DR["MA016"].ToString());
                account = DTUPFDEP.Rows[0]["ACCOUNT"].ToString();
                groupId = DTUPFDEP.Rows[0]["GROUP_ID"].ToString();
                jobTitleId = DTUPFDEP.Rows[0]["TITLE_ID"].ToString();
                fillerName = DTUPFDEP.Rows[0]["NAME"].ToString();
                fillerUserGuid = DTUPFDEP.Rows[0]["USER_GUID"].ToString();

                EXTERNAL_FORM_NBR = DR["MA001"].ToString();

                XmlDocument xmlDoc = new XmlDocument();
                XmlElement Form = xmlDoc.CreateElement("Form");
                if (!string.IsNullOrEmpty(VERSION_ID))
                    Form.SetAttribute("formVersionId", VERSION_ID);
                Form.SetAttribute("urgentLevel", "2");
                xmlDoc.AppendChild(Form);

                XmlElement Applicant = xmlDoc.CreateElement("Applicant");
                Applicant.SetAttribute("account", account);
                Applicant.SetAttribute("groupId", groupId);
                Applicant.SetAttribute("jobTitleId", jobTitleId);
                Form.AppendChild(Applicant);

                XmlElement Comment = xmlDoc.CreateElement("Comment");
                Comment.InnerText = "申請者意見";
                Applicant.AppendChild(Comment);

                XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
                Form.AppendChild(FormFieldValue);

                //使用 AddFieldItem 建立欄位
                AddFieldItem(xmlDoc, FormFieldValue, "sd001", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "MA001", DR["MA001"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd002", DR["sd002"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd003", DR["sd003"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd004", DR["sd004"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd005", DR["sd005"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd006", DR["sd006"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd007", DR["sd007"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd008", DR["sd008"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd009", DR["sd009"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd010", DR["sd010"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd011", DR["sd011"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd012", DR["sd012"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd013", DR["sd013"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd014", DR["sd014"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd015", DR["sd015"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd016", DR["sd016"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd017", DR["sd017"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd018", DR["sd018"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd019", DR["sd019"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd020", DR["sd020"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd021", DR["sd021"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd022", DR["sd022"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd023", DR["sd023"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd024", DR["sd024"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd025", DR["sd025"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd026", DR["sd026"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd027", DR["sd027"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd028", DR["sd028"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd029", DR["sd029"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd030", DR["sd030"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd90", DR["sd90"].ToString(), fillerName, fillerUserGuid, account);

                AddFieldItem(xmlDoc, FormFieldValue, "sd031", DR["sd031"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd032", DR["sd032"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd033", DR["sd033"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd034", DR["sd034"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd035", DR["sd035"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd036", DR["sd036"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd037", DR["sd037"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd038", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd039", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd040", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd041", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd042", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd043", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd044", "", fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd0", DR["sd0"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd051", DR["sd051"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd057", DR["sd057"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd058", DR["sd058"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd060", DR["sd060"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd061", DR["sd061"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd062", DR["sd062"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd063", DR["sd063"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd064", DR["sd064"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd065", DR["sd065"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd066", DR["sd066"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd067", DR["sd067"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd068", DR["sd068"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd069", DR["sd069"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd070", DR["sd070"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd071", DR["sd071"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd072", DR["sd072"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd073", DR["sd073"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd074", DR["sd074"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd075", DR["sd075"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd076", DR["sd076"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd077", DR["sd077"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd078", DR["sd078"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd079", DR["sd079"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd080", DR["sd080"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd081", DR["sd081"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd082", DR["sd082"].ToString(), fillerName, fillerUserGuid, account);
                AddFieldItem(xmlDoc, FormFieldValue, "sd083", DR["sd083"].ToString(), fillerName, fillerUserGuid, account);


                StringBuilder queryString = new StringBuilder();
                queryString.AppendFormat(@"
                                        INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                        (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(),@XML,2,'{0}')
                                         ", EXTERNAL_FORM_NBR);

                try
                {
                    using (SqlConnection connection = new SqlConnection(connectionString))
                    using (SqlCommand command = new SqlCommand(queryString.ToString(), connection))
                    {
                        command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                        connection.Open();
                        command.ExecuteNonQuery();
                    }
                }
                catch (Exception EX)
                {
                    //可以加 logging
                }
            }
        }


        public void NEWPURTEPURTF_ERP()
        {
            try
            {
                // 查詢請購變更單已核，但未產生採購變更單的明細
                DataTable dtTasks = FIND_View_TB_WKF_TASK_PURTACHANGE();

                if (dtTasks != null && dtTasks.Rows.Count > 0)
                {
                    foreach (DataRow drTask in dtTasks.Rows)
                    {
                        string TA001 = drTask["TA001"].ToString().Trim();
                        string TA002 = drTask["TA002"].ToString().Trim();
                        string VERSIONS = drTask["VERSIONS"].ToString().Trim();

                        // 檢查該請購變更單對應的採購變更單，是否仍有未核準
                        DataTable dtCheck = CHECKPURTEPURTF(TA001, TA002, VERSIONS);

                        if (dtCheck == null || dtCheck.Rows.Count == 0)
                        {
                            // 找出請購變更單對應的採購單 (1 對多)
                            DataTable dtPurtd = SEARCHPURTCPURTD(TA001, TA002, VERSIONS);

                            if (dtPurtd != null && dtPurtd.Rows.Count > 0)
                            {
                                // 針對採購單找出對應的最大版次
                                DataTable dtPurte = FINDPURTE(dtPurtd);

                                // 新增採購變更單
                                if (dtPurte != null && dtPurte.Rows.Count > 0)
                                {
                                    ADDTOPURTEPURTF(dtPurte);
                                }
                            }
                        }
                        else
                        {
                            // 有未核準的採購變更單 → 整理提示訊息
                            StringBuilder msg = new StringBuilder();

                            foreach (DataRow dr in dtCheck.Rows)
                            {
                                msg.AppendFormat(
                                    "採購變更單: {0} {1} 變更版次: {2} 沒有核準\n",
                                    dr["TE001"].ToString(),
                                    dr["TE002"].ToString(),
                                    dr["TE003"].ToString()
                                );
                            }

                            // 依需求決定是否彈窗或寫 Log
                            // MessageBox.Show(msg.ToString());
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議補上 Log
                // MessageBox.Show("處理 NEWPURTEPURTF_ERP 發生錯誤：" + ex.Message);
            }
        }


        public DataTable FIND_View_TB_WKF_TASK_PURTACHANGE()
        {
            DataTable dt = new DataTable();

            try
            {
                // 建立加解密物件
                Class1 TKID = new Class1();

                // 取得並解密連線字串
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString
                );
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    // 組 SQL
                    sbSql.Clear();
                    sbSql.AppendFormat(@"
                                        SELECT 
                                            V.[TA001],
                                            V.[TA002],
                                            V.[VERSIONS]
                                        FROM [UOF].[dbo].[View_TB_WKF_TASK_PURTACHANGE] V
                                        JOIN [192.168.1.105].[TKPUR].[dbo].[PURTATBCHAGE] P
                                            ON V.TA001 = P.TA001 COLLATE Chinese_Taiwan_Stroke_BIN
                                           AND V.TA002 = P.TA002 COLLATE Chinese_Taiwan_Stroke_BIN
                                           AND V.VERSIONS = P.VERSIONS
                                        WHERE 1=1
                                          AND ISNULL(V.TA002,'') <> ''
                                          AND V.VERSIONS + V.TA001 + V.TA002 COLLATE Chinese_Taiwan_Stroke_BIN NOT IN
                                          (
                                              SELECT SUBSTRING(UDF01,1,LEN(UDF01)-4) 
                                              FROM [192.168.1.105].[TK].dbo.PURTF 
                                              WHERE ISNULL(UDF01,'') <> ''
                                              GROUP BY SUBSTRING(UDF01,1,LEN(UDF01)-4)
                                          )
                                          AND V.TA002 >= '20240823009'
                                          AND V.TA002 >= CONVERT(NVARCHAR, YEAR(GETDATE())) 
                                                        + CONVERT(NVARCHAR, RIGHT('00' + CAST(MONTH(GETDATE()) AS VARCHAR(2)), 2)) 
                                                        + '01001'
                                        GROUP BY V.TA001, V.TA002, V.VERSIONS
                                        ORDER BY V.TA002
                                    ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    using (SqlCommandBuilder builder = new SqlCommandBuilder(adapter))
                    {
                        DataSet ds = new DataSet();
                        sqlConn.Open();
                        adapter.Fill(ds, "TEMPds1");

                        if (ds.Tables["TEMPds1"].Rows.Count > 0)
                            return ds.Tables["TEMPds1"];
                        else
                            return null;
                    }
                }
            }
            catch
            {
                return null;
            }
        }


        public DataTable CHECKPURTEPURTF(string TA001, string TA002, string VERSIONS)
        {
            DataSet ds = new DataSet();

            try
            {
                // 建立連線字串（含解密）
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
       

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSql.Append(@"
                                    SELECT TE001, TE002, TE003
                                    FROM [TK].dbo.PURTE
                                    WHERE TE017 = 'N'
                                      AND TE001 + TE002 IN 
                                    (
                                        SELECT TD001 + TD002
                                        FROM [TK].dbo.PURTD
                                        WHERE TD026 + TD027 + TD028 IN 
                                        (
                                            SELECT TA001 + TA002 + TB003
                                            FROM [TKPUR].[dbo].[PURTATBCHAGE]
                                            WHERE TA001 = @TA001 
                                              AND TA002 = @TA002 
                                              AND VERSIONS = @VERSIONS
                                        )
                                        GROUP BY TD001, TD002
                                    )
                                ");

                    using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn))
                    {
                        cmd.Parameters.AddWithValue("@TA001", TA001);
                        cmd.Parameters.AddWithValue("@TA002", TA002);
                        cmd.Parameters.AddWithValue("@VERSIONS", VERSIONS);

                        using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                        {
                            ds.Clear();
                            adapter.Fill(ds, "TEMPds1");
                        }
                    }
                }

                if (ds.Tables["TEMPds1"].Rows.Count > 0)
                {
                    return ds.Tables["TEMPds1"];
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                // 建議加 log 紀錄 ex.Message
                return null;
            }
        }

        public DataTable SEARCHPURTCPURTD(string TA001, string TA002, string VERSIONS)
        {
            SqlDataAdapter adapter = null;
            SqlCommandBuilder sqlCmdBuilder = null;
            DataSet ds = new DataSet();

            try
            {
                //20210902密
                Class1 TKID = new Class1(); //用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sbSql.Clear();
                    sbSqlQuery.Clear();

                    sbSql.AppendFormat(@"
                                        SELECT 
                                            TD001,
                                            TD002,
                                            '{0}' AS TA001,
                                            '{1}' AS TA002,
                                            '{2}' AS VERSIONS
                                        FROM [TK].dbo.PURTD
                                        WHERE TD026+TD027+TD028 IN 
                                        (
                                            SELECT TA001+TA002+TB003
                                            FROM [TKPUR].[dbo].[PURTATBCHAGE]
                                            WHERE TA001='{0}' AND TA002='{1}' AND VERSIONS='{2}'
                                        )
                                        GROUP BY TD001,TD002
                                    ", TA001, TA002, VERSIONS);

                    adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                    sqlCmdBuilder = new SqlCommandBuilder(adapter);

                    sqlConn.Open();
                    ds.Clear();
                    adapter.Fill(ds, "TEMPds1");
                }

                if (ds.Tables["TEMPds1"].Rows.Count > 0)
                {
                    return ds.Tables["TEMPds1"];
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
        }


        public DataTable FINDPURTE(DataTable DTTEMP)
        {
            DataTable DT = new DataTable();
            DT.Columns.Add("TE001");
            DT.Columns.Add("TE002");
            DT.Columns.Add("TE003");
            DT.Columns.Add("TA001");
            DT.Columns.Add("TA002");
            DT.Columns.Add("VERSIONS");

            if (DTTEMP == null || DTTEMP.Rows.Count == 0)
            {
                return null;
            }

            try
            {
                // 先解密連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    foreach (DataRow DR in DTTEMP.Rows)
                    {
                        string TE001 = DR["TD001"].ToString();
                        string TE002 = DR["TD002"].ToString();
                        string TA001 = DR["TA001"].ToString();
                        string TA002 = DR["TA002"].ToString();
                        string VERSIONS = DR["VERSIONS"].ToString();

                        string sql = string.Format(@"
                                                    SELECT TOP 1 TE003
                                                    FROM [TK].dbo.PURTE
                                                    WHERE TE001='{0}' AND TE002='{1}'
                                                    ORDER BY TE001 DESC,TE002 DESC,TE003 DESC
                                                ", TE001, TE002);

                        string lastTE003 = null;
                        using (SqlCommand cmd = new SqlCommand(sql, sqlConn))
                        {
                            object result = cmd.ExecuteScalar();
                            if (result != null)
                            {
                                lastTE003 = result.ToString();
                            }
                        }

                        // 新的 TE003
                        string newTE003;
                        if (!string.IsNullOrEmpty(lastTE003))
                        {
                            int serno = Convert.ToInt32(lastTE003) + 1;
                            newTE003 = serno.ToString("D4"); // 自動補 4 位數
                        }
                        else
                        {
                            newTE003 = "0001";
                        }

                        // 加入新行
                        DataRow NEWDR = DT.NewRow();
                        NEWDR["TE001"] = TE001;
                        NEWDR["TE002"] = TE002;
                        NEWDR["TE003"] = newTE003;
                        NEWDR["TA001"] = TA001;
                        NEWDR["TA002"] = TA002;
                        NEWDR["VERSIONS"] = VERSIONS;
                        DT.Rows.Add(NEWDR);
                    }
                }

                return DT;
            }
            catch
            {
                return null;
            }
        }



        public void ADDTOPURTEPURTF(DataTable NEWPURTEPURTF)
        {
            if (NEWPURTEPURTF == null || NEWPURTEPURTF.Rows.Count == 0)
            {
                return;
            }

            try
            {
                // 20210902密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        StringBuilder sbSql = new StringBuilder();

                        foreach (DataRow DR in NEWPURTEPURTF.Rows)
                        {
                            sbSql.AppendFormat(@"
                                            -- 新增 PURTF
                                            INSERT INTO [TK].[dbo].[PURTF] (
                                                [COMPANY],[CREATOR],[USR_GROUP],[CREATE_DATE],[MODIFIER],[MODI_DATE],[FLAG],[CREATE_TIME],
                                                [MODI_TIME],[TRANS_TYPE],[TRANS_NAME],[sync_date],[sync_time],[sync_mark],[sync_count],
                                                [DataUser],[DataGroup],[TF001],[TF002],[TF003],[TF004],[TF005],[TF006],[TF007],[TF008],[TF009],
                                                [TF010],[TF011],[TF012],[TF013],[TF014],[TF015],[TF016],[TF017],[TF018],[TF019],[TF020],
                                                [TF021],[TF022],[TF023],[TF024],[TF025],[TF026],[TF027],[TF028],[TF029],[TF030],[TF031],
                                                [TF032],[TF033],[TF034],[TF035],[TF036],[TF037],[TF038],[TF039],[TF040],[TF041],[TF104],
                                                [TF105],[TF106],[TF107],[TF108],[TF109],[TF110],[TF111],[TF112],[TF113],[TF114],[TF118],
                                                [TF119],[TF120],[TF121],[TF122],[TF123],[TF124],[TF125],[TF126],[TF127],[TF128],[TF129],
                                                [TF130],[TF131],[TF132],[TF133],[TF134],[TF135],[TF136],[TF137],[TF138],[TF139],[TF140],
                                                [TF141],[TF142],[TF143],[TF144],[TF145],[TF146],[TF147],[TF148],[TF149],[TF150],[TF151],
                                                [TF152],[TF153],[TF154],[TF155],[TF156],[TF157],[TF158],[TF159],[TF160],[TF161],[TF162],
                                                [TF163],[TF164],[TF165],[TF166],[TF167],[TF168],[TF169],[TF170],[TF171],[TF172],[TF173],
                                                [UDF01],[UDF02],[UDF03],[UDF04],[UDF05],[UDF06],[UDF07],[UDF08],[UDF09],[UDF10]
                                            )
                                            SELECT 
                                                PURTD.[COMPANY],PURTD.[CREATOR],PURTD.[USR_GROUP],PURTD.[CREATE_DATE],PURTD.[MODIFIER],
                                                PURTD.[MODI_DATE],PURTD.[FLAG],PURTD.[CREATE_TIME],PURTD.[MODI_TIME],PURTD.[TRANS_TYPE],
                                                'PURI08' AS [TRANS_NAME],PURTD.[sync_date],PURTD.[sync_time],PURTD.[sync_mark],
                                                PURTD.[sync_count],PURTD.[DataUser],PURTD.[DataGroup],
                                                TD001,TD002,'{3}',TD003,[PURTATBCHAGE].TB004,[PURTATBCHAGE].TB005,[PURTATBCHAGE].TB006,
                                                TD007,[PURTATBCHAGE].TB009,TD009,TD010,[PURTATBCHAGE].TB009*TD010,[PURTATBCHAGE].TB011,
                                                'N',TD015,'N',[PURTATBCHAGE].TB012,TD019,TD020,TD022,TD025,TD017,TD029,TD030,TD032,TD033,
                                                TD036,TD037,TD038,TD014,'' ,'' ,'' ,'' ,0 ,0 ,'' ,'' ,'' ,0 ,
                                                TD003,TD004,TD005,TD006,TD007,TD008,TD009,TD010,TD011,TD012,TD016,TD019,TD020,TD022,TD025,
                                                TD017,TD029,TD030,TD031,TD032,TD033,TD034,TD035,TD034,TD035,TD036,TD037,TD038,TD014,0 ,0 ,
                                                '' ,'' ,'' ,0 ,'' ,'' ,'' ,'2','2','' ,'' ,'' ,'' ,'' ,TD080,TD081,TD082,TD083,TD080,TD081,
                                                TD082,TD083,TD084,TD085,TD084,TD085,0 ,0 ,0 ,0 ,'' ,'' ,'' ,'' ,'' ,'' ,
                                                CONVERT(NVARCHAR,[PURTATBCHAGE].VERSIONS)+CONVERT(NVARCHAR,[PURTATBCHAGE].TA001)+CONVERT(NVARCHAR,[PURTATBCHAGE].TA002)+CONVERT(NVARCHAR,[PURTATBCHAGE].TB003),
                                                '' ,'' ,'' ,0 ,0 ,0 ,0 ,0
                                            FROM [TK].dbo.PURTD,[TKPUR].[dbo].[PURTATBCHAGE]
                                            WHERE PURTD.TD026=[PURTATBCHAGE].TA001 
                                              AND PURTD.TD027=[PURTATBCHAGE].TA002 
                                              AND PURTD.TD028=[PURTATBCHAGE].TB003
                                              AND TD001='{4}' AND TD002='{5}'
                                              AND [PURTATBCHAGE].TA001='{0}' 
                                              AND [PURTATBCHAGE].TA002='{1}' 
                                              AND [PURTATBCHAGE].VERSIONS='{2}';

                                            -- 新增 PURTE
                                            INSERT INTO [TK].[dbo].[PURTE] (
                                                [COMPANY],[CREATOR],[USR_GROUP],[CREATE_DATE],[MODIFIER],[MODI_DATE],[FLAG],[CREATE_TIME],
                                                [MODI_TIME],[TRANS_TYPE],[TRANS_NAME],[sync_date],[sync_time],[sync_mark],[sync_count],
                                                [DataUser],[DataGroup],[TE001],[TE002],[TE003],[TE004],[TE005],[TE006],[TE007],[TE008],
                                                [TE009],[TE010],[TE011],[TE012],[TE013],[TE014],[TE015],[TE016],[TE017],[TE018],[TE019],
                                                [TE020],[TE021],[TE022],[TE023],[TE024],[TE025],[TE026],[TE027],[TE028],[TE029],[TE030],
                                                [TE031],[TE032],[TE033],[TE034],[TE035],[TE036],[TE037],[TE038],[TE039],[TE040],[TE041],
                                                [TE042],[TE043],[TE045],[TE046],[TE047],[TE048],[TE103],[TE107],[TE108],[TE109],[TE110],
                                                [TE113],[TE114],[TE115],[TE118],[TE119],[TE120],[TE121],[TE122],[TE123],[TE124],[TE125],
                                                [TE134],[TE135],[TE136],[TE137],[TE138],[TE139],[TE140],[TE141],[TE142],[TE143],[TE144],
                                                [TE145],[TE146],[TE147],[TE148],[TE149],[TE150],[TE151],[TE152],[TE153],[TE154],[TE155],
                                                [TE156],[TE157],[TE158],[TE159],[TE160],[TE161],[TE162],[UDF01],[UDF02],[UDF03],[UDF04],
                                                [UDF05],[UDF06],[UDF07],[UDF08],[UDF09],[UDF10]
                                            )
                                            SELECT 
                                                PURTC.[COMPANY],PURTC.[CREATOR],PURTC.[USR_GROUP],PURTC.[CREATE_DATE],PURTC.[MODIFIER],
                                                PURTC.[MODI_DATE],PURTC.[FLAG],PURTC.[CREATE_TIME],PURTC.[MODI_TIME],PURTC.[TRANS_TYPE],
                                                'PURI08',PURTC.[sync_date],PURTC.[sync_time],PURTC.[sync_mark],PURTC.[sync_count],
                                                PURTC.[DataUser],PURTC.[DataGroup],
                                                TC001,TC002,'{3}',CONVERT(NVARCHAR,GETDATE(),112),TC004,'' ,TC005,TC006,TC007,TC008,
                                                CONVERT(NVARCHAR,GETDATE(),112),'N',TC015,TC016,TC017,0 ,'N',TC018,TC021,TC022,'' ,
                                                TC026,TC027,TC028,'N',0 ,TC009,'N',TC035,'' ,'' ,'N','' ,0 ,0 ,'' ,TC011,'' ,'' ,'' ,
                                                TC050,'' ,TC036,TC037,TC038,TC039,TC040,'' ,TC005,TC006,TC007,TC008,TC015,TC016,TC017,
                                                TC018,TC021,TC022,TC026,TC027,TC028,TC009,TC035,0 ,0 ,'' ,'' ,'' ,'' ,'1','N','N',
                                                TC036,'N','' ,TC041,TC041,TC011,0 ,0 ,0 ,0 ,'' ,'' ,'' ,'' ,'' ,'' ,TC037,TC038,TC039,
                                                TC040,'' ,'' ,'' ,'' ,0 ,0 ,0 ,0 ,0
                                            FROM [TK].dbo.PURTC
                                            WHERE TC001='{4}' AND TC002='{5}';
                                        ",
                                                DR["TA001"], DR["TA002"], DR["VERSIONS"], DR["TE003"], DR["TE001"], DR["TE002"]);
                                            }

                        cmd.CommandText = sbSql.ToString();

                        int result = cmd.ExecuteNonQuery();
                        if (result > 0)
                        {
                            tran.Commit();
                        }
                        else
                        {
                            tran.Rollback();
                        }
                    }
                }
            }
            catch
            {
                // 建議這裡要加 log
            }
        }


        public void NEW_POSET()
        {
            try
            {
                // 找出POS的活動簽核單，已簽核但沒有記錄在TK_Z_POSSET中
                DataTable dtFindPosets = FIND_POSETS();
                if (dtFindPosets != null && dtFindPosets.Rows.Count > 0)
                {
                    ADD_TK_Z_POSSET(dtFindPosets);
                }

                // 針對TK_Z_POSSET的活動做POS機的LOG發送
                DataTable dtPosset = FIND_TK_Z_POSSET();
                if (dtPosset != null && dtPosset.Rows.Count > 0)
                {
                    INSERT_UPDATE_LOG_POSM(dtPosset);
                }

                // 更新TK_Z_POSSET的 [ISUPDATE]
                UPDATE_Z_POSSET();
            }
            catch (Exception ex)
            {
                // 建議至少Log錯誤，避免吞例外
                // 例如：寫log或丟出上層
                throw new ApplicationException("NEW_POSET 發生錯誤", ex);
            }
        }


        public DataTable FIND_POSETS()
        {
            DataTable DT = new DataTable();
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();
                sbSql.AppendFormat(@"
                                    SELECT *
                                    FROM 
                                    (
                                        SELECT 
                                            DOC_NBR
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD001""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD001
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD002""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD002
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD003""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD003
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD004""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD004
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD005""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD005
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD006""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD006
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD007""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD007
                                            ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD008""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD008
                                            ,CURRENT_DOC.value('(Form/Applicant/@account)[1]', 'nvarchar(max)') AS account
                                            ,TB_WKF_FORM.FORM_NAME
                                        FROM [UOF].dbo.TB_WKF_TASK
                                        JOIN [UOF].dbo.TB_WKF_FORM_VERSION ON TB_WKF_TASK.FORM_VERSION_ID = TB_WKF_FORM_VERSION.FORM_VERSION_ID
                                        JOIN [UOF].dbo.TB_WKF_FORM ON TB_WKF_FORM.FORM_ID = TB_WKF_FORM_VERSION.FORM_ID
                                        WHERE 1=1
                                        AND TB_WKF_FORM.FORM_NAME IN ('POS,商品活動設定')
                                        AND TB_WKF_TASK.TASK_STATUS = '2' 
                                        AND TB_WKF_TASK.TASK_RESULT = '0'
                                    ) AS TEMP
                                    WHERE 1=1
                                    AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN 
                                        NOT IN (
                                            SELECT DOC_NBR 
                                            FROM [192.168.1.105].[TK].[dbo].[Z_POSSET] 
                                            WHERE ISNULL(DOC_NBR, '') <> ''
                                        )
                                 ");              

                adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
            }
            catch
            {
                return null;
            }
            finally
            {
                if (sqlConn.State == ConnectionState.Open)
                {
                    sqlConn.Close();
                }
            }

            if (ds1.Tables["ds1"].Rows.Count >= 1)
            {
                return ds1.Tables["ds1"];
            }
            else
            {
                return null;
            }
        }


        public void ADD_TK_Z_POSSET(DataTable dt)
        {
            if (dt == null || dt.Rows.Count == 0) return;

            try
            {
                // 連線字串解密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = sqlConn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;

                        try
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                cmd.CommandText = @"
                                                    INSERT INTO [TK].[dbo].[Z_POSSET]
                                                        ([DOC_NBR],[KINDS],[ID],[ADMINID])
                                                    VALUES
                                                        (@DOC_NBR,@KINDS,@ID,@ADMINID)";

                                cmd.Parameters.Clear();
                                cmd.Parameters.AddWithValue("@DOC_NBR", dr["DOC_NBR"].ToString());
                                cmd.Parameters.AddWithValue("@KINDS", dr["FIELD007"].ToString());
                                cmd.Parameters.AddWithValue("@ID", dr["FIELD002"].ToString());
                                cmd.Parameters.AddWithValue("@ADMINID", dr["account"].ToString());

                                cmd.ExecuteNonQuery();
                            }

                            tran.Commit();
                        }
                        catch (Exception ex)
                        {
                            tran.Rollback();
                            throw new ApplicationException("ADD_TK_Z_POSSET 失敗", ex);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 這邊可以改成寫 log，而不是直接吞掉
                throw;
            }
        }

        public void INSERT_UPDATE_LOG_POSM(DataTable DT)
        {
            if (DT == null || DT.Rows.Count == 0)
                return;

            StringBuilder SQL = new StringBuilder();
            foreach (DataRow DR in DT.Rows)
            {
                SQL.AppendFormat(@"
                                --POSMB
                                        UPDATE [TK].dbo.POSMB
                                        SET MB008='Y',MB007=ADMINID,MB006=MB005
                                        FROM [TK].[dbo].[Z_POSSET]
                                        WHERE [Z_POSSET].ID=MB003
                                        AND MB003='{0}'


                                        --POSMC
                                        UPDATE [TK].dbo.POSMC
                                        SET MC011='Y'
                                        WHERE MC003='{0}'

                                        --POSMI
                                        UPDATE [TK].dbo.POSMI
                                        SET MI015='Y',MI016=ADMINID,MI014=MI007
                                        FROM [TK].[dbo].[Z_POSSET]
                                        WHERE [Z_POSSET].ID=MI003
                                        AND MI003='{0}'

                                        --POSMJ
                                        UPDATE [TK].dbo.POSMJ
                                        SET MJ006='Y'
                                        WHERE MJ003='{0}'

                                        --POSMM
                                        UPDATE [TK].dbo.POSMM
                                        SET MM015='Y',MM017=ADMINID,MM014=MM007
                                        FROM [TK].[dbo].[Z_POSSET]
                                        WHERE [Z_POSSET].ID=MM003
                                        AND MM003='{0}'

                                        --POSMN
                                        UPDATE [TK].dbo.POSMN
                                        SET MN010='Y'
                                        WHERE MN003='{0}'

                                        --POSMO
                                        UPDATE [TK].dbo.POSMO
                                        SET MO008='Y',MO007=ADMINID,MO006=MO005
                                        FROM [TK].[dbo].[Z_POSSET]
                                        WHERE [Z_POSSET].ID=MO003
                                        AND MO003='{0}'

                                        --POSMP
                                        UPDATE [TK].dbo.POSMP
                                        SET MP008='Y'
                                        WHERE MP003='{0}'

                                        --LOG_POSMB                                 

                                        DELETE [TK].dbo.LOG_POSMB
                                        WHERE MB003='{0}'

                                        INSERT INTO [TK].dbo.LOG_POSMB
                                        (TRS_CODE,TRS_DATE,TRS_TIME,store_ip,sync_date,sync_time,sync_mark,sync_count,MB001,MB002,MB003)
                                        SELECT
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,POSMB.MB001 MB001
                                        ,POSMB.MB002 MB002
                                        ,POSMB.MB003 MB003
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMB
                                        WHERE PI025<>'2'  
                                        AND MB003='{0}' 
                                        GROUP BY PI010,POSMB.MB001,POSMB.MB002,POSMB.MB003
                                        ORDER BY PI010

                                        --LOG_POSMC
                                        DELETE  [TK].dbo.LOG_POSMC
                                        WHERE MC003='{0}'

                                        INSERT INTO [TK].dbo.LOG_POSMC
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MC001
                                        ,MC002
                                        ,MC003
                                        ,MC019
                                        ,MC004
                                        )
                                        SELECT
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MC001
                                        ,MC002
                                        ,MC003
                                        ,MC019
                                        ,MC004
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMC
                                        WHERE PI025<>'2'  
                                        AND MC003='{0}' 
                                        GROUP BY PI010,MC001,MC002,MC003,MC019,MC004
                                        ORDER BY PI010

                                        --LOG_POSMD
                                        DELETE  [TK].dbo.LOG_POSMD
                                        WHERE MD003='{0}'

                                        INSERT INTO [TK].dbo.LOG_POSMD
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MD001
                                        ,MD002
                                        ,MD003
                                        ,MD021
                                        ,MD004
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MD001
                                        ,MD002
                                        ,MD003
                                        ,MD021
                                        ,MD004
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMD
                                        WHERE PI025<>'2'  
                                        AND MD003='{0}' 
                                        GROUP BY PI010,MD001,MD002,MD003,MD021,MD004
                                        ORDER BY PI010

                                        --LOG_POSME
                                        DELETE  [TK].dbo.LOG_POSME
                                        WHERE ME003='{0}'

                                        INSERT INTO  [TK].dbo.LOG_POSME
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,ME001
                                        ,ME002
                                        ,ME003
                                        ,ME004
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,ME001
                                        ,ME002
                                        ,ME003
                                        ,ME004
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSME
                                        WHERE PI025<>'2'  
                                        AND ME003='{0}' 
                                        GROUP BY PI010,ME001,ME002,ME003,ME004
                                        ORDER BY PI010

                                        ---LOG_POSMF
                                        DELETE [TK].dbo.LOG_POSMF
                                        WHERE MF003='{0}'

                                        INSERT INTO  [TK].dbo.LOG_POSMF
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MF001
                                        ,MF002
                                        ,MF003
                                        ,MF004
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MF001
                                        ,MF002
                                        ,MF003
                                        ,MF004
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMF
                                        WHERE PI025<>'2'  
                                        AND MF003='{0}' 
                                        GROUP BY PI010,MF001,MF002,MF003,MF004
                                        ORDER BY PI010

                                        --LOG_POSMG
                                        DELETE [TK].dbo.LOG_POSMG
                                        WHERE MG003='{0}'

                                        INSERT INTO [TK].dbo.LOG_POSMG
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MG001
                                        ,MG002
                                        ,MG003
                                        ,MG017
                                        ,MG004
                                        ,MG005
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MG001
                                        ,MG002
                                        ,MG003
                                        ,MG017
                                        ,MG004
                                        ,MG005
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMG
                                        WHERE PI025<>'2'  
                                        AND MG003='{0}' 
                                        GROUP BY PI010,MG001,MG002,MG003,MG017,MG004,MG005
                                        ORDER BY PI010

                                        --LOG_POSMH
                                        DELETE  [TK].dbo.LOG_POSMH
                                        WHERE MH003='{0}'

                                        INSERT INTO [TK].dbo.LOG_POSMH
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MH001
                                        ,MH002
                                        ,MH003
                                        ,MH004
                                        ,MH005
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MH001
                                        ,MH002
                                        ,MH003
                                        ,MH004
                                        ,MH005
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMH
                                        WHERE PI025<>'2'  
                                        AND MH003='{0}' 
                                        GROUP BY PI010,MH001,MH002,MH003,MH004,MH005
                                        ORDER BY PI010

                                        --LOG_POSMI
                                        DELETE [TK].dbo.LOG_POSMI
                                        WHERE MI003='{0}'

                                        INSERT INTO [TK].dbo.LOG_POSMI
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MI001
                                        ,MI002
                                        ,MI003
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MI001
                                        ,MI002
                                        ,MI003
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMI
                                        WHERE PI025<>'2'  
                                        AND MI003='{0}' 
                                        GROUP BY PI010,MI001,MI002,MI003
                                        ORDER BY PI010

                                        --LOG_POSMJ
                                        DELETE  [TK].dbo.LOG_POSMJ
                                        WHERE MJ003='{0}'

                                        INSERT INTO [TK].dbo.LOG_POSMJ
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MJ001
                                        ,MJ002
                                        ,MJ003
                                        ,MJ015
                                        ,MJ004
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MJ001
                                        ,MJ002
                                        ,MJ003
                                        ,MJ015
                                        ,MJ004
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMJ
                                        WHERE PI025<>'2'  
                                        AND MJ003='{0}' 
                                        GROUP BY PI010,MJ001,MJ002,MJ003,MJ015,MJ004
                                        ORDER BY PI010


                                        --LOG_POSMK
                                        DELETE [TK].dbo.LOG_POSMK
                                        WHERE MK003='{0}'

                                        INSERT INTO [TK].dbo.LOG_POSMK
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MK001
                                        ,MK002
                                        ,MK003
                                        ,MK017
                                        ,MK004
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MK001
                                        ,MK002
                                        ,MK003
                                        ,MK017
                                        ,MK004
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMK
                                        WHERE PI025<>'2'  
                                        AND MK003='{0}' 
                                        GROUP BY PI010,MK001,MK002,MK003,MK017,MK004
                                        ORDER BY PI010



                                        --LOG_POSML
                                        DELETE [TK].dbo.LOG_POSML
                                        WHERE ML003='{0}'

                                        INSERT INTO  [TK].dbo.LOG_POSML
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,ML001
                                        ,ML002
                                        ,ML003
                                        ,ML004
                                        )
                                        SELECT
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,ML001
                                        ,ML002
                                        ,ML003
                                        ,ML004
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSML
                                        WHERE PI025<>'2'  
                                        AND ML003='{0}' 
                                        GROUP BY PI010,ML001,ML002,ML003,ML004
                                        ORDER BY PI010


                                        --LOG_POSMM
                                        DELETE [TK].dbo.LOG_POSMM
                                        WHERE MM003='{0}'

                                        INSERT INTO [TK].dbo.LOG_POSMM
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MM001
                                        ,MM002
                                        ,MM003
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MM001
                                        ,MM002
                                        ,MM003
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMM
                                        WHERE PI025<>'2'  
                                        AND MM003='{0}' 
                                        GROUP BY PI010,MM001,MM002,MM003
                                        ORDER BY PI010

                                        --LOG_POSMN
                                        DELETE  [TK].dbo.LOG_POSMN
                                        WHERE MN003='{0}' 

                                        INSERT INTO  [TK].dbo.LOG_POSMN
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MN001
                                        ,MN002
                                        ,MN003
                                        ,MN004
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MN001
                                        ,MN002
                                        ,MN003
                                        ,MN004
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMN
                                        WHERE PI025<>'2'  
                                        AND MN003='{0}' 
                                        GROUP BY PI010,MN001,MN002,MN003,MN004
                                        ORDER BY PI010


                                        --LOG_POSMO
                                        DELETE  [TK].dbo.LOG_POSMO
                                        WHERE MO003='{0}'

                                        INSERT INTO [TK].dbo.LOG_POSMO
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MO001
                                        ,MO002
                                        ,MO003
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MO001
                                        ,MO002
                                        ,MO003
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMO
                                        WHERE PI025<>'2'  
                                        AND MO003='{0}' 
                                        GROUP BY PI010,MO001,MO002,MO003
                                        ORDER BY PI010


                                        --LOG_POSMP
                                        DELETE  [TK].dbo.LOG_POSMP
                                        WHERE MP003='{0}'

                                        INSERT INTO  [TK].dbo.LOG_POSMP
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,MP001
                                        ,MP002
                                        ,MP003
                                        ,MP004
                                        ,MP017
                                        ,MP005
                                        )
                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,MP001
                                        ,MP002
                                        ,MP003
                                        ,MP004
                                        ,MP017
                                        ,MP005
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSMP
                                        WHERE PI025<>'2'  
                                        AND MP003='{0}' 
                                        GROUP BY PI010,MP001,MP002,MP003,MP004,MP017,MP005
                                        ORDER BY PI010

                                        --LOG_POSRL
                                        DELETE [TK].dbo.LOG_POSRL
                                        WHERE RL003='{0}'

                                        INSERT INTO [TK].dbo.LOG_POSRL
                                        (
                                        TRS_CODE
                                        ,TRS_DATE
                                        ,TRS_TIME
                                        ,store_ip
                                        ,sync_date
                                        ,sync_time
                                        ,sync_mark
                                        ,sync_count
                                        ,RL001
                                        ,RL002
                                        ,RL003
                                        ,RL004
                                        )

                                        SELECT 
                                        '2' TRS_CODE
                                        ,CONVERT(char(08), GETDATE(), 112 )  TRS_DATE
                                        ,CONVERT(char(12), GETDATE(), 114 )  TRS_TIME
                                        ,PI010 store_ip
                                        ,'' sync_date
                                        ,'' sync_time
                                        ,'N'  sync_mark
                                        ,0  sync_count
                                        ,RL001
                                        ,RL002
                                        ,RL003
                                        ,RL004
                                        FROM [TK].dbo.POSPI, [TK].dbo.POSRL
                                        WHERE PI025<>'2'  
                                        AND RL003='{0}' 
                                        GROUP BY PI010,RL001,RL002,RL003,RL004
                                        ORDER BY PI010
                                ", DR["ID"].ToString());
            }

            try
            {
                // 20210902密
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = new SqlCommand(SQL.ToString(), sqlConn, tran))
                    {
                        cmd.CommandTimeout = 60;
                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                            tran.Rollback();
                        else
                            tran.Commit();
                    }
                }
            }
            catch (Exception ex)
            {
                // 可以改成寫 log
                throw new ApplicationException("INSERT_UPDATE_LOG_POSM 執行失敗", ex);
            }
        }



        public DataTable FIND_TK_Z_POSSET()
        {
            DataTable dt = new DataTable();

            try
            {
                // 20210902密
                Class1 TKID = new Class1(); // 用 new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );
                // 資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();

                    StringBuilder sbSql = new StringBuilder();
                    sbSql.Append(@"
                                SELECT
                                    [DOC_NBR],
                                    [KINDS],
                                    [ID],
                                    [ISUPDATE],
                                    [CREATEDATES]
                                FROM [TK].[dbo].[Z_POSSET]
                                WHERE ISUPDATE IN ('N')
                                ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        adapter.Fill(dt);
                    }
                }

                if (dt.Rows.Count > 0)
                    return dt;
                else
                    return null;
            }
            catch (Exception ex)
            {
                // 這裡可以改成寫 log
                throw new ApplicationException("FIND_TK_Z_POSSET 失敗", ex);
            }
        }


        public void UPDATE_Z_POSSET()
        {
            StringBuilder SQL = new StringBuilder();
            SQL.Append(@"
                            UPDATE [TK].[dbo].[Z_POSSET]
                            SET ISUPDATE='Y'
                            WHERE ISUPDATE IN ('N')
                        ");

            try
            {
                Class1 TKID = new Class1(); // 用 new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(
                    ConfigurationManager.ConnectionStrings["dberp"].ConnectionString
                );
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = new SqlCommand(SQL.ToString(), sqlConn, tran))
                    {
                        cmd.CommandTimeout = 60;
                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                            tran.Rollback();
                        else
                            tran.Commit();
                    }
                }
            }
            catch (Exception ex)
            {
                // 可改成寫 Log
                throw new ApplicationException("UPDATE_Z_POSSET 執行失敗", ex);
            }
        }

        //門市日誌-早班
        public void NEW_TBSTOREDAILY_MORNING()
        {
            DataTable DT = FIND_UOF_TBSTOREDAILY_MORNING();

            if (DT != null && DT.Rows.Count >= 1)
            {   
                foreach(DataRow DR in DT.Rows)
                {
                    string DOC_NBR = DR["DOC_NBR"].ToString();
                    string FIELD1 = DR["FIELD1"].ToString();
                    string FIELD2 = DR["FIELD2"].ToString();
                    string FIELD3 = DR["FIELD3"].ToString();
                    string FIELD4 = DR["FIELD4"].ToString();
                    string FIELD5 = DR["FIELD5"].ToString();
                    string FIELD6 = DR["FIELD6"].ToString();
                    string FIELD7 = DR["FIELD7"].ToString();
                    string FIELD8 = DR["FIELD8"].ToString();
                    string FIELD9 = DR["FIELD9"].ToString();
                    string FIELD10 = DR["FIELD10"].ToString();
                    string FIELD11 = DR["FIELD11"].ToString();
                    string FIELD12 = DR["FIELD12"].ToString();
                    string FIELD13 = DR["FIELD13"].ToString();
                    string FIELD14 = DR["FIELD14"].ToString();
                    string FIELD15 = DR["FIELD15"].ToString();
                    string FIELD16 = DR["FIELD16"].ToString();
                    string FIELD17 = DR["FIELD17"].ToString();
                    string FIELD18 = DR["FIELD18"].ToString();
                    string FIELD19 = DR["FIELD19"].ToString();
                    string FIELD20 = DR["FIELD20"].ToString();
                    string FIELD21 = DR["FIELD21"].ToString();

                    ADD_NEW_TO_TKMK_TBSTOREDAILY_MORNING(
                       DOC_NBR,
                       FIELD1,
                       FIELD2,
                       FIELD3,
                       FIELD4,
                       FIELD5,
                       FIELD6,
                       FIELD7,
                       FIELD8,
                       FIELD9,
                       FIELD10,
                       FIELD11,
                       FIELD12,
                       FIELD13,
                       FIELD14,
                       FIELD15,
                       FIELD16,
                       FIELD17,
                       FIELD18,
                       FIELD19,
                       FIELD20,
                       FIELD21
                        );
                }            
            }
        }
        
        public DataTable FIND_UOF_TBSTOREDAILY_MORNING()
        {
            DataTable DT = new DataTable();

            try
            {
                Class1 TKID = new Class1(); // 用 new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();
                    sbSql.Append(@"
                                    SELECT 
                                        FORM_NAME,
                                        DOC_NBR,
                                        -- XML 解析欄位
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""ID""]/@fieldValue)[1]', 'nvarchar(50)') AS DOC_NBR_EX,
                                        -- 取 @ 前部分
                                        LEFT(CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD1""]/@fieldValue)[1]', 'nvarchar(max)'), 
                                             CHARINDEX('@', CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD1""]/@fieldValue)[1]', 'nvarchar(max)') + '@') - 1
                                        ) AS FIELD1,
                                        LEFT(CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD6""]/@fieldValue)[1]', 'nvarchar(max)'), 
                                             CHARINDEX('@', CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD6""]/@fieldValue)[1]', 'nvarchar(max)') + '@') - 1
                                        ) AS FIELD6,
                                        LEFT(CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD7""]/@fieldValue)[1]', 'nvarchar(max)'), 
                                             CHARINDEX('@', CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD7""]/@fieldValue)[1]', 'nvarchar(max)') + '@') - 1
                                        ) AS FIELD7,
                                        -- 將 @ 換成 '、'
                                        REPLACE(CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD9""]/@fieldValue)[1]', 'nvarchar(max)'), '@', '、') AS FIELD9,
                                        REPLACE(CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD10""]/@fieldValue)[1]', 'nvarchar(max)'), '@', '、') AS FIELD10,
                                        REPLACE(CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD11""]/@fieldValue)[1]', 'nvarchar(max)'), '@', '、') AS FIELD11,
                                        REPLACE(CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD12""]/@fieldValue)[1]', 'nvarchar(max)'), '@', '、') AS FIELD12,
                                        REPLACE(CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD13""]/@fieldValue)[1]', 'nvarchar(max)'), '@', '、') AS FIELD13,
                                        -- 其他欄位直接取
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD2""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD2,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD3""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD3,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD4""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD4,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD5""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD5,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD8""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD8,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD14""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD14,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD15""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD15,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD16""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD16,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD17""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD17,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD18""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD18,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD19""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD19,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD20""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD20,
                                        CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""FIELD21""]/@fieldValue)[1]', 'nvarchar(max)') AS FIELD21
                                    FROM [UOF].dbo.TB_WKF_TASK
                                    INNER JOIN [UOF].dbo.TB_WKF_FORM_VERSION ON TB_WKF_TASK.FORM_VERSION_ID = TB_WKF_FORM_VERSION.FORM_VERSION_ID
                                    INNER JOIN [UOF].dbo.TB_WKF_FORM ON TB_WKF_FORM.FORM_ID = TB_WKF_FORM_VERSION.FORM_ID
                                    WHERE TB_WKF_FORM.FORM_NAME = '0901.門市營業日誌-早班'
                                      AND TB_WKF_TASK.TASK_RESULT = '0'
                                      AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN
                                          (SELECT [DOC_NBR] FROM [192.168.1.105].[TKMK].[dbo].[TBSTOREDAILY_MORNING])
                                ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        sqlConn.Open();
                        adapter.Fill(DT);
                    }
                }

                return DT.Rows.Count > 0 ? DT : null;
            }
            catch (Exception ex)
            {
                // 可改成 log 記錄 ex.Message
                return null;
            }
        }


       
        public string FIND_UOF_CURRENT_DOC(string DOC_NBR)
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    string sql = @"
                            SELECT DOC_NBR, CONVERT(nvarchar(MAX), CURRENT_DOC) AS CURRENT_DOC
                            FROM [UOF].[dbo].[TB_WKF_TASK]
                            WHERE DOC_NBR = @DocNbr";

                    using (SqlDataAdapter adapter1 = new SqlDataAdapter(sql, sqlConn))
                    {
                        adapter1.SelectCommand.Parameters.AddWithValue("@DocNbr", DOC_NBR);

                        DataSet ds1 = new DataSet();
                        sqlConn.Open();
                        adapter1.Fill(ds1, "ds1");
                        sqlConn.Close();

                        if (ds1.Tables["ds1"].Rows.Count > 0)
                        {
                            return ds1.Tables["ds1"].Rows[0]["CURRENT_DOC"].ToString();
                        }
                        else
                        {
                            return null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 建議捕捉例外時可以記錄 ex.Message 或拋出，方便偵錯
                return null;
            }
        }


        public void ADD_NEW_TO_TKMK_TBSTOREDAILY_MORNING(
          string DOC_NBR,
          string FIELD1,
          string FIELD2,
          string FIELD3,
          string FIELD4,
          string FIELD5,
          string FIELD6,
          string FIELD7,
          string FIELD8,
          string FIELD9,
          string FIELD10,
          string FIELD11,
          string FIELD12,
          string FIELD13,
          string FIELD14,
          string FIELD15,
          string FIELD16,
          string FIELD17,
          string FIELD18,
          string FIELD19,
          string FIELD20,
          string FIELD21)
        {
            string connString = BuildDecryptedConnection("dberp");

            using (SqlConnection sqlConn = new SqlConnection(connString))
            {
                sqlConn.Open();
                using (SqlTransaction tran = sqlConn.BeginTransaction())
                using (SqlCommand cmd = sqlConn.CreateCommand())
                {
                    cmd.Transaction = tran;
                    cmd.CommandTimeout = 60;
                    cmd.CommandText = @"
                                        INSERT INTO [TKMK].[dbo].[TBSTOREDAILY_MORNING] (
                                            [DOC_NBR],[FIELD1],[FIELD2],[FIELD3],[FIELD4],[FIELD5],[FIELD6],[FIELD7],[FIELD8],[FIELD9],
                                            [FIELD10],[FIELD11],[FIELD12],[FIELD13],[FIELD14],[FIELD15],[FIELD16],[FIELD17],[FIELD18],[FIELD19],[FIELD20],[FIELD21]
                                        ) VALUES (
                                            @DOC_NBR,@FIELD1,@FIELD2,@FIELD3,@FIELD4,@FIELD5,@FIELD6,@FIELD7,@FIELD8,@FIELD9,
                                            @FIELD10,@FIELD11,@FIELD12,@FIELD13,@FIELD14,@FIELD15,@FIELD16,@FIELD17,@FIELD18,@FIELD19,@FIELD20,@FIELD21
                                        );
                                    ";

                    cmd.Parameters.AddWithValue("@DOC_NBR", DOC_NBR ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD1", FIELD1 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD2", FIELD2 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD3", FIELD3 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD4", FIELD4 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD5", FIELD5 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD6", FIELD6 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD7", FIELD7 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD8", FIELD8 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD9", FIELD9 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD10", FIELD10 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD11", FIELD11 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD12", FIELD12 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD13", FIELD13 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD14", FIELD14 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD15", FIELD15 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD16", FIELD16 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD17", FIELD17 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD18", FIELD18 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD19", FIELD19 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD20", FIELD20 ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@FIELD21", FIELD21 ?? (object)DBNull.Value);

                    int result = cmd.ExecuteNonQuery();

                    if (result == 0)
                    {
                        tran.Rollback();
                        throw new Exception("新增失敗，無資料寫入");
                    }
                    else
                    {
                        tran.Commit();
                    }
                }
            }
        }

        public void ADD_TKPUR_PURVERSIONSNUMS()
        {
            StringBuilder SQL = new StringBuilder();
            SQL.Clear();

            SQL.AppendFormat(@"
                                INSERT INTO [TKPUR].[dbo].[PURVERSIONSNUMS]                            
                                (
                                    [NAMES],[BACKMONEYS],[ISCLOSE],[PAYKINDS],[CREATEDATES],[COMMENTS]
                                )
                                SELECT 
                                    TD005 AS NAMES,
                                    TD011 AS BACKMONEYS,
                                    'N' AS ISCLOSE,
                                    '預付版費' AS PAYKINDS,
                                    TD012 AS CREATEDATES,
                                    CONVERT(NVARCHAR, CONVERT(INT, TD008)) + TD009 + ' ' + TD014 AS COMMENTS
                                FROM [TK].dbo.PURTC, [TK].dbo.PURTD
                                WHERE TC001 = TD001 AND TC002 = TD002
                                  AND TD004 IN ('299990001','299990007')
                                  AND TC014='Y'
                                  AND TD005 LIKE '%預付%'
                                  AND TD005 NOT IN (SELECT [NAMES] FROM [TKPUR].[dbo].[PURVERSIONSNUMS]) 
                                ORDER BY TD005, TD012;

                                INSERT INTO [TKPUR].[dbo].[PURVERSIONSNUMS]
                                (
                                    [NAMES],[BACKMONEYS],[ISCLOSE],[PAYKINDS],[CREATEDATES],[COMMENTS]
                                )
                                SELECT 
                                    TD005 AS NAMES,
                                    TD011 AS BACKMONEYS,
                                    'N' AS ISCLOSE,
                                    '版費' AS PAYKINDS,
                                    TD012 AS CREATEDATES,
                                    CONVERT(NVARCHAR, CONVERT(INT, TD008)) + TD009 + ' ' + TD014 AS COMMENTS
                                FROM [TK].dbo.PURTC, [TK].dbo.PURTD
                                WHERE TC001 = TD001 AND TC002 = TD002
                                  AND TD004 IN ('299990001','299990007')
                                  AND TC014='Y'
                                  AND TD005 NOT LIKE '%預付%'
                                  AND TD005 NOT IN (SELECT [NAMES] FROM [TKPUR].[dbo].[PURVERSIONSNUMS]) 
                                ORDER BY TD005, TD012;

                                INSERT INTO [TKPUR].[dbo].[PURVERSIONSNUMS]
                                (
                                    [NAMES],[BACKMONEYS],[ISCLOSE],[PAYKINDS],[CREATEDATES],[COMMENTS],[MB001],[MB002],[TOTALNUMS]
                                )
                                SELECT 
                                    TD005 AS NAMES,
                                    0 AS BACKMONEYS,
                                    'N' AS ISCLOSE,
                                    '改版未收版費' AS PAYKINDS,
                                    TD012 AS CREATEDATES,
                                    CONVERT(NVARCHAR, CONVERT(INT, TD008)) + TD009 + ' ' + TD014 AS COMMENTS,
                                    TD004 AS MB001,
                                    TD005 AS MB002,
                                    TD015 AS TOTALNUMS
                                FROM [TK].dbo.PURTC, [TK].dbo.PURTD
                                WHERE TC001 = TD001 AND TC002 = TD002
                                  AND (TD014 LIKE '%美工%' OR TD014 LIKE '%改版%')
                                  AND TC014='Y'
                                  AND TD005 NOT IN (SELECT [NAMES] FROM [TKPUR].[dbo].[PURVERSIONSNUMS]) 
                                ORDER BY TD005, TD012;
                            ");

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                // 解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    using (SqlCommand cmd = new SqlCommand(SQL.ToString(), sqlConn, tran))
                    {
                        cmd.CommandTimeout = 60;

                        int result = cmd.ExecuteNonQuery();

                        if (result == 0)
                        {
                            tran.Rollback();
                        }
                        else
                        {
                            tran.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 可以在這裡寫 log
                Console.WriteLine("ADD_TKPUR_PURVERSIONSNUMS 發生錯誤：" + ex.Message);
            }
        }


        public void ADD_TKPUR_PURMODELSNUMS()
        {
            StringBuilder SQL = new StringBuilder();
            SQL.Clear();

            SQL.AppendFormat(@"                            
                            INSERT INTO [TKPUR].[dbo].[PURMODELSNUMS]                            
                            (
                            [NAMES]
                            ,[BACKMONEYS]
                            ,[ISCLOSE]
                            ,[PAYKINDS]
                            ,[CREATEDATES]
                            ,[COMMENTS]
                            )
                            SELECT 
                            TD005 AS NAMES
                            ,TD011 AS BACKMONEYS
                            ,'N' AS  ISCLOSE
                            ,'模具費(預付)' AS PAYKINDS
                            ,TD012 AS CREATEDATES
                            ,CONVERT(NVARCHAR,CONVERT(INT,TD008))+TD009+' '+TD014 AS COMMENTS
                            FROM [TK].dbo.PURTC,[TK].dbo.PURTD
                            WHERE TD001=TD001 AND TC002=TD002
                            AND TD004 IN ('299990006')
                            AND TC014='Y'
                            AND TD005 NOT IN (SELECT [NAMES] FROM [TKPUR].[dbo].[PURMODELSNUMS]) 
                            ORDER BY TD005,TD012


                            INSERT INTO [TKPUR].[dbo].[PURMODELSNUMS]   
                            (
                            [NAMES]
                            ,[BACKMONEYS]
                            ,[ISCLOSE]
                            ,[PAYKINDS]
                            ,[CREATEDATES]
                            ,[COMMENTS]
                            )
                            SELECT 
                            TD005 AS NAMES
                            ,TD011 AS BACKMONEYS
                            ,'N' AS  ISCLOSE
                            ,'模具費(物料)' AS PAYKINDS
                            ,TD012 AS CREATEDATES
                            ,CONVERT(NVARCHAR,CONVERT(INT,TD008))+TD009+' '+TD014 AS COMMENTS
                            FROM [TK].dbo.PURTC,[TK].dbo.PURTD
                            WHERE TD001=TD001 AND TC002=TD002
                            AND TD004 IN ('299990010')
                            AND TC014='Y'
                            AND TD005 NOT IN (SELECT [NAMES] FROM [TKPUR].[dbo].[PURMODELSNUMS]) 
                            ORDER BY TD005,TD012
                            ");



            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();


                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = SQL.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  


                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }

        }

        public void ADD_TK_ZINVMBBAKING()
        {
            StringBuilder SQL = new StringBuilder();
            SQL.Clear();

            SQL.AppendFormat(@"                            
                            INSERT INTO [TK].[dbo].[ZINVMBBAKING]
                            (
                            [MB001]
                            ,[MB002]
                            )
                            SELECT MB001,MB002
                            FROM [TK].dbo.INVMB
                            WHERE (MB001 LIKE '408%' OR MB001 LIKE '409%' )
                            AND MB001 NOT IN (SELECT  [MB001] FROM [TK].[dbo].[ZINVMBBAKING])
                            ");



            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);


                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();


                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = SQL.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  


                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }

        }

        public void ADD_TK_MOC_REPORTMOCBOMPROCESS_REPORTMOCBOMORIPROCESS()
        {
            StringBuilder SQL = new StringBuilder();
            SQL.Clear();

            SQL.AppendFormat(@"                            
                            INSERT INTO [TKMOC].[dbo].[REPORTMOCBOMPROCESS]
                            ([MB001]
                            ,[MB002])
                            SELECT RTRIM(LTRIM([MB001])), RTRIM(LTRIM([MB002])) FROM [TK].dbo.INVMB 
                            WHERE ([MB001] LIKE '3%' OR [MB001] LIKE  '4%')
                            AND MB001 NOT IN (SELECT [MB001] FROM [TKMOC].[dbo].[REPORTMOCBOMPROCESS])

                            INSERT INTO [TKMOC].[dbo].[REPORTMOCBOMORIPROCESS]
                            ([MB001]
                            ,[MB002])
                            SELECT RTRIM(LTRIM([MB001])), RTRIM(LTRIM([MB002])) FROM [TK].dbo.INVMB 
                            WHERE ([MB001] LIKE '3%' OR [MB001] LIKE  '4%')
                            AND MB001 NOT IN (SELECT [MB001] FROM [TKMOC].[dbo].[REPORTMOCBOMORIPROCESS])
                            ");



            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();


                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = SQL.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  


                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }

        }

        //
        public void ADD_UOF_FORM_GRAFFIRS_1005_GG004_NULL(string DEFAUL_NAME)
        {
            DataTable DT1003 = SEARCH_UOF_GRAFFIRS_1003_GG004_NULL();

            if (DT1003 != null && DT1003.Rows.Count >= 1)
            {
                foreach (DataRow dr in DT1003.Rows)
                {
                    string DOC_NBR = dr["DOC_NBR"].ToString();
                    string GG004 = dr["GG004"].ToString();
                    string GG002 = dr["GG002"].ToString();
                    string GG005 = dr["GG005"].ToString();
                    string GG010 = dr["GG010"].ToString();
            
                    SEARCHUOFTB_WKF_TASK_TKGRAFFAIRS_1003_GG004_NULL(DOC_NBR, GG004, GG002, GG005, GG010, DEFAUL_NAME);
                }
            }
        }
        public DataTable SEARCH_UOF_GRAFFIRS_1003_GG004_NULL()
        {
            DataSet ds1 = new DataSet();
            SqlDataAdapter adapter1;
            SqlCommandBuilder sqlCmdBuilder1;

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.Append(@"
                                ;WITH GGData AS
                                (
                                    SELECT
                                        T.DOC_NBR,
                                        RowNode.value('(Cell[@fieldId=""GG002""]/@fieldValue)[1]', 'nvarchar(200)') AS GG002,
                                        RowNode.value('(Cell[@fieldId=""GG010""]/@fieldValue)[1]', 'nvarchar(200)') AS GG010,
                                        RowNode.value('(Cell[@fieldId=""GG003""]/@fieldValue)[1]', 'nvarchar(200)') AS GG003,
                                        RowNode.value('(Cell[@fieldId=""GG004""]/@fieldValue)[1]', 'nvarchar(200)') AS GG004,
                                        RowNode.value('(Cell[@fieldId=""GG005""]/@fieldValue)[1]', 'nvarchar(200)') AS GG005,
                                        RowNode.value('(Cell[@fieldId=""GG009""]/@fieldValue)[1]', 'nvarchar(200)') AS GG009,
                                        RowNode.value('(Cell[@fieldId=""GG006""]/@fieldValue)[1]', 'nvarchar(200)') AS GG006,
                                        RowNode.value('(Cell[@fieldId=""GG007""]/@fieldValue)[1]', 'nvarchar(200)') AS GG007,
                                        RowNode.value('(Cell[@fieldId=""GG008""]/@fieldValue)[1]', 'nvarchar(200)') AS GG008
                                    FROM [UOF].dbo.TB_WKF_TASK T
                                    CROSS APPLY T.CURRENT_DOC.nodes('/Form/FormFieldValue/FieldItem[@fieldId=""GA008""]/DataGrid/Row') AS R(RowNode)
                                ),
                                GAData AS
                                (
                                    SELECT
                                        T.DOC_NBR,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA001""]/@fieldValue)[1]', 'nvarchar(200)') AS GA001,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA002""]/@fieldValue)[1]', 'nvarchar(200)') AS GA002,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA003""]/@fieldValue)[1]', 'nvarchar(200)') AS GA003,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA004""]/@fieldValue)[1]', 'nvarchar(200)') AS GA004,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA005""]/@fieldValue)[1]', 'nvarchar(200)') AS GA005,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA006""]/@fieldValue)[1]', 'nvarchar(200)') AS GA006,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA007""]/@fieldValue)[1]', 'nvarchar(200)') AS GA007,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA008""]/@fieldValue)[1]', 'nvarchar(200)') AS GA008,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA009""]/@fieldValue)[1]', 'nvarchar(200)') AS GA009,
                                        T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA010""]/@fieldValue)[1]', 'nvarchar(200)') AS GA010
                                    FROM [UOF].dbo.TB_WKF_TASK T
                                )

                                SELECT 
                                    T.DOC_NBR, T.CURRENT_DOC,
                                    GA.GA001, GA.GA002, GA.GA003, GA.GA004, GA.GA005,
                                    GA.GA006, GA.GA007, GA.GA008, GA.GA009, GA.GA010,
                                    GG.GG002, GG.GG010, GG.GG003, GG.GG004, GG.GG005,
                                    GG.GG009, GG.GG006, GG.GG007, GG.GG008,
                                    T.TASK_RESULT, F.FORM_NAME, U.NAME, U.ACCOUNT, U.USER_GUID,
                                    DEP.GROUP_ID, DEP.TITLE_ID
                                FROM [UOF].dbo.TB_WKF_TASK T
                                INNER JOIN [UOF].dbo.TB_WKF_FORM_VERSION FV ON T.FORM_VERSION_ID = FV.FORM_VERSION_ID
                                INNER JOIN [UOF].dbo.TB_WKF_FORM F ON F.FORM_ID = FV.FORM_ID
                                LEFT JOIN [UOF].dbo.TB_EB_USER U ON U.USER_GUID = T.USER_GUID
                                LEFT JOIN [UOF].dbo.TB_EB_EMPL_DEP DEP ON DEP.USER_GUID = U.USER_GUID AND DEP.ORDERS = '0'
                                LEFT JOIN GGData GG ON GG.DOC_NBR = T.DOC_NBR
                                LEFT JOIN GAData GA ON GA.DOC_NBR = T.DOC_NBR
                                WHERE 
                                    T.DOC_NBR >= 'GA1003250600001'
                                    AND F.FORM_NAME = '1003.雜項請購單'
                                    AND T.TASK_RESULT = '0'
                                    AND ISNULL(GG.GG004, '') = ''
                                    AND NOT EXISTS (
                                        SELECT 1
                                        FROM [UOF].dbo.TB_WKF_EXTERNAL_TASK EXT
                                        WHERE EXT.EXTERNAL_FORM_NBR = T.DOC_NBR
                                        AND STATUS IN ('1', '2')
                                        AND ISNULL(EXTERNAL_FORM_NBR, '') <> ''
                                    )
                                ORDER BY T.DOC_NBR
                            ");

                    adapter1 = new SqlDataAdapter(sbSql.ToString(), sqlConn);
                    sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);

                    sqlConn.Open();
                    ds1.Clear();
                    adapter1.Fill(ds1, "ds1");
                    sqlConn.Close();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("SEARCH_UOF_GRAFFIRS_1003_GG004_NULL 發生錯誤: " + ex.Message);
                return null;
            }

            return ds1.Tables["ds1"].Rows.Count > 0 ? ds1.Tables["ds1"] : null;
        }

        public void SEARCHUOFTB_WKF_TASK_TKGRAFFAIRS_1003_GG004_NULL(
             string DOC_NBR,
             string GG004,
             string GG002,
             string GG005,
             string GG010,
             string DEFAUL_NAME
            )
        {
            int ROWS = 0;

            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                using (SqlDataAdapter adapter = new SqlDataAdapter())
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@"
                                        SELECT 
                                            T.DOC_NBR,
                                            T.CURRENT_DOC,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA001""]/@fieldValue)[1]', 'nvarchar(200)') AS GA001,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA002""]/@fieldValue)[1]', 'nvarchar(200)') AS GA002,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA003""]/@fieldValue)[1]', 'nvarchar(200)') AS GA003,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA004""]/@fieldValue)[1]', 'nvarchar(200)') AS GA004,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA005""]/@fieldValue)[1]', 'nvarchar(200)') AS GA005,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA006""]/@fieldValue)[1]', 'nvarchar(200)') AS GA006,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA007""]/@fieldValue)[1]', 'nvarchar(200)') AS GA007,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA008""]/@fieldValue)[1]', 'nvarchar(200)') AS GA008,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA009""]/@fieldValue)[1]', 'nvarchar(200)') AS GA009,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA010""]/@fieldValue)[1]', 'nvarchar(200)') AS GA010,

                                            Cell.value('(Cell[@fieldId=""GG002""]/@fieldValue)[1]', 'nvarchar(100)') AS GG002,
                                            Cell.value('(Cell[@fieldId=""GG010""]/@fieldValue)[1]', 'nvarchar(200)') AS GG010,
                                            Cell.value('(Cell[@fieldId=""GG003""]/@fieldValue)[1]', 'nvarchar(200)') AS GG003,
                                            Cell.value('(Cell[@fieldId=""GG004""]/@fieldValue)[1]', 'nvarchar(200)') AS GG004,
                                            Cell.value('(Cell[@fieldId=""GG005""]/@fieldValue)[1]', 'nvarchar(200)') AS GG005,
                                            Cell.value('(Cell[@fieldId=""GG009""]/@fieldValue)[1]', 'nvarchar(200)') AS GG009,
                                            Cell.value('(Cell[@fieldId=""GG006""]/@fieldValue)[1]', 'nvarchar(200)') AS GG006,
                                            Cell.value('(Cell[@fieldId=""GG007""]/@fieldValue)[1]', 'nvarchar(200)') AS GG007,
                                            Cell.value('(Cell[@fieldId=""GG008""]/@fieldValue)[1]', 'nvarchar(200)') AS GG008,

                                            T.TASK_RESULT,
                                            F.FORM_NAME,
                                            U.NAME,
                                            U.ACCOUNT,
                                            U.USER_GUID,
                                            D.GROUP_ID,
                                            D.TITLE_ID
                                        FROM [UOF].[dbo].[TB_WKF_TASK] T
                                        INNER JOIN [UOF].[dbo].[TB_WKF_FORM_VERSION] FV ON T.FORM_VERSION_ID = FV.FORM_VERSION_ID
                                        INNER JOIN [UOF].[dbo].[TB_WKF_FORM] F ON FV.FORM_ID = F.FORM_ID
                                        LEFT JOIN [UOF].[dbo].[TB_EB_USER] U ON T.USER_GUID = U.USER_GUID
                                        LEFT JOIN [UOF].[dbo].[TB_EB_EMPL_DEP] D ON U.USER_GUID = D.USER_GUID AND D.ORDERS = '0'
                                        CROSS APPLY T.CURRENT_DOC.nodes('/Form/FormFieldValue/FieldItem[@fieldId=""GA008""]/DataGrid/Row') AS R(Cell)
                                        WHERE 
                                            T.DOC_NBR = '{0}'
                                            AND R.Cell.value('(Cell[@fieldId=""GG004""]/@fieldValue)[1]', 'nvarchar(200)') = '{1}'
                                            AND R.Cell.value('(Cell[@fieldId=""GG002""]/@fieldValue)[1]', 'nvarchar(100)') = '{2}'
                                            AND R.Cell.value('(Cell[@fieldId=""GG005""]/@fieldValue)[1]', 'nvarchar(200)') = '{3}'
                                            AND R.Cell.value('(Cell[@fieldId=""GG010""]/@fieldValue)[1]', 'nvarchar(200)') = '{4}'",
                        DOC_NBR, GG004, GG002, GG005, GG010);

                    adapter.SelectCommand = new SqlCommand(sbSql.ToString(), sqlConn);

                    DataSet ds = new DataSet();
                    adapter.Fill(ds, "ds1");

                    if (ds.Tables["ds1"].Rows.Count > 0)
                    {
                        DataRow row = ds.Tables["ds1"].Rows[0];

                        string NAME = row["NAME"].ToString();
                        string USER_GUID = row["USER_GUID"].ToString();

                        string GA001 = row["GA005"].ToString();
                        string GA002 = DOC_NBR;
                        string GA003 = row["GA006"].ToString();
                        string GA004 = row["GA007"].ToString();
                        string GA005 = row["GG002"].ToString();
                        string GA006 = row["GG003"].ToString();
                        string GA007 = row["GG009"].ToString();
                        string GA008 = row["GG005"].ToString();
                        string GA009 = "";
                        string GA010 = "";
                        string GA011 = row["GG004"].ToString();
                        string GA012 = "";
                        string GA013 = "";
                        string GA014 = "";
                        string GA015 = "";
                        string GA016 = "";
                        string GA017 = DOC_NBR + "-" + (++ROWS);
                        string GA019 = row["GG010"].ToString();
                        string GA098 = "";
                        string GA099 = row["GA009"].ToString();
                        string GA999 = row["GA010"].ToString().Trim();

                        // 採購單負責人為空則預設
                        if (string.IsNullOrEmpty(GA999))
                            GA999 = DEFAUL_NAME;

                        // 檢查是否指定採購人員
                        string TEMP = row["GA010"].ToString();
                        string selectedName = !string.IsNullOrEmpty(TEMP) ? TEMP.Substring(0, 3) : DEFAUL_NAME;

                        DataTable DT = SEARCH_UOF_TB_EB_USER(selectedName);
                        if (DT != null && DT.Rows.Count > 0)
                        {
                            USER_GUID = DT.Rows[0]["USER_GUID"].ToString();
                            GA999 = selectedName;
                        }
                        else
                        {
                            DT = SEARCH_UOF_TB_EB_USER(DEFAUL_NAME);
                            if (DT != null && DT.Rows.Count > 0)
                                USER_GUID = DT.Rows[0]["USER_GUID"].ToString();
                            GA999 = DEFAUL_NAME;
                        }

                        ADD_GRAFFAIRS_1005_TB_WKF_EXTERNAL_TASK(
                            USER_GUID, DOC_NBR,
                            GA001, GA002, GA003, GA004, GA005, GA006, GA007, GA008, GA009, GA010,
                            GA011, GA012, GA013, GA014, GA015, GA016, GA017,
                            GA098, GA099, GA999, GA019,
                            ds.Tables["ds1"], DEFAUL_NAME
                        );
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("SEARCHUOFTB_WKF_TASK_TKGRAFFAIRS_1003_GG004_NULL 發生錯誤: " + ex.Message);
            }
        }

        public void ADD_UOF_FORM_GRAFFIRS_1005_GG004_NOT_NULL(string ACCOUNT,string DEFAUL_NAME)
        {
            DataTable DT1003 = SEARCH_UOF_GRAFFIRS_1003_GG004_NOT_NULL();

            if (DT1003 != null && DT1003.Rows.Count >= 1)
            {
                foreach (DataRow dr in DT1003.Rows)
                {
                    string DOC_NBR = dr["DOC_NBR"].ToString();
                    string GG004 = dr["GG004"].ToString();
                    string GG002 = dr["GG002"].ToString();
                    string GG010 = dr["GG010"].ToString();
                    string GG005 = dr["GG005"].ToString();
                    string GG009 = dr["GG009"].ToString();
                    string GG006 = dr["GG006"].ToString();

                    SEARCHUOFTB_WKF_TASK_TKGRAFFAIRS_1003_GG004_NOT_NULL(
                        DOC_NBR
                        , GG004
                        , GG002
                        , GG010
                        , GG005
                        , GG009
                        , GG006
                        , ACCOUNT
                        , DEFAUL_NAME);
                }
            }
        }
        /// <summary>
        /// GA1005
        /// 更新附件 ATTACH_ID
        /// </summary>
        public void UPDATE_UOF_GA1005_ATTACH_ID()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 解密帳號與密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    sqlConn.Open();
                    using (SqlTransaction tran = sqlConn.BeginTransaction())
                    {
                        try
                        {
                            StringBuilder sbSql = new StringBuilder();
                            sbSql.AppendFormat(@"
                                                UPDATE [UOF].[dbo].TB_WKF_TASK
                                                SET ATTACH_ID = TEMP.NEW_ATTACH_ID
                                                FROM (
                                                    SELECT 
                                                        TB_WKF_TASK.DOC_NBR,
                                                        TB_WKF_TASK.TASK_ID,
                                                        TB_WKF_TASK.ATTACH_ID,
                                                        [TB_WKF_EXTERNAL_TASK].EXTERNAL_FORM_NBR,
                                                        TB_WKF_TASK2.ATTACH_ID AS NEW_ATTACH_ID
                                                    FROM [UOF].[dbo].TB_WKF_TASK
                                                    JOIN [UOF].[dbo].[TB_WKF_EXTERNAL_TASK] 
                                                        ON TB_WKF_TASK.DOC_NBR = [TB_WKF_EXTERNAL_TASK].DOC_NBR
                                                    JOIN [UOF].[dbo].TB_WKF_TASK TB_WKF_TASK2 
                                                        ON [TB_WKF_EXTERNAL_TASK].EXTERNAL_FORM_NBR = TB_WKF_TASK2.DOC_NBR
                                                    WHERE TB_WKF_TASK.DOC_NBR LIKE 'GA1005%'
                                                      AND ISNULL(TB_WKF_TASK.ATTACH_ID, '') <> ISNULL(TB_WKF_TASK2.ATTACH_ID, '')
                                                ) AS TEMP
                                                WHERE TEMP.TASK_ID = TB_WKF_TASK.TASK_ID
                                            ");

                            using (SqlCommand cmd = new SqlCommand(sbSql.ToString(), sqlConn, tran))
                            {
                                cmd.CommandTimeout = 60;
                                int result = cmd.ExecuteNonQuery();

                                if (result == 0)
                                {
                                    tran.Rollback(); // 沒有更新 → 回滾
                                }
                                else
                                {
                                    tran.Commit();   // 有更新 → 提交
                                }
                            }
                        }
                        catch
                        {
                            tran.Rollback(); // 發生錯誤 → 回滾
                            throw;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("錯誤: " + ex.Message);
            }
        }
        public DataTable SEARCH_UOF_GRAFFIRS_1003_GG004_NOT_NULL()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();


            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                //只查 現在到上個月，CONVERT(datetime,[GA005_fieldValue])>=DATEADD(MONTH, -1,  GETDATE())
                //過濾 已成功發出草稿的請購單+品名，[EXTERNAL_FORM_NBR_fieldValue]+[GG002_fieldValue]
                //View_TB_WKF_TASK_APPLYBUY_MERGE，會記錄  已申請成功+申請中
                // --AND GG004_fieldValue = '東昇'
                sbSql.AppendFormat(@" 
                                    SELECT 
                                    T.DOC_NBR,
                                    T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA009""]/@fieldValue)[1]', 'nvarchar(200)'),
                                    Extracted.GG004Val AS GG004,
                                    Extracted.GG002Val AS GG002,
                                    Extracted.GG010Val AS GG010,
                                    Extracted.GG005Val AS GG005,
                                    Extracted.GG009Val AS GG009,
                                    Extracted.GG006Val AS GG006
                                FROM [UOF].dbo.TB_WKF_TASK T
                                CROSS APPLY T.CURRENT_DOC.nodes('/Form/FormFieldValue/FieldItem[@fieldId=""GA008""]/DataGrid/Row') AS R(RowNode)
                                OUTER APPLY RowNode.nodes('Cell[@fieldId=""GG004""]') AS GG004Node(GG004)
                                OUTER APPLY RowNode.nodes('Cell[@fieldId=""GG002""]') AS GG002Node(GG002)
                                OUTER APPLY RowNode.nodes('Cell[@fieldId=""GG005""]') AS GG005Node(GG005)
                                OUTER APPLY RowNode.nodes('Cell[@fieldId=""GG009""]') AS GG009Node(GG009)
                                OUTER APPLY RowNode.nodes('Cell[@fieldId=""GG010""]') AS GG010Node(GG010)
                                OUTER APPLY RowNode.nodes('Cell[@fieldId=""GG006""]') AS GG006Node(GG006)
                                OUTER APPLY (
                                    SELECT 
                                        GG004.value('@fieldValue', 'nvarchar(200)') AS GG004Val,
                                        GG002.value('@fieldValue', 'nvarchar(100)') AS GG002Val,
                                        GG005.value('@fieldValue', 'nvarchar(100)') AS GG005Val,
                                        GG009.value('@fieldValue', 'nvarchar(100)') AS GG009Val,
                                        GG006.value('@fieldValue', 'nvarchar(200)') AS GG006Val,
                                        GG010.value('@fieldValue', 'nvarchar(200)') AS GG010Val
                                ) AS Extracted
                                INNER JOIN [UOF].[dbo].[TB_WKF_FORM_VERSION] FV ON T.FORM_VERSION_ID = FV.FORM_VERSION_ID
                                INNER JOIN [UOF].[dbo].[TB_WKF_FORM] F ON FV.FORM_ID = F.FORM_ID
                                WHERE
                                    T.DOC_NBR >= 'GA1003250800001'
                                    AND F.FORM_NAME = '1003.雜項請購單'
                                    AND T.TASK_RESULT = '0'
                                    AND ISNULL(Extracted.GG004Val, '') <> ''                                   
                                    AND Extracted.GG004Val NOT LIKE '無%'
                                    AND NOT EXISTS (
                                        SELECT 1
                                        FROM [UOF].dbo.TB_WKF_TASK T2
                                        CROSS APPLY T2.CURRENT_DOC.nodes('/Form/FormFieldValue/FieldItem[@fieldId=""DETAILS""]/DataGrid/Row') AS R2(RowNode)
                                        OUTER APPLY RowNode.nodes('Cell[@fieldId=""GG004""]') AS GG004Node2(GG004)
                                        OUTER APPLY RowNode.nodes('Cell[@fieldId=""GG002""]') AS GG002Node2(GG002)
                                        OUTER APPLY RowNode.nodes('Cell[@fieldId=""GG005""]') AS GG005Node2(GG005)
                                        OUTER APPLY RowNode.nodes('Cell[@fieldId=""GG009""]') AS GG009Node2(GG009)
                                        OUTER APPLY RowNode.nodes('Cell[@fieldId=""GG006""]') AS GG006Node2(GG006)
                                        OUTER APPLY RowNode.nodes('Cell[@fieldId=""EXTERNAL_FORM_NBR""]') AS ExternalNode(ExternalS)
                                        OUTER APPLY (
                                            SELECT 
                                                GG004.value('@fieldValue','nvarchar(200)') AS GG004Val2,
                                                GG002.value('@fieldValue','nvarchar(100)') AS GG002Val2,
                                                GG005.value('@fieldValue','nvarchar(100)') AS GG005Val2,
                                                GG009.value('@fieldValue','nvarchar(100)') AS GG009Val2,
                                                GG006.value('@fieldValue','nvarchar(200)') AS GG006Val2,
                                                ExternalS.value('@fieldValue','nvarchar(50)') AS ExternalFormNbr
                                        ) AS Extracted2
                                        WHERE 
                                            T2.DOC_NBR LIKE 'GA1005%'
                                            AND Extracted2.ExternalFormNbr = T.DOC_NBR
                                            AND ISNULL(Extracted2.GG004Val2,'') = ISNULL(Extracted.GG004Val,'')
                                            AND ISNULL(Extracted2.GG002Val2,'') = ISNULL(Extracted.GG002Val,'')
                                            AND ISNULL(Extracted2.GG005Val2,'') = ISNULL(Extracted.GG005Val,'')
                                            AND ISNULL(Extracted2.GG009Val2,'') = ISNULL(Extracted.GG009Val,'')
                                            AND ISNULL(Extracted2.GG006Val2,'') = ISNULL(Extracted.GG006Val,'')
                                    )


                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }
        public void SEARCHUOFTB_WKF_TASK_TKGRAFFAIRS_1003_GG004_NOT_NULL(
             string DOC_NBR,
             string GG004,
             string GG002,
             string GG010,
             string GG005,
             string GG009,
             string GG006,
             string ACCOUNT,
             string DEFAUL_NAME
            )
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                using (SqlDataAdapter adapter = new SqlDataAdapter())
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.AppendFormat(@"
                                        SELECT 
                                            T.DOC_NBR,
                                            Extracted.GG002Val AS GG002,
                                            Extracted.GG003Val AS GG003,
                                            Extracted.GG004Val AS GG004,
                                            Extracted.GG005Val AS GG005,
                                            Extracted.GG006Val AS GG006,
                                            Extracted.GG007Val AS GG007,
                                            Extracted.GG008Val AS GG008,
                                            Extracted.GG009Val AS GG009,
                                            Extracted.GG010Val AS GG010,
                                            Extracted.GG011Val AS GG011,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA007""]/@fieldValue)[1]', 'nvarchar(200)') AS GA007,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA010""]/@fieldValue)[1]', 'nvarchar(200)') AS GA010,
                                            T.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""GA009""]/@fieldValue)[1]', 'nvarchar(200)') AS GA009,
                                            F.FORM_NAME,
                                            U.NAME,
                                            U.ACCOUNT,
                                            U.USER_GUID,
                                            D.GROUP_ID,
                                            D.TITLE_ID
                                        FROM [UOF].dbo.TB_WKF_TASK T
                                        CROSS APPLY T.CURRENT_DOC.nodes('/Form/FormFieldValue/FieldItem[@fieldId=""GA008""]/DataGrid/Row') AS R(RowNode)
                                        OUTER APPLY (
                                            SELECT
                                                RowNode.value('(Cell[@fieldId=""GG002""]/@fieldValue)[1]', 'nvarchar(100)') AS GG002Val,
                                                RowNode.value('(Cell[@fieldId=""GG002""]/@fieldValue)[1]', 'nvarchar(100)') AS GG003Val,
                                                RowNode.value('(Cell[@fieldId=""GG004""]/@fieldValue)[1]', 'nvarchar(200)') AS GG004Val,
                                                RowNode.value('(Cell[@fieldId=""GG005""]/@fieldValue)[1]', 'nvarchar(100)') AS GG005Val,
                                                RowNode.value('(Cell[@fieldId=""GG006""]/@fieldValue)[1]', 'nvarchar(200)') AS GG006Val,
                                                RowNode.value('(Cell[@fieldId=""GG007""]/@fieldValue)[1]', 'nvarchar(200)') AS GG007Val,
                                                RowNode.value('(Cell[@fieldId=""GG008""]/@fieldValue)[1]', 'nvarchar(200)') AS GG008Val,
                                                RowNode.value('(Cell[@fieldId=""GG009""]/@fieldValue)[1]', 'nvarchar(100)') AS GG009Val,
                                                RowNode.value('(Cell[@fieldId=""GG010""]/@fieldValue)[1]', 'nvarchar(200)') AS GG010Val,
                                                RowNode.value('(Cell[@fieldId=""GG011""]/@fieldValue)[1]', 'nvarchar(200)') AS GG011Val
                                        ) AS Extracted
                                        INNER JOIN [UOF].[dbo].[TB_WKF_FORM_VERSION] FV ON T.FORM_VERSION_ID = FV.FORM_VERSION_ID
                                        INNER JOIN [UOF].[dbo].[TB_WKF_FORM] F ON FV.FORM_ID = F.FORM_ID
                                        LEFT JOIN [UOF].[dbo].[TB_EB_USER] U ON T.USER_GUID = U.USER_GUID
                                        LEFT JOIN [UOF].[dbo].[TB_EB_EMPL_DEP] D ON U.USER_GUID = D.USER_GUID AND D.ORDERS = '0'
                                        WHERE
                                            T.DOC_NBR = '{0}'
                                            AND Extracted.GG004Val = '{1}'
                                            AND Extracted.GG002Val = '{2}'
                                            AND Extracted.GG010Val = '{3}'
                                            AND Extracted.GG005Val = '{4}'
                                            AND Extracted.GG009Val = '{5}'
                                            AND F.FORM_NAME = '1003.雜項請購單'
                                            AND T.TASK_RESULT = '0'
                                            AND ISNULL(Extracted.GG004Val,'') <> ''
                                           
                                    ", DOC_NBR, GG004, GG002, GG010, GG005, GG009);

                    adapter.SelectCommand = new SqlCommand(sbSql.ToString(), sqlConn);

                    DataSet ds = new DataSet();
                    adapter.Fill(ds, "ds1");

                    if (ds.Tables["ds1"].Rows.Count >= 1)
                    {
                        string TEMP = ds.Tables["ds1"].Rows[0]["GA010"].ToString();
                        string NAMES = !string.IsNullOrEmpty(TEMP) ? TEMP.Substring(0, 3) : DEFAUL_NAME;

                        DataTable DT = SEARCH_UOF_TB_EB_USER(NAMES);
                        string USER_GUID = (DT != null && DT.Rows.Count >= 1) ? DT.Rows[0]["USER_GUID"].ToString() : "";

                        ADD_GRAFFAIRS_1005_TB_WKF_EXTERNAL_TASK_NOT_NULL(USER_GUID, ds.Tables["ds1"], ACCOUNT);
                    }
                }
            }
            catch (Exception ex)
            {
                // 可在此記錄 Exception
            }
        }
        
        
       public void ADD_GRAFFAIRS_1005_TB_WKF_EXTERNAL_TASK_NOT_NULL(
            string USER_GUID, DataTable DT, string ACCOUNT
           )
        {
            // 請購人原本的部門
            DataTable DTUSERDEP = SEARCHUOFUSERDEP(USER_GUID);

            // 預設總務請購人
            DataTable DTUSERDEP_DEFAULT = FIND_Z_UOF_FORM1005_DEFAULT_PERSON(ACCOUNT);

            // 總務部人員
            DataTable DT_Z_UOF_FORM1005_FLOW = FIND_Z_UOF_FORM1005_FLOW();

            string account = "";
            string groupId = "";
            string jobTitleId = "";
            string fillerName = "";
            string fillerUserGuid = "";
            string DEPNAME = "";
            string DEPNO = "";

            // 表單申請人要在總務部中
            bool foundInFlow = false;
            if (DTUSERDEP != null && DTUSERDEP.Rows.Count >= 1 &&
                DT_Z_UOF_FORM1005_FLOW != null && DT_Z_UOF_FORM1005_FLOW.Rows.Count >= 1)
            {
                foreach (DataRow userRow in DTUSERDEP.Rows)
                {
                    foreach (DataRow flowRow in DT_Z_UOF_FORM1005_FLOW.Rows)
                    {
                        if (userRow["ACCOUNT"].ToString() == flowRow["ID"].ToString())
                        {
                            account = userRow["ACCOUNT"].ToString();
                            groupId = userRow["GROUP_ID"].ToString();
                            jobTitleId = userRow["TITLE_ID"].ToString();
                            fillerName = userRow["NAME"].ToString();
                            fillerUserGuid = userRow["USER_GUID"].ToString();
                            DEPNAME = userRow["DEPNAME"].ToString();
                            DEPNO = userRow["DEPNO"].ToString();
                            foundInFlow = true;
                            break;
                        }
                    }
                    if (foundInFlow) break;
                }
            }

            if (!foundInFlow)
            {
                account = DTUSERDEP_DEFAULT.Rows[0]["ACCOUNT"].ToString();
                groupId = DTUSERDEP_DEFAULT.Rows[0]["GROUP_ID"].ToString();
                jobTitleId = DTUSERDEP_DEFAULT.Rows[0]["TITLE_ID"].ToString();
                fillerName = DTUSERDEP_DEFAULT.Rows[0]["NAME"].ToString();
                fillerUserGuid = DTUSERDEP_DEFAULT.Rows[0]["USER_GUID"].ToString();
                DEPNAME = DTUSERDEP_DEFAULT.Rows[0]["DEPNAME"].ToString();
                DEPNO = DTUSERDEP_DEFAULT.Rows[0]["DEPNO"].ToString();
            }

            string EXTERNAL_FORM_NBR = "MERGE1003-" + DT.Rows[0]["DOC_NBR"].ToString();
            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement Form = xmlDoc.CreateElement("Form");
            string FORMID = SEARCHFORM_UOF_VERSION_ID("1005.雜項採購單");
            if (!string.IsNullOrEmpty(FORMID))
            {
                Form.SetAttribute("formVersionId", FORMID);
            }
            Form.SetAttribute("urgentLevel", "2");
            xmlDoc.AppendChild(Form);

            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            Form.AppendChild(Applicant);

            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            Applicant.AppendChild(Comment);

            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            Form.AppendChild(FormFieldValue);

            // 使用 AddFieldItem 建立表單欄位
            // string GA099 = row["GA009"].ToString();
            AddFieldItem(xmlDoc, FormFieldValue, "ID", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA001", "如明細", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA002", DT.Rows[0]["DOC_NBR"].ToString(), fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA003", fillerName + "(" + account + ")", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA004", "如明細", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA005", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA006", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA007", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA008", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA009", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA010", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA011", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA012", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA013", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA014", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA015", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA016", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA017", "", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA999", fillerName, fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA019", "如明細", fillerName, fillerUserGuid, account);
            AddFieldItem(xmlDoc, FormFieldValue, "GA099", DT.Rows[0]["GA009"].ToString(), fillerName, fillerUserGuid, account);

            // DataGrid
            XmlElement FieldItem = AddFieldItem(xmlDoc, FormFieldValue, "DETAILS", "", fillerName, fillerUserGuid, account);
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            FieldItem.AppendChild(DataGrid);

            foreach (DataRow od in DT.Rows)
            {
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", rowscounts.ToString());

                AppendCellToRow(xmlDoc, Row, od, "GG002");
                AppendCellToRow(xmlDoc, Row, od, "GG002B", false, od["GG002"].ToString());
                AppendCellToRow(xmlDoc, Row, od, "GG010");
                AppendCellToRow(xmlDoc, Row, od, "GG003");
                AppendCellToRow(xmlDoc, Row, od, "GG004");
                AppendCellToRow(xmlDoc, Row, od, "GG004B", false, od["GG004"].ToString());
                AppendCellToRow(xmlDoc, Row, od, "GG005");
                AppendCellToRow(xmlDoc, Row, od, "GG005B", false, od["GG005"].ToString());
                AppendCellToRow(xmlDoc, Row, od, "GG009");
                AppendCellToRow(xmlDoc, Row, od, "GG009B", false, od["GG009"].ToString());
                AppendCellToRow(xmlDoc, Row, od, "GG006");
                AppendCellToRow(xmlDoc, Row, od, "GG007", false, "");
                AppendCellToRow(xmlDoc, Row, od, "GG008", false, "");
                AppendCellToRow(xmlDoc, Row, od, "GG011", false, od["GA007"].ToString());
                AppendCellToRow(xmlDoc, Row, od, "EXTERNAL_FORM_NBR", false, od["DOC_NBR"].ToString());

                DataGrid.AppendChild(Row);
                rowscounts++;
            }

            // 寫入資料庫
            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
            {
                string queryString = $@"
                                    INSERT INTO [UOF].dbo.TB_WKF_EXTERNAL_TASK
                                    (EXTERNAL_TASK_ID, FORM_INFO, STATUS, EXTERNAL_FORM_NBR)
                                    VALUES (NEWID(), @XML, 2, '{EXTERNAL_FORM_NBR}')
                                ";
                using (SqlCommand command = new SqlCommand(queryString, connection))
                {
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
        }

        public DataTable FIND_Z_UOF_FORM1005_FLOW()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();


            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                //只查 現在到上個月，CONVERT(datetime,[GA005_fieldValue])>=DATEADD(MONTH, -1,  GETDATE())
                //過濾 已成功發出草稿的請購單+品名，[EXTERNAL_FORM_NBR_fieldValue]+[GG002_fieldValue]
                //View_TB_WKF_TASK_APPLYBUY_MERGE，會記錄  已申請成功+申請中
                sbSql.AppendFormat(@"  
                                   SELECT 
                                    [ID]
                                    ,[NAMES]
                                    FROM [UOF].[dbo].[Z_UOF_FORM1005_FLOW]
                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public DataTable FIND_Z_UOF_FORM1005_DEFAULT_PERSON(string ACCOUNT)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();


            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();


                sbSql.AppendFormat(@"  
                                   SELECT 
                                    [GROUP_NAME] AS 'DEPNAME'
                                    ,[TB_EB_EMPL_DEP].[GROUP_ID]+','+[GROUP_NAME]+',False' AS 'DEPNO'
                                    ,[TB_EB_USER].[USER_GUID]
                                    ,[ACCOUNT]
                                    ,[NAME]
                                    ,[TB_EB_EMPL_DEP].[GROUP_ID]
                                    ,[TITLE_ID]     
                                    ,[GROUP_NAME]
                                    ,[GROUP_CODE]
                                    FROM [UOF].[dbo].[TB_EB_USER],[UOF].[dbo].[TB_EB_EMPL_DEP],[UOF].[dbo].[TB_EB_GROUP]
                                    WHERE [TB_EB_USER].[USER_GUID]=[TB_EB_EMPL_DEP].[USER_GUID]
                                    AND [TB_EB_EMPL_DEP].[GROUP_ID]=[TB_EB_GROUP].[GROUP_ID]
                                    AND ISNULL([TB_EB_GROUP].[GROUP_CODE],'')<>''
                                    AND [GROUP_NAME] LIKE '%總務%'  
                                    AND ACCOUNT='{0}'
                                    ", ACCOUNT);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void ADD_UOFGAFIXSNEW()
        {
            StringBuilder SQL = new StringBuilder();
            SQL.Clear();

            SQL.AppendFormat(@" 
                            INSERT INTO [TKGAFFAIRS].[dbo].[UOFGAFIXSNEW]
                            (
                            [DOC_NBR]
                            ,[GAFrm004SN]
                            ,[GAFrm004SI]
                            ,[GAFrm004SD]
                            ,[GAFrm004Applydates]
                            ,[GAFrm004DN]
                            ,[GAFrm004ER]
                            )
                            SELECT 
                             [DOC_NBR]
                            ,[GAFrm004SN]
                            ,[GAFrm004SI]
                            ,[GAFrm004SD]
                            ,[GAFrm004Applydates]
                            ,[GAFrm004DN]
                            ,[GAFrm004ER]
                            FROM [192.168.1.223].[UOF].[dbo].[View_UOFGAFIXSNEW]
                            WHERE 1=1 
                            AND [DOC_NBR] COLLATE Chinese_Taiwan_Stroke_BIN  NOT IN (SELECT [DOC_NBR] FROM [TKGAFFAIRS].[dbo].[UOFGAFIXSNEW] )
                       
                            ");



            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();


                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = SQL.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  


                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_ASTMB_ASTI02()
        {
            string MB001 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";
            string TC002 = "";
            DataTable DT = FIND_UOF_ASTI02();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    MB001 = DR["MB001_FieldValue"].ToString();
                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();
                    TC002 = DR["TC002"].ToString();

                    UPDATE_ASTMB_ASTI02_EXE(MB001, DOC_NBR, ACCOUNT, TC002);
                }
            }
        }

        public DataTable FIND_UOF_ASTI02()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""MB001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS MB001_FieldValue,

                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'ASTI02.資產資料建立作業'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'
                                        AND[CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""MB001""]/@fieldValue)[1]', 'NVARCHAR(100)')
                                        NOT IN(
                                            SELECT MB001
                                            FROM[192.168.1.105].[TK].dbo.ASTMB
                                            WHERE MB039 IN('Y')
                                        )
                                    )
                                    SELECT TEMP.*, 
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT,
                                    (
                                    SELECT TOP 1 ISNULL(MAX(TC002), '00000000000') AS TA002
                                    FROM[TK].dbo.ASTTC
                                    WHERE  TC015 = 'Y'
                                    AND TC001 = 'AC01' AND TC004 = TEMP.MB001_FieldValue
                                    ) AS TC002
                                    FROM TEMP;
                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_ASTMB_ASTI02_EXE(string MB001, string DOC_NBR, string ACCOUNT, string TC002)
        {

            string MB016 = DateTime.Now.ToString("yyyyMMdd");
            string MB042 = "AC01";
            string MB043 = TC002;
            string FORMID = DOC_NBR;
            string MODIFIER = ACCOUNT;
            string TC027 = "Y";
            string TC048 = "N";
            string TD021 = "Y";
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"                                   
                                        UPDATE [TK].dbo.ASTMB
                                        SET 
                                        MB047=@MB047
                                        ,MB048=@MB048                                        
                                        ,MB042=@MB042
                                        ,MB043=@MB043                                        
                                        ,MB039=@MB039
                                        ,MB050=@MB050                                        
                                        ,FLAG=FLAG+1
                                        ,COMPANY=@COMPANY
                                        ,MODIFIER=@MODIFIER
                                        ,MODI_DATE=@MODI_DATE
                                        ,MODI_TIME=@MODI_TIME
                                        ,UDF02=@UDF02
                                        WHERE MB001=@MB001

                                        DELETE [TK].dbo.ASTTD
                                        WHERE TD001+TD002 IN (SELECT MB042+MB043 FROM [TK].dbo.ASTMB WHERE MB001=@MB001)

                                        DELETE [TK].dbo.ASTTC
                                        WHERE TC001+TC002 IN (SELECT MB042+MB043 FROM [TK].dbo.ASTMB WHERE MB001=@MB001)


                                        INSERT INTO [TK].dbo.ASTTC
                                        (
                                        TC001,TC002,TC003,TC004,TC005,TC006,TC007,TC008,TC009,TC010, 
                                        TC011,TC012,TC013,TC014,TC015,TC016,TC017,TC018,TC019,TC020,
                                        TC021,TC022,TC025,TC027,TC028,TC029,TC030,
                                        TC031,TC032,TC033,TC035,TC036,TC037,TC038,TC039, 
                                        TC068,TC069,
                                        TC073,TC074,TC075,TC076,TC077,TC078,TC079,TC080,
                                        TC086,TC088,TC092,TC093, 
                                        COMPANY,CREATOR,USR_GROUP,CREATE_DATE ,FLAG,
                                        CREATE_TIME,MODI_TIME,TRANS_TYPE,TRANS_NAME
                                        )
                                        SELECT 
                                        MB042 TC001,MB043 TC002,MB016 TC003,MB001 TC004,MB012 TC005,MB020 TC006,MB021 TC007,MB029 TC008,MB015 TC009,MB022 TC010, 
                                        MB052 TC011,MB053 TC012,MB032 TC013,'C0' TC014,'Y' TC015,0 TC016,'' TC017,'' TC018,MB018 TC019,MB080 TC020,
                                        0 TC021,0 TC022,'N' TC025,MB016 TC027,'AD' TC028,0 TC029,0 TC030,
                                        'N' TC031,'N' TC032,MB051 TC033,MB014 TC035,MB058 TC036,MB026 TC037,MB041 TC038,0 TC039, 
                                        MB076 TC068,'N' TC069,
                                        MB069 TC073,MB068 TC074,MB073 TC075,MB074 TC076, MB075 TC077,MB064 TC078,MB066 TC079,MB032 TC080,
                                        0 TC086,0 TC088,MB078 TC092,MB079 TC093, 
                                        'TK' COMPANY ,ASTMB.CREATOR CREATOR ,ASTMB.USR_GROUP USR_GROUP ,CONVERT(NVARCHAR,GETDATE(),112) CREATE_DATE ,0 FLAG,
                                        CONVERT(NVARCHAR,GETDATE(),108) CREATE_TIME,CONVERT(NVARCHAR,GETDATE(),108)  MODI_TIME, 'P004' TRANS_TYPE,'ASTI02' TRANS_NAME
                                        FROM [TK].dbo.ASTMB
                                        WHERE MB001=@MB001

                                        INSERT INTO [TK].dbo.ASTTD
                                        (
                                        TD001,TD002,TD003,TD004,TD005,TD006,TD007, TD008, TD009,TD010,TD016, 
                                        COMPANY,CREATOR,USR_GROUP,CREATE_DATE ,FLAG, CREATE_TIME
                                        )
                                        SELECT 
                                        MB042 TD001,MB043 TD002,MC002 TD003,MC003 TD004,MC004 TD005,MB031 TD006,0 TD007,'' TD008,'Y' TD009,MB001 TD010,MB066 TD016, 
                                        'TK' COMPANY ,ASTMB.CREATOR CREATOR ,ASTMB.USR_GROUP USR_GROUP ,CONVERT(NVARCHAR,GETDATE(),112) CREATE_DATE ,0 FLAG,
                                        CONVERT(NVARCHAR,GETDATE(),108) CREATE_TIME
                                        FROM [TK].dbo.ASTMB,[TK].dbo.ASTMC
                                        WHERE 1=1
                                        AND MB001=MC001
                                        AND MB001=@MB001

 
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@MB001", SqlDbType.NVarChar).Value = MB001;
                    command.Parameters.Add("@MB047", SqlDbType.NVarChar).Value = MB016;
                    command.Parameters.Add("@MB048", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MB042", SqlDbType.NVarChar).Value = MB042;
                    command.Parameters.Add("@MB043", SqlDbType.NVarChar).Value = MB043;
                    command.Parameters.Add("@MB039", SqlDbType.NVarChar).Value = "Y";
                    command.Parameters.Add("@MB050", SqlDbType.NVarChar).Value = "N";
                    command.Parameters.Add("@COMPANY", SqlDbType.NVarChar).Value = "TK";
                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = DateTime.Now.ToString("yyyyMMdd");
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = DateTime.Now.ToString("HH:mm:ss");
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;



                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_ASTTC_ASTI06()
        {

            string TC001 = "";
            string TC002 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";
          
            DataTable DT = FIND_UOF_ASTI06();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TC001 = DR["TC001_FieldValue"].ToString();
                    TC002 = DR["TC002_FieldValue"].ToString();
                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();                  

                    UPDATE_ASTMB_ASTI06_EXE(TC001, TC002, DOC_NBR, ACCOUNT);
                }
            }
        }

        public DataTable FIND_UOF_ASTI06()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC001_FieldValue,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC002_FieldValue,

                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'ASTI06.資產改良建立作業'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*, 
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TC001_FieldValue+TC002_FieldValue,' ','') NOT  IN
                                    (
                                        SELECT REPLACE(TC001+TC002,' ','')

                                        FROM [TK].dbo.ASTTC
                                        WHERE TC015 IN ('Y')
                                    )

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_ASTMB_ASTI06_EXE(string TC001, string TC002, string DOC_NBR, string ACCOUNT)
        {
            string TC015 = "Y";
            string TC032 = "N";
            string TC003 = DateTime.Now.ToString("yyyyMMdd");
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"  
                                    UPDATE [TK].dbo.ASTTC
                                    SET TC003=@TC003
                                    ,TC015=@TC015
                                    ,FLAG=FLAG+1
                                    ,TC028=@TC028 
                                    ,TC032='N'
                                    ,UDF02=@UDF02
                                    ,MODIFIER=@MODIFIER
                                    ,MODI_DATE=MODI_DATE
                                    ,MODI_TIME=MODI_TIME 
                                    WHERE TC001=@TC001 AND TC002=@TC002

                                    UPDATE [TK].dbo.ASTMB
                                    set ASTMB.FLAG=ASTMB.FLAG+1
                                    ,MB021=TC007
                                    ,MB015=TC009+MB015
                                    ,MB022=TC010
                                    ,MB014=TC035+MB014
                                    ,MB049=TC030
                                    ,MB051=TC033 
                                    ,MB041=TC038
                                    ,MB074=TC076
                                    ,MB069=TC073
                                    ,MB068=TC074
                                    ,MB077=TC078
                                    ,MB063=TC038
                                    ,MB062=TC037
                                    ,MB064=TC039
                                    ,MB066=TC079
                                    ,MB065=TC030

                                    ,MODIFIER=@MODIFIER 
                                    ,MODI_DATE=@MODI_DATE 
                                    ,MODI_TIME=@MODI_TIME 
                                    FROM  [TK].dbo.ASTTC
                                    WHERE MB001=TC004
                                    AND TC001=@TC001 AND TC002=@TC002
 
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TC002;
                    command.Parameters.Add("@TC003", SqlDbType.NVarChar).Value = TC003;
                    command.Parameters.Add("@TC015", SqlDbType.NVarChar).Value = TC015;
                    command.Parameters.Add("@TC028", SqlDbType.NVarChar).Value = MODIFIER;

                    command.Parameters.Add("@COMPANY", SqlDbType.NVarChar).Value = "TK";
                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = DateTime.Now.ToString("yyyyMMdd");
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = DateTime.Now.ToString("HH:mm:ss");
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;
                    
                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void NEWPUR_MOCTH_MOCTI()
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp22"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();

                //TL006='N' AND (UDF01 IN ('Y','y') ) 
                sbSql.AppendFormat(@" 
                                   SELECT TH001,TH002,UDF01
                                    FROM [TK].dbo.MOCTH
                                    WHERE TH023='N'
                                    AND UDF01 IN ('Y','y')
                                    ORDER BY TH001,TH002


                                    ");

                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");


                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        ADD_MOCTH_MOCTI_TB_WKF_EXTERNAL_TASK2(dr["TH001"].ToString().Trim(), dr["TH002"].ToString().Trim());
                    }

                }
                else
                {

                }

            }
            catch
            {

            }
            finally
            {
                sqlConn.Close();
            }

            UPDATE_PUR_MOCTH_UDF01();
        }

        public DataTable SEARCH_ERP_MOCTH_MOCTI(string TH001, string TH002)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);


                sbSql.Clear();
                sbSqlQuery.Clear();

                //庫存數量看LA009 IN ('20004','20006','20008','20019','20020'

                sbSql.AppendFormat(@"  
                                    SELECT *
                                    ,USER_GUID,NAME
                                    ,(SELECT TOP 1 GROUP_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'GROUP_ID'
                                    ,(SELECT TOP 1 TITLE_ID FROM [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] WHERE [TB_EB_EMPL_DEP].USER_GUID=TEMP.USER_GUID) AS 'TITLE_ID'
									, (CONVERT(NVARCHAR, CAST(
                                        CASE 
                                            WHEN 本日有效天數 > 0 AND 製造有效天數 > 0 
                                            THEN 本日有效天數 * 100.0 / 製造有效天數 
                                            ELSE 0 
                                        END 
                                    AS DECIMAL(10,2))) + '%') AS '有效百分比'
                                    FROM 
                                    (
                                    SELECT 

                                    [MOCTH].[COMPANY]
                                    ,[MOCTH].[CREATOR]
                                    ,[MOCTH].[USR_GROUP]
                                    ,[MOCTH].[CREATE_DATE]
                                    ,[MOCTH].[MODIFIER]
                                    ,[MOCTH].[MODI_DATE]
                                    ,[MOCTH].[FLAG]
                                    ,[MOCTH].[CREATE_TIME]
                                    ,[MOCTH].[MODI_TIME]
                                    ,[MOCTH].[TRANS_TYPE]
                                    ,[MOCTH].[TRANS_NAME]
                                    ,[MOCTH].[sync_date]
                                    ,[MOCTH].[sync_time]
                                    ,[MOCTH].[sync_mark]
                                    ,[MOCTH].[sync_count]
                                    ,[MOCTH].[DataUser]
                                    ,[MOCTH].[DataGroup]
                                    ,[MOCTH].[TH001]
                                    ,[MOCTH].[TH002]
                                    ,[MOCTH].[TH003]
                                    ,[MOCTH].[TH004]
                                    ,[MOCTH].[TH005]
                                    ,[MOCTH].[TH006]
                                    ,[MOCTH].[TH007]
                                    ,[MOCTH].[TH008]
                                    ,[MOCTH].[TH009]
                                    ,[MOCTH].[TH010]
                                    ,[MOCTH].[TH011]
                                    ,[MOCTH].[TH012]
                                    ,[MOCTH].[TH013]
                                    ,[MOCTH].[TH014]
                                    ,[MOCTH].[TH015]
                                    ,[MOCTH].[TH016]
                                    ,[MOCTH].[TH017]
                                    ,[MOCTH].[TH018]
                                    ,[MOCTH].[TH019]
                                    ,[MOCTH].[TH020]
                                    ,[MOCTH].[TH021]
                                    ,[MOCTH].[TH022]
                                    ,[MOCTH].[TH023]
                                    ,[MOCTH].[TH024]
                                    ,[MOCTH].[TH025]
                                    ,[MOCTH].[TH026]
                                    ,[MOCTH].[TH027]
                                    ,[MOCTH].[TH028]
                                    ,[MOCTH].[TH029]
                                    ,[MOCTH].[TH030]
                                    ,[MOCTH].[TH031]
                                    ,[MOCTH].[TH032]
                                    ,[MOCTH].[TH033]
                                    ,[MOCTH].[TH034]
                                    ,[MOCTH].[TH035]
                                    ,[MOCTH].[TH036]
                                    ,[MOCTH].[TH037]
                                    ,[MOCTH].[TH038]
                                    ,[MOCTH].[TH039]
                                    ,[MOCTH].[TH040]
                                    ,[MOCTH].[TH041]
                                    ,[MOCTH].[TH042]
                                    ,[MOCTH].[TH043]
                                    ,[MOCTH].[TH044]
                                    ,[MOCTH].[TH045]
                                    ,[MOCTH].[TH046]
                                    ,[MOCTH].[TH047]
                                    ,[MOCTH].[TH048]
                                    ,[MOCTH].[TH049]
                                    ,[MOCTH].[TH050]
                                    ,[MOCTH].[TH051]
                                    ,[MOCTH].[TH052]
                                    ,[MOCTH].[TH053]
                                    ,[MOCTH].[TH054]
                                    ,[MOCTH].[TH500]
                                    ,[MOCTH].[TH501]
                                    ,[MOCTH].[TH502]
                                    ,[MOCTH].[TH503]
                                    ,[MOCTH].[TH504]
                                    ,[MOCTH].[TH505]
                                    ,[MOCTH].[TH506]
                                    ,[MOCTH].[UDF01]  AS 'MOCTHUDF01'
                                    ,[MOCTH].[UDF02]  AS 'MOCTHUDF02'
                                    ,[MOCTH].[UDF03]  AS 'MOCTHUDF03'
                                    ,[MOCTH].[UDF04]  AS 'MOCTHUDF04'
                                    ,[MOCTH].[UDF05]  AS 'MOCTHUDF05'
                                    ,[MOCTH].[UDF06]  AS 'MOCTHUDF06'
                                    ,[MOCTH].[UDF07]  AS 'MOCTHUDF07'
                                    ,[MOCTH].[UDF08]  AS 'MOCTHUDF08'
                                    ,[MOCTH].[UDF09]  AS 'MOCTHUDF09'
                                    ,[MOCTH].[UDF10]  AS 'MOCTHUDF10'
                                    ,[MOCTI].[TI001]
                                    ,[MOCTI].[TI002]
                                    ,[MOCTI].[TI003]
                                    ,[MOCTI].[TI004]
                                    ,[MOCTI].[TI005]
                                    ,[MOCTI].[TI006]
                                    ,[MOCTI].[TI007]
                                    ,[MOCTI].[TI008]
                                    ,[MOCTI].[TI009]
                                    ,[MOCTI].[TI010]
                                    ,[MOCTI].[TI011]
                                    ,[MOCTI].[TI012]
                                    ,[MOCTI].[TI013]
                                    ,[MOCTI].[TI014]
                                    ,[MOCTI].[TI015]
                                    ,[MOCTI].[TI016]
                                    ,[MOCTI].[TI017]
                                    ,[MOCTI].[TI018]
                                    ,[MOCTI].[TI019]
                                    ,[MOCTI].[TI020]
                                    ,[MOCTI].[TI021]
                                    ,[MOCTI].[TI022]
                                    ,[MOCTI].[TI023]
                                    ,[MOCTI].[TI024]
                                    ,[MOCTI].[TI025]
                                    ,[MOCTI].[TI026]
                                    ,[MOCTI].[TI027]
                                    ,[MOCTI].[TI028]
                                    ,[MOCTI].[TI029]
                                    ,[MOCTI].[TI030]
                                    ,[MOCTI].[TI031]
                                    ,[MOCTI].[TI032]
                                    ,[MOCTI].[TI033]
                                    ,[MOCTI].[TI034]
                                    ,[MOCTI].[TI035]
                                    ,[MOCTI].[TI036]
                                    ,[MOCTI].[TI037]
                                    ,[MOCTI].[TI038]
                                    ,[MOCTI].[TI039]
                                    ,[MOCTI].[TI040]
                                    ,[MOCTI].[TI041]
                                    ,[MOCTI].[TI042]
                                    ,[MOCTI].[TI043]
                                    ,[MOCTI].[TI044]
                                    ,[MOCTI].[TI045]
                                    ,[MOCTI].[TI046]
                                    ,[MOCTI].[TI047]
                                    ,[MOCTI].[TI048]
                                    ,[MOCTI].[TI049]
                                    ,[MOCTI].[TI050]
                                    ,[MOCTI].[TI051]
                                    ,[MOCTI].[TI052]
                                    ,[MOCTI].[TI053]
                                    ,[MOCTI].[TI054]
                                    ,[MOCTI].[TI055]
                                    ,[MOCTI].[TI056]
                                    ,[MOCTI].[TI057]
                                    ,[MOCTI].[TI058]
                                    ,[MOCTI].[TI059]
                                    ,[MOCTI].[TI060]
                                    ,[MOCTI].[TI061]
                                    ,[MOCTI].[TI062]
                                    ,[MOCTI].[TI063]
                                    ,[MOCTI].[TI064]
                                    ,[MOCTI].[TI065]
                                    ,[MOCTI].[TI066]
                                    ,[MOCTI].[TI067]
                                    ,[MOCTI].[TI068]
                                    ,[MOCTI].[TI069]
                                    ,[MOCTI].[TI070]
                                    ,[MOCTI].[TI071]
                                    ,[MOCTI].[TI072]
                                    ,[MOCTI].[TI073]
                                    ,[MOCTI].[TI074]
                                    ,[MOCTI].[TI075]
                                    ,[MOCTI].[TI500]
                                    ,[MOCTI].[TI501]
                                    ,[MOCTI].[TI502]
                                    ,[MOCTI].[TI503]
                                    ,[MOCTI].[TI504]
                                    ,[MOCTI].[TI505]
                                    ,[MOCTI].[TI506]
                                    ,[MOCTI].[TI507]
                                    ,[MOCTI].[TI550]
                                    ,[MOCTI].[TI551]
                                    ,[MOCTI].[TI552]
                                    ,[MOCTI].[TI553]
                                    ,[MOCTI].[TI554]
                                    ,[MOCTI].[TI555]
                                    ,[MOCTI].[TI556]
                                    ,[MOCTI].[TI557]
                                    ,[MOCTI].[TI558]
                                    ,[MOCTI].[TI559]
                                    ,[MOCTI].[TI560]
                                    ,[MOCTI].[TI561]
                                    ,[MOCTI].[TI562]
                                    ,[MOCTI].[TI563]
                                    ,[MOCTI].[TI564]
                                    ,[MOCTI].[TI565]
                                    ,[MOCTI].[TI567]
                                    ,[MOCTI].[TI568]
                                    ,[MOCTI].[TI569]
                                    ,[MOCTI].[TI570]
                                    ,[MOCTI].[TI571]
                                    ,[MOCTI].[TI572]
                                    ,[MOCTI].[TI573]
                                    ,[MOCTI].[TI574]
                                    ,[MOCTI].[TI575]
                                    ,[MOCTI].[TI576]
                                    ,[MOCTI].[UDF01]  AS 'MOCTIUDF01'
                                    ,[MOCTI].[UDF02]  AS 'MOCTIUDF02'
                                    ,[MOCTI].[UDF03]  AS 'MOCTIUDF03'
                                    ,[MOCTI].[UDF04]  AS 'MOCTIUDF04'
                                    ,[MOCTI].[UDF05]  AS 'MOCTIUDF05'
                                    ,[MOCTI].[UDF06]  AS 'MOCTIUDF06'
                                    ,[MOCTI].[UDF07]  AS 'MOCTIUDF07'
                                    ,[MOCTI].[UDF08]  AS 'MOCTIUDF08'
                                    ,[MOCTI].[UDF09]  AS 'MOCTIUDF09'
                                    ,[MOCTI].[UDF10]  AS 'MOCTIUDF10'
                                    ,[TB_EB_USER].USER_GUID,NAME
                                    ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=MOCTH.CREATOR) AS 'MV002'
                                    ,PURMA.MA002
									,(CASE WHEN ISDATE(TI011)=1 AND ISDATE(TI061)=1 THEN DATEDIFF(DAY,TI061,TI011) ELSE 0 END) AS '製造有效天數'
                                    ,(CASE WHEN ISDATE(TI011)=1 AND ISDATE(TI061)=1 THEN DATEDIFF(DAY,GETDATE(),TI011) ELSE 0 END) AS '本日有效天數'
                                    FROM [TK].dbo.PURMA,[TK].dbo.MOCTH,[TK].dbo.MOCTI
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT= MOCTI.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE 1=1
                                    AND TH001=TI001 AND TH002=TI002
                                    AND MA001=TH005
                                    AND TH001='{0}' AND TH002='{1}'

                                    ) AS TEMP
                              
                                    ", TH001, TH002);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }
        public void ADD_MOCTH_MOCTI_TB_WKF_EXTERNAL_TASK2(string TH001,string TH002)
        {

            DataTable DT = SEARCH_ERP_MOCTH_MOCTI(TH001, TH002);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["TH001"].ToString().Trim() + DT.Rows[0]["TH002"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            //建立根節點
            XmlElement Form = xmlDoc.CreateElement("Form");

            //正式的id
            string PURTGID = SEARCHFORM_UOF_VERSION_ID("PURMOCA2.進貨-託外進貨品質驗收單");

            if (!string.IsNullOrEmpty(PURTGID))
            {
                Form.SetAttribute("formVersionId", PURTGID);
            }


            Form.SetAttribute("urgentLevel", "2");
            //加入節點底下
            xmlDoc.AppendChild(Form);

            ////建立節點Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            //加入節點底下
            Form.AppendChild(Applicant);

            //建立節點 Comment
            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            //加入至節點底下
            Applicant.AppendChild(Comment);

            //建立節點 FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            //加入至節點底下
            Form.AppendChild(FormFieldValue);

            //建立節點FieldItem
            //ID 表單編號	
            XmlElement FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "ID");
            FieldItem.SetAttribute("fieldValue", "");
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //TG003	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TH003");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TH003"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //TG005	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TH005");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TH005"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //TG021	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MA002");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["MA002"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //TG001	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TH001");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TH001"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //TG002	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "TH002");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["TH002"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);


            //DataGrid
            //建立節點FieldItem
            //PURTH
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MOCTI");
            FieldItem.SetAttribute("fieldValue", "");
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點 DataGrid
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            //DataGrid 加入至 TB 節點底下
            XmlNode PURTD = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='MOCTI']");
            PURTD.AppendChild(DataGrid);


            foreach (DataRow od in DT.Rows)
            {
                // 新增 Row
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", (rowscounts).ToString());

                //Row	TH003
                XmlElement Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TI003");
                Cell.SetAttribute("fieldValue", od["TI003"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH004
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TI004");
                Cell.SetAttribute("fieldValue", od["TI004"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH005
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TI005");
                Cell.SetAttribute("fieldValue", od["TI005"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH006
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TI006");
                Cell.SetAttribute("fieldValue", od["TI006"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH007
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TI007");
                Cell.SetAttribute("fieldValue", od["TI007"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH008
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TI008");
                Cell.SetAttribute("fieldValue", od["TI008"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH010
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TI010");
                Cell.SetAttribute("fieldValue", od["TI010"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	TH015
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TI019");
                Cell.SetAttribute("fieldValue", od["TI019"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	CHECK
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "CHECK");
                Cell.SetAttribute("fieldValue", "Y");
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "@null");
                Cell.SetAttribute("enableSearch", "True");
                Cell.SetAttribute("fieldMessage", "Y");
                //Row
                Row.AppendChild(Cell);

                //Row	DETAIL01
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "DETAIL01");
                Cell.SetAttribute("fieldValue", "");
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Cell.SetAttribute("fieldMessage", "Y");
                //Row
                Row.AppendChild(Cell);

                //Row	DETAIL02
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "DETAIL02");
                Cell.SetAttribute("fieldValue", "V");
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "@null");
                Cell.SetAttribute("enableSearch", "True");
                Cell.SetAttribute("fieldMessage", "Y");
                //Row
                Row.AppendChild(Cell);

                ////Row	DETAIL03
                //Cell = xmlDoc.CreateElement("Cell");
                //Cell.SetAttribute("fieldId", "DETAIL03");
                //Cell.SetAttribute("fieldValue", "N");
                //Cell.SetAttribute("realValue", "");
                //Cell.SetAttribute("customValue", "@null");
                //Cell.SetAttribute("enableSearch", "True");
                //Cell.SetAttribute("fieldMessage", "Y");
                ////Row
                //Row.AppendChild(Cell);

                //Row	DETAIL04
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "DETAIL04");
                Cell.SetAttribute("fieldValue", "N");
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "@null");
                Cell.SetAttribute("enableSearch", "True");
                Cell.SetAttribute("fieldMessage", "Y");
                //Row
                Row.AppendChild(Cell);

                //Row	DETAIL05
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "DETAIL05");
                Cell.SetAttribute("fieldValue", "0");
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Cell.SetAttribute("fieldMessage", "Y");
                //Row
                Row.AppendChild(Cell);

                //Row	DETAIL06
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "DETAIL06");
                Cell.SetAttribute("fieldValue", "");
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Cell.SetAttribute("fieldMessage", "Y");
                //Row
                Row.AppendChild(Cell);

                //TH036 有效日期
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TI011");
                Cell.SetAttribute("fieldValue", od["TI011"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Cell.SetAttribute("fieldMessage", "Y");
                //Row
                Row.AppendChild(Cell);


                //TH117 製造日期
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TI061");
                Cell.SetAttribute("fieldValue", od["TI061"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Cell.SetAttribute("fieldMessage", "Y");
                //Row
                Row.AppendChild(Cell);


                //VALIDDAYS 原有效天數
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "VALIDDAYS");
                Cell.SetAttribute("fieldValue", od["製造有效天數"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Cell.SetAttribute("fieldMessage", "Y");
                //Row
                Row.AppendChild(Cell);

                //STILLDAYS 剩餘有效天數
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "STILLDAYS");
                Cell.SetAttribute("fieldValue", od["本日有效天數"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Cell.SetAttribute("fieldMessage", "Y");
                //Row
                Row.AppendChild(Cell);

                //STILLPCTS 有效天數%
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "STILLPCTS");
                Cell.SetAttribute("fieldValue", od["有效百分比"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                Cell.SetAttribute("fieldMessage", "Y");
                //Row
                Row.AppendChild(Cell);

                rowscounts = rowscounts + 1;

                //DataGrid PURTM
                XmlNode DataGridS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='MOCTI']/DataGrid");
                DataGridS.AppendChild(Row);

            }


            ////用ADDTACK，直接啟動起單
            //ADDTACK(Form);

            //ADD TO DB
            ////string connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ToString();

            //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
            //sqlConn = new SqlConnection(connectionString);

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);
            connectionString = sqlConn.ConnectionString.ToString();

            StringBuilder queryString = new StringBuilder();




            queryString.AppendFormat(@" INSERT INTO [{0}].dbo.TB_WKF_EXTERNAL_TASK
                                         (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(),@XML,2,'{1}')
                                        ", DBNAME, EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_PUR_MOCTH_UDF01()
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                    UPDATE   [TK].dbo.MOCTH
                                    SET UDF01 = 'UOF'
                                    WHERE  UDF01 IN ('Y','y')

                                    ");

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  
                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_ASTTC_ASTI07()
        {
            string TC001 = "";
            string TC002 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";

            DataTable DT = FIND_UOF_ASTI07();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TC001 = DR["TC001_FieldValue"].ToString();
                    TC002 = DR["TC002_FieldValue"].ToString();
                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    UPDATE_ASTMB_ASTI07_EXE(TC001, TC002, DOC_NBR, ACCOUNT);
                }
            }
        }
        public DataTable FIND_UOF_ASTI07()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC001_FieldValue,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC002_FieldValue,

                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'ASTI07.資產重估建立作業'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*, 
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TC001_FieldValue+TC002_FieldValue,' ','') NOT  IN
                                        (
                                            SELECT REPLACE(TC001+TC002,' ','')

                                            FROM [TK].dbo.ASTTC
                                            WHERE TC015 IN ('Y')
                                        )

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_ASTMB_ASTI07_EXE(string TC001, string TC002, string DOC_NBR, string ACCOUNT)
        {
            string TC015 = "Y";
            string TC032 = "N";
            string TC003 = DateTime.Now.ToString("yyyyMMdd");
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"  
                                     UPDATE [TK].dbo.ASTMB
                                    SET 
                                    ASTMB.FLAG=ASTMB.FLAG+1
                                     ,MB022=TC010
                                    ,MB051=TC033 
                                    ,MB058=TC036
                                    ,MB027=TC039 
                                    ,MB075=TC077
                                    ,MB077=TC078
                                    ,MB066=TC079 
                                    ,MODIFIER=@MODIFIER
                                    ,MODI_DATE=@MODI_DATE 
                                    ,MODI_TIME=@MODI_TIME
                                    FROM [TK].dbo.ASTTC
                                    WHERE TC004=MB001
                                    AND TC001=@TC001 AND TC002=@TC002

                                    UPDATE [TK].dbo.ASTTC
                                    SET 
                                    FLAG=FLAG+1
                                    ,TC028=@MODIFIER 
                                    ,TC015=@TC015
                                    ,TC032=@TC032
                                    ,UDF02=@UDF02
                                    WHERE TC001=@TC001 AND TC002=@TC002
 
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TC002;
                    
                    command.Parameters.Add("@TC015", SqlDbType.NVarChar).Value = TC015;
                    command.Parameters.Add("@TC028", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@TC032", SqlDbType.NVarChar).Value = TC032;

                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = DateTime.Now.ToString("yyyyMMdd");
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = DateTime.Now.ToString("HH:mm:ss");
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_ASTTC_ASTI08()
        {
            string TC001 = "";
            string TC002 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";

            DataTable DT = FIND_UOF_ASTI08();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TC001 = DR["TC001_FieldValue"].ToString();
                    TC002 = DR["TC002_FieldValue"].ToString();
                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    UPDATE_ASTMB_ASTI08_EXE(TC001, TC002, DOC_NBR, ACCOUNT);
                }
            }
        }
        public DataTable FIND_UOF_ASTI08()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC001_FieldValue,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC002_FieldValue,

                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'ASTI08.資產報廢建立作業'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*, 
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TC001_FieldValue+TC002_FieldValue,' ','') NOT  IN
                                        (
                                            SELECT REPLACE(TC001+TC002,' ','')

                                            FROM [TK].dbo.ASTTC
                                            WHERE TC015 IN ('Y')
                                        )

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_ASTMB_ASTI08_EXE(string TC001, string TC002, string DOC_NBR, string ACCOUNT)
        {
            string TC015 = "Y";
            string TC032 = "N";
            string TC003 = DateTime.Now.ToString("yyyyMMdd");
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;
            string TD009 = "Y";
            string TC028 = MODIFIER;

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"  
                                    UPDATE [TK].dbo.ASTTC
                                    SET 
                                    TC015=@TC015
                                    ,TC028=@TC028 
                                    ,TC032=@TC032 
                                    ,FLAG=FLAG+2
                                    ,MODIFIER=@MODIFIER 
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME
                                    ,UDF02=@UDF02
                                    WHERE TC001=@TC001 AND TC002=@TC002

                                    UPDATE [TK].dbo.ASTTD
                                    SET 
                                    TD009=@TD009
                                    ,FLAG=FLAG+1
                                    ,MODIFIER=@MODIFIER 
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME 
                                    WHERE TD001=@TD001 AND TD002=@TD002

                                    UPDATE [TK].dbo.ASTMB
                                    SET 
                                    ASTMB.FLAG=ASTMB.FLAG+1
                                    ,MB012=TC005
                                    ,MB020=MB020-TC006
                                    ,MB021=MB021-TC007
                                    ,MB029=MB029-TC008
                                    ,MB022=MB022-TC010
                                    ,MB017=TC003
                                    ,MB051=MB051-TC033
                                    ,MB058=MB058-TC036 
                                    ,MB027=MB027-TC039 
                                    ,MB073=MB073-TC075
                                    ,MB074=MB074-TC076
                                    ,MB075=MB075-TC077
                                    ,MB076=MB076-TC068
                                    ,MB064=MB064-TC039
                                    ,MB077=MB077-TC078
                                    ,MB066=MB066-TC079
                                    ,MB071=TC003
                                    ,MB078=MB078-TC092
                                    ,MB079=MB079-TC093 
                                    ,MODIFIER=@MODIFIER
                                    ,MODI_DATE=@MODI_DATE 
                                    ,MODI_TIME=@MODI_TIME 
                                    FROM [TK].dbo.ASTTC
                                    WHERE TC004=MB001
                                    AND TC001=@TC001 AND TC002=@TC002
 
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);

                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TC002;

                    command.Parameters.Add("@TC015", SqlDbType.NVarChar).Value = TC015;
                    command.Parameters.Add("@TC028", SqlDbType.NVarChar).Value = TC028;
                    command.Parameters.Add("@TC032", SqlDbType.NVarChar).Value = TC032;

                    command.Parameters.Add("@TD001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TD002", SqlDbType.NVarChar).Value = TC002;

                    command.Parameters.Add("@TD009", SqlDbType.NVarChar).Value = TD009;

                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = DateTime.Now.ToString("yyyyMMdd");
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = DateTime.Now.ToString("HH:mm:ss");
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_ASTTC_ASTI09()
        {
            string TC001 = "";
            string TC002 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";

            DataTable DT = FIND_UOF_ASTI09();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TC001 = DR["TC001_FieldValue"].ToString();
                    TC002 = DR["TC002_FieldValue"].ToString();
                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    UPDATE_ASTMB_ASTI09_EXE(TC001, TC002, DOC_NBR, ACCOUNT);
                }
            }
        }

        public DataTable FIND_UOF_ASTI09()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC001_FieldValue,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC002_FieldValue,

                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'ASTI09.資產出售建立作業'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*, 
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TC001_FieldValue+TC002_FieldValue,' ','') NOT  IN
                                        (
                                            SELECT REPLACE(TC001+TC002,' ','')

                                            FROM [TK].dbo.ASTTC
                                            WHERE TC015 IN ('Y')
                                        )

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_ASTMB_ASTI09_EXE(string TC001, string TC002, string DOC_NBR, string ACCOUNT)
        {
            string TC015 = "Y";
            string TC032 = "N";
            string TC003 = DateTime.Now.ToString("yyyyMMdd");
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;
            string TD009 = "Y";
            string TC028 = MODIFIER;

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"  
                                     UPDATE [TK].dbo.ASTTC
                                    SET 
                                    TC015=@TC015
                                    ,TC028=@TC028 
                                    ,TC032=@TC032 
                                    ,FLAG=FLAG+2
                                    ,MODIFIER=@MODIFIER 
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME
                                    ,UDF02=@UDF02
                                    WHERE TC001=@TC001 AND TC002=@TC002

                                    UPDATE [TK].dbo.ASTTD
                                    SET 
                                    TD009=@TD009
                                    ,FLAG=FLAG+1
                                    ,MODIFIER=@MODIFIER 
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME 
                                    WHERE TD001=@TD001 AND TD002=@TD002

                                    UPDATE [TK].dbo.ASTMC
                                    SET MC004=TD005
                                    FROM [TK].dbo.ASTTC,[TK].dbo.ASTTD
                                    WHERE TC001=TD001 AND TC002=TD002
                                    AND TC004=MC001 AND TD003=MC002 AND TD004=MC002
                                    AND TC001=@TC001 AND TC002=@TC002


                                   UPDATE [TK].dbo.ASTMB
                                    SET
                                    ASTMB.FLAG=ASTMB.FLAG+1
                                    ,MB012=TC005
                                    ,MB020=MB020-TC006
                                    ,MB021=MB021-TC007
                                    ,MB029=MB029-TC008
                                    ,MB022=MB022-TC010
                                    ,MB017=TC003
                                    ,MB051=MB051-TC033
                                    ,MB058=MB058-TC036 
                                    ,MB027=MB027-TC039
                                    ,MB073=MB073-TC075
                                    ,MB074=MB074-TC076
                                    ,MB075=MB075-TC077
                                    ,MB076=MB076-TC068
                                    ,MB064=MB064-TC039
                                    ,MB077=MB077-TC078
                                    ,MB066=MB066-TC079
                                    ,MB071=TC003
                                    ,MB078=MB078-TC092
                                    ,MB079=MB079-TC093 
                                    ,MODIFIER=@MODIFIER
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME 
                                    FROM [TK].dbo.ASTTC
                                    WHERE TC004=MB001
                                    AND TC001=@TC001 AND TC002=@TC002

                                 
 
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);

                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TC002;
                    
                    command.Parameters.Add("@TC015", SqlDbType.NVarChar).Value = TC015;
                    command.Parameters.Add("@TC028", SqlDbType.NVarChar).Value = TC028;
                    command.Parameters.Add("@TC032", SqlDbType.NVarChar).Value = TC032;

                    command.Parameters.Add("@TD001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TD002", SqlDbType.NVarChar).Value = TC002;

                    command.Parameters.Add("@TD009", SqlDbType.NVarChar).Value = TD009;

                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = DateTime.Now.ToString("yyyyMMdd");
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = DateTime.Now.ToString("HH:mm:ss");
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;
                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_ASTTC_ASTI10()
        {
            string TC001 = "";
            string TC002 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";

            DataTable DT = FIND_UOF_ASTI10();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TC001 = DR["TC001_FieldValue"].ToString();
                    TC002 = DR["TC002_FieldValue"].ToString();
                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    UPDATE_ASTMB_ASTI10_EXE(TC001, TC002, DOC_NBR, ACCOUNT);
                }
            }
        }

        public DataTable FIND_UOF_ASTI10()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC001_FieldValue,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC002_FieldValue,

                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'ASTI10.資產調整建立作業'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*, 
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TC001_FieldValue+TC002_FieldValue,' ','') NOT  IN
                                        (
                                            SELECT REPLACE(TC001+TC002,' ','')

                                            FROM [TK].dbo.ASTTC
                                            WHERE TC015 IN ('Y')
                                        )

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_ASTMB_ASTI10_EXE(string TC001, string TC002, string DOC_NBR, string ACCOUNT)
        {
            string TC015 = "Y";
            string TC032 = "N";
            string TC003 = DateTime.Now.ToString("yyyyMMdd");
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;
            string TD009 = "Y";
            string TC028 = MODIFIER;

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"  
                                      UPDATE [TK].dbo.ASTTC
                                    SET 
                                    TC015=@TC015
                                    ,TC028=@TC028 
                                    ,TC032=@TC032 
                                    ,FLAG=FLAG+2
                                    ,MODIFIER=@MODIFIER 
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME
                                    ,UDF02=@UDF02
                                    WHERE TC001=@TC001 AND TC002=@TC002

                                    UPDATE [TK].dbo.ASTTD
                                    SET 
                                    TD009=@TD009
                                    ,FLAG=FLAG+1
                                    ,MODIFIER=@MODIFIER 
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME 
                                    WHERE TD001=@TD001 AND TD002=@TD002

                                    UPDATE [TK].dbo.ASTMC
                                    SET MC004=TD005
                                    FROM [TK].dbo.ASTTC,[TK].dbo.ASTTD
                                    WHERE TC001=TD001 AND TC002=TD002
                                    AND TC004=MC001 AND TD003=MC002 AND TD004=MC002
                                    AND TC001=@TC001 AND TC002=@TC002


                                   UPDATE [TK].dbo.ASTMB
                                    SET
                                   ASTMB.FLAG=ASTMB.FLAG+1 
                                    ,MB012=TC005 
                                    ,MB015=TC009 
                                    ,MB020=TC006 
                                    ,MB021=TC007 
                                    ,MB022=TC010 
                                    ,MB029=TC008 
                                    ,MB058=TC036 
                                    ,MB049=TC030 
                                    ,MB051=TC033  
                                    ,MB025=TC059
                                    ,MB014=TC035
                                    ,MB041=TC038
                                    ,MB027=TC039
                                    ,MB026=TC037
                                    ,MB081=TC038
                                    ,MB073=TC075
                                    ,MB074=TC076
                                    ,MB075=TC077
                                    ,MB076=TC068
                                    ,MB066=TC079
                                    ,MB069=TC073
                                    ,MB068=TC074
                                    ,MB077=TC078
                                    ,MB063=TC038
                                    ,MB062=TC037
                                    ,MB064=TC039
                                    ,MB065=TC030
                                    ,MB061=TC059
                                    ,MB078=TC092
                                    ,MB079=TC093
                                    ,MB023=TC097
                                    ,MB059=TC099
                                    ,MB082=TC061 
                                    ,MB019=TC007 
                                    ,MB072=TC075
                                    ,MODIFIER=@MODIFIER
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME 
                                    FROM [TK].dbo.ASTTC
                                    WHERE TC004=MB001
                                    AND TC001=@TC001 AND TC002=@TC002

                                 
 
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TC002;
                    
                    command.Parameters.Add("@TC015", SqlDbType.NVarChar).Value = TC015;
                    command.Parameters.Add("@TC028", SqlDbType.NVarChar).Value = TC028;
                    command.Parameters.Add("@TC032", SqlDbType.NVarChar).Value = TC032;

                    command.Parameters.Add("@TD001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TD002", SqlDbType.NVarChar).Value = TC002;

                    command.Parameters.Add("@TD009", SqlDbType.NVarChar).Value = TD009;

                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = DateTime.Now.ToString("yyyyMMdd");
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = DateTime.Now.ToString("HH:mm:ss");
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }


        public void UPDATE_ASTTC_ASTI11()
        {
            string TC001 = "";
            string TC002 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";

            DataTable DT = FIND_UOF_ASTI11();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TC001 = DR["TC001_FieldValue"].ToString();
                    TC002 = DR["TC002_FieldValue"].ToString();
                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    UPDATE_ASTMB_ASTI11_EXE(TC001, TC002, DOC_NBR, ACCOUNT);
                }
            }
        }

        public DataTable FIND_UOF_ASTI11()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC001_FieldValue,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC002_FieldValue,

                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'ASTI11.資產折舊建立作業'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*, 
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TC001_FieldValue+TC002_FieldValue,' ','') NOT  IN
                                        (
                                            SELECT REPLACE(TC001+TC002,' ','')

                                            FROM [TK].dbo.ASTTC
                                            WHERE TC015 IN ('Y')
                                        )

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_ASTMB_ASTI11_EXE(string TC001, string TC002, string DOC_NBR, string ACCOUNT)
        {
            string TC015 = "Y";
            string TC032 = "N";
            string TC003 = DateTime.Now.ToString("yyyyMMdd");
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;
            string TD009 = "Y";
            string TC028 = MODIFIER;

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"                                   
                                        UPDATE [TK].dbo.ASTTC
                                    SET 
                                    TC015=@TC015
                                    ,TC028=@TC028 
                                    ,TC032=@TC032 
                                    ,FLAG=FLAG+2
                                    ,MODIFIER=@MODIFIER 
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME
                                    ,UDF02=@UDF02
                                    WHERE TC001=@TC001 AND TC002=@TC002

                                    UPDATE [TK].dbo.ASTTD
                                    SET 
                                    TD009=@TD009
                                    ,FLAG=FLAG+1
                                    ,MODIFIER=@MODIFIER 
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME 
                                    WHERE TD001=@TD001 AND TD002=@TD002

                                    UPDATE [TK].dbo.ASTMC
                                    SET MC004=TD005
                                    FROM [TK].dbo.ASTTC,[TK].dbo.ASTTD
                                    WHERE TC001=TD001 AND TC002=TD002
                                    AND TC004=MC001 AND TD003=MC002 AND TD004=MC002
                                    AND TC001=@TC001 AND TC002=@TC002


                                   UPDATE [TK].dbo.ASTMB
                                    SET
                                   ASTMB.FLAG=ASTMB.FLAG+1 
                                    ,MB029=TC008+MB029
                                    ,MB015=MB015-1
                                    ,MB041=TC038
                                    ,MB017=(CASE WHEN (MB015-1)=0 THEN @MODI_DATE ELSE  '' END )
                                    ,MB014=MB014
                                    ,MB049=TC030
                                    ,MB026=TC037
                                    ,MB051=TC008
                                    ,MB076=TC068
                                    ,MB069=TC073
                                    ,MB063=TC038
                                    ,MB065=TC030
                                    ,MB066=TC079
                                    ,MB071= @MODI_DATE
                                    ,MODIFIER=@MODIFIER
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME 
                                    FROM [TK].dbo.ASTTC
                                    WHERE TC004=MB001
                                    AND TC001=@TC001 AND TC002=@TC002
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TC002;
                    
                    command.Parameters.Add("@TC015", SqlDbType.NVarChar).Value = TC015;
                    command.Parameters.Add("@TC028", SqlDbType.NVarChar).Value = TC028;
                    command.Parameters.Add("@TC032", SqlDbType.NVarChar).Value = TC032;

                    command.Parameters.Add("@TD001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TD002", SqlDbType.NVarChar).Value = TC002;

                    command.Parameters.Add("@TD009", SqlDbType.NVarChar).Value = TD009;

                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = DateTime.Now.ToString("yyyyMMdd");
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = DateTime.Now.ToString("HH:mm:ss");
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_ASTTC_ASTI12()
        {
            string TE001 = "";
            string TE002 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";

            DataTable DT = FIND_UOF_ASTI12();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TE001 = DR["TE001_FieldValue"].ToString();
                    TE001 = DR["TE002_FieldValue"].ToString();
                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    UPDATE_ASTMB_ASTI12_EXE(TE001, TE001, DOC_NBR, ACCOUNT);
                }
            }
        }

        public DataTable FIND_UOF_ASTI12()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TE001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TE001_FieldValue,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TE002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TE002_FieldValue,

                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'ASTI12.資產移轉建立作業'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*, 
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TE001_FieldValue+TE002_FieldValue,' ','') NOT IN
                                        (
                                            SELECT REPLACE(TE001+TE002,' ','')

                                            FROM  [192.168.1.105].[TK].dbo.ASTTE
                                            FROM  [192.168.1.105].[TK].dbo.ASTTE
                                            FROM  [192.168.1.105].[TK].dbo.ASTTE
                                            FROM  [192.168.1.105].[TK].dbo.ASTTE
                                           WHERE TE006 IN('Y')
                                        )
                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_ASTMB_ASTI12_EXE(string TE001, string TE002, string DOC_NBR, string ACCOUNT)
        {
            
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;

            string TE006 = "Y";
            string TE010 = "N";
            string TE009 = MODIFIER;
            string TF009 = "Y";

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"    
                                     UPDATE [TK].dbo.ASTTE
                                    SET
                                    TE006=@TE006 
                                    ,TE009=@TE009
                                    ,TE010=@TE010
                                    ,FLAG=FLAG+1
                                    ,MODIFIER=@MODIFIER
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME
                                    ,UDF02=@UDF02
                                    WHERE TE001=@TE001 AND TE002=@TE002

                                    
  
                                    UPDATE [TK].dbo.ASTTF
                                    SET
                                    TF009=@TF009 
                                    ,FLAG=FLAG+1
                                    ,MODIFIER=@MODIFIER
                                    ,MODI_DATE=@MODI_DATE
                                    ,MODI_TIME=@MODI_TIME 
                                    WHERE TF001=@TF001 AND TF002=@TF002

                                    DELETE  [TK].dbo.ASTMC
                                    WHERE Replace(MC001+MC002+MC003,' ','') IN (
                                    SELECT Replace(TF003+TF004+TF005,' ','')
                                    FROM [TK].dbo.ASTTF
                                    WHERE TF001=@TF001 AND TF002=@TF002
                                    )


                                    INSERT INTO [TK].dbo.ASTMC
                                    (MC001 ,MC002 ,MC003 ,MC004 ,MC005 ,MC006, 
                                    COMPANY ,CREATOR ,USR_GROUP ,CREATE_DATE ,FLAG, 
                                    CREATE_TIME, MODI_TIME, TRANS_TYPE, TRANS_NAME)
                                    SELECT TF003,TF104,TF105,TF006,TF008,TF107
                                    ,N'TK',TF105,MF007,CONVERT(nvarchar,GETDATE(),112),0,CONVERT(nvarchar,GETDATE(),108),N'',N'P004',N'ASTI12'
                                    FROM [TK].dbo.ASTTF
                                    LEFT JOIN [TK].dbo.ADMMF ON MF001=TF105
                                    WHERE TF001=@TF001 AND TF002=@TF002
            
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TE001", SqlDbType.NVarChar).Value = TE001;
                    command.Parameters.Add("@TE002", SqlDbType.NVarChar).Value = TE002;

                    command.Parameters.Add("@TE006", SqlDbType.NVarChar).Value = TE006;
                    command.Parameters.Add("@TE009", SqlDbType.NVarChar).Value = TE009;
                    command.Parameters.Add("@TE010", SqlDbType.NVarChar).Value = TE010;
                    command.Parameters.Add("@TF009", SqlDbType.NVarChar).Value = TF009;

                    command.Parameters.Add("@TF001", SqlDbType.NVarChar).Value = TE001;
                    command.Parameters.Add("@TF002", SqlDbType.NVarChar).Value = TE002;


                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = DateTime.Now.ToString("yyyyMMdd");
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = DateTime.Now.ToString("HH:mm:ss");
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_BOMMC_BOMI02()
        {
            string MC001 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";

            DataTable DT = FIND_UOF_BOMI02();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    MC001 = DR["MC001_FieldValue"].ToString();
                    
                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    UPDATE_BOMMC_BOMI02_EXE(MC001, DOC_NBR, ACCOUNT);
                }
            }
        }

        public DataTable FIND_UOF_BOMI02()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""MC001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS MC001_FieldValue,

                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                            FROM[UOF].[dbo].TB_WKF_TASK
                                            LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                            LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                            WHERE[FORM_NAME] = 'BOM02.BOM表'
                                            AND TASK_STATUS = '2'
                                            AND TASK_RESULT = '0'

                                        )
                                        SELECT TEMP.*, 
                                        (
                                            SELECT TOP 1[TB_EB_USER].ACCOUNT
                                            FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                            LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                                ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                        WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                        ORDER BY FINISH_TIME DESC
                                        ) AS ACCOUNT
                                        FROM TEMP
                                        WHERE 1=1
                                        AND MC001_FieldValue NOT IN 
                                        (
	                                        SELECT MC001 
	                                        FROM [192.168.1.105].[TK].dbo.BOMMC
	                                        WHERE UDF02 LIKE 'BOM%'
                                        )

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_BOMMC_BOMI02_EXE(string MC001, string DOC_NBR, string ACCOUNT)
        {

            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;

            string UDF01 = MODIFIER + "，已簽核:" + DateTime.Now.ToString("yyyyMMdd HH:mm:ss");
            string UDF02 = FORMID;


            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"    
                                      UPDATE  [TK].dbo.BOMMC
                                        SET
                                        UDF01=@UDF01
                                        ,UDF02=@UDF02
                                        WHERE MC001=@MC001 
            
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@MC001", SqlDbType.NVarChar).Value = MC001;
                    command.Parameters.Add("@UDF01", SqlDbType.NVarChar).Value = UDF01;
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = UDF02;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_BOMMJ_BOMMK()
        {
            string MJ001 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";

            DataTable DT = FIND_UOF_BOMMJ();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    MJ001 = DR["MJ001_FieldValue"].ToString().Trim();

                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    UPDATE_BOMMJ_BOMMK_EXE(MJ001, DOC_NBR, ACCOUNT);
                }
            }
        }

        public DataTable FIND_UOF_BOMMJ()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""MJ001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS MJ001_FieldValue,


                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                            FROM[UOF].[dbo].TB_WKF_TASK
                                            LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                            LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                            WHERE[FORM_NAME] = 'BOM11.EBOM表'
                                            AND TASK_STATUS = '2'
                                            AND TASK_RESULT = '0'

                                        )
                                        SELECT TEMP.*, 
                                        (
                                            SELECT TOP 1[TB_EB_USER].ACCOUNT
                                            FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                            LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                                ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                        WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                        ORDER BY FINISH_TIME DESC
                                        ) AS ACCOUNT
                                        FROM TEMP
                                        WHERE 1=1
                                        AND REPLACE(MJ001_FieldValue,' ','') NOT IN
                                            (
                                                SELECT REPLACE(MJ001,' ','')

                                                FROM[192.168.1.105].[TK].dbo.BOMMJ
                                        WHERE UDF02 LIKE 'BOM%'
                                            )

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_BOMMJ_BOMMK_EXE(string MJ001, string DOC_NBR, string ACCOUNT)
        {

            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;

            string UDF01 = MODIFIER + "，已簽核:" + DateTime.Now.ToString("yyyyMMdd HH:mm:ss");
            string UDF02 = FORMID;


            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"    
                                     INSERT  [TK].[dbo].[BOMMC]
                                    (
                                    [COMPANY]
                                    ,[CREATOR]
                                    ,[USR_GROUP]
                                    ,[CREATE_DATE]
                                    ,[MODIFIER]
                                    ,[MODI_DATE]
                                    ,[FLAG]
                                    ,[CREATE_TIME]
                                    ,[MODI_TIME]
                                    ,[TRANS_TYPE]
                                    ,[TRANS_NAME]
                                    ,[sync_date]
                                    ,[sync_time]
                                    ,[sync_mark]
                                    ,[sync_count]
                                    ,[DataUser]
                                    ,[DataGroup]
                                    ,[MC001]
                                    ,[MC002]
                                    ,[MC003]
                                    ,[MC004]
                                    ,[MC005]
                                    ,[MC006]
                                    ,[MC007]
                                    ,[MC008]
                                    ,[MC009]
                                    ,[MC010]
                                    ,[MC011]
                                    ,[MC012]
                                    ,[MC013]
                                    ,[MC014]
                                    ,[MC015]
                                    ,[MC016]
                                    ,[MC017]
                                    ,[MC018]
                                    ,[MC019]
                                    ,[MC020]
                                    ,[MC021]
                                    ,[MC022]
                                    ,[MC023]
                                    ,[MC024]
                                    ,[MC025]
                                    ,[MC026]
                                    ,[MC027]
                                    ,[UDF03]
                                    ,[UDF04]
                                    ,[UDF05]
                                        )
                                    SELECT 
                                    [BOMMJ].[COMPANY]
                                    ,[BOMMJ].[CREATOR]
                                    ,[BOMMJ].[USR_GROUP]
                                    ,[BOMMJ].[CREATE_DATE]
                                    ,[BOMMJ].[MODIFIER]
                                    ,[BOMMJ].[MODI_DATE]
                                    ,[BOMMJ].[FLAG]
                                    ,[BOMMJ].[CREATE_TIME]
                                    ,[BOMMJ].[MODI_TIME]
                                    ,[BOMMJ].[TRANS_TYPE]
                                    ,[BOMMJ].[TRANS_NAME]
                                    ,[BOMMJ].[sync_date]
                                    ,[BOMMJ].[sync_time]
                                    ,[BOMMJ].[sync_mark]
                                    ,[BOMMJ].[sync_count]
                                    ,[BOMMJ].[DataUser]
                                    ,[BOMMJ].[DataGroup]
                                    ,MJ001 [MC001]
                                    ,MB004 [MC002]
                                    ,MB072 [MC003]
                                    ,MJ004 [MC004]
                                    ,MJ005[MC005]
                                    ,'' [MC006]
                                    ,'' [MC007]
                                    ,'' [MC008]
                                    ,'0001' [MC009]
                                    ,MJ010 [MC010]
                                    ,0 [MC011]
                                    ,0 [MC012]
                                    ,'' [MC013]
                                    ,'' [MC014]
                                    ,'' [MC015]
                                    ,'N' [MC016]
                                    ,'' [MC017]
                                    ,'' [MC018]
                                    ,'N' [MC019]
                                    ,0 [MC020]
                                    ,0 [MC021]
                                    ,''[MC022]
                                    ,0 [MC023]
                                    ,MB002 [MC024]
                                    ,MB003 [MC025]
                                    ,'' [MC026]
                                    ,0 [MC027]
                                    ,[BOMMJ].[UDF03]
                                    ,[BOMMJ].[UDF04]
                                    ,[BOMMJ].[UDF05]
                                    
                                    
                                    FROM [TK].[dbo].[BOMMJ],[TK].[dbo].INVMB
                                    WHERE MJ001=MB001
                                    AND MJ001=@MJ001

                                    INSERT INTO [TK].[dbo].[BOMMD]
                                    (
                                    [COMPANY]
                                    ,[CREATOR]
                                    ,[USR_GROUP]
                                    ,[CREATE_DATE]
                                    ,[MODIFIER]
                                    ,[MODI_DATE]
                                    ,[FLAG]
                                    ,[CREATE_TIME]
                                    ,[MODI_TIME]
                                    ,[TRANS_TYPE]
                                    ,[TRANS_NAME]
                                    ,[sync_date]
                                    ,[sync_time]
                                    ,[sync_mark]
                                    ,[sync_count]
                                    ,[DataUser]
                                    ,[DataGroup]
                                    ,[MD001]
                                    ,[MD002]
                                    ,[MD003]
                                    ,[MD004]
                                    ,[MD005]
                                    ,[MD006]
                                    ,[MD007]
                                    ,[MD008]
                                    ,[MD009]
                                    ,[MD010]
                                    ,[MD011]
                                    ,[MD012]
                                    ,[MD013]
                                    ,[MD014]
                                    ,[MD015]
                                    ,[MD016]
                                    ,[MD017]
                                    ,[MD018]
                                    ,[MD019]
                                    ,[MD020]
                                    ,[MD021]
                                    ,[MD022]
                                    ,[MD023]
                                    ,[MD024]
                                    ,[MD025]
                                    ,[MD026]
                                    ,[MD027]
                                    ,[MD028]
                                    ,[MD029]
                                    ,[MD030]
                                    ,[MD031]
                                    ,[MD032]
                                    ,[MD033]
                                    ,[MD034]
                                    ,[MD035]
                                    ,[MD036]
                                    ,[MD037]
                                    ,[MD038]
                                    )

                                    SELECT 
                                    [BOMMK].[COMPANY]
                                    ,[BOMMK].[CREATOR]
                                    ,[BOMMK].[USR_GROUP]
                                    ,[BOMMK].[CREATE_DATE]
                                    ,[BOMMK].[MODIFIER]
                                    ,[BOMMK].[MODI_DATE]
                                    ,[BOMMK].[FLAG]
                                    ,[BOMMK].[CREATE_TIME]
                                    ,[BOMMK].[MODI_TIME]
                                    ,[BOMMK].[TRANS_TYPE]
                                    ,[BOMMK].[TRANS_NAME]
                                    ,[BOMMK].[sync_date]
                                    ,[BOMMK].[sync_time]
                                    ,[BOMMK].[sync_mark]
                                    ,[BOMMK].[sync_count]
                                    ,[BOMMK].[DataUser]
                                    ,[BOMMK].[DataGroup]
                                    ,MK001 [MD001]
                                    ,MK002 [MD002]
                                    ,MK003 [MD003]
                                    ,MB004 [MD004]
                                    ,MB072 [MD005]
                                    ,MK006 [MD006]
                                    ,MK007 [MD007]
                                    ,MK008 [MD008]
                                    ,MK009 [MD009]
                                    ,'1' [MD010]
                                    ,MK011 [MD011]
                                    ,MK012 [MD012]
                                    ,MK013 [MD013]
                                    ,MK014 [MD014]
                                    ,MK015 [MD015]
                                    ,MK015 [MD016]
                                    ,MK017 [MD017]
                                    ,MK018 [MD018]
                                    ,MK020 [MD019]
                                    ,MK021 [MD020]
                                    ,MK022 [MD021]
                                    ,MK023 [MD022]
                                    ,MK024 [MD023]
                                    ,MK025 [MD024]
                                    ,MK026 [MD025]
                                    ,MK027 [MD026]
                                    ,MK028 [MD027]
                                    ,MK029 [MD028]
                                    ,'' [MD029]
                                    ,'' [MD030]
                                    ,'' [MD031]
                                    ,'N' [MD032]
                                    ,'' [MD033]
                                    ,0 [MD034]
                                    ,MB002 [MD035]
                                    ,MB003 [MD036]
                                    ,'' [MD037]
                                    ,0 [MD038]
                                    FROM [TK].[dbo].[BOMMK],[TK].[dbo].INVMB
                                    WHERE MK003=MB001
                                    AND MK001=@MK001

                                    UPDATE  [TK].dbo.BOMMJ
                                    SET
                                    UDF01=@UDF01
                                    ,UDF02=@UDF02
                                    WHERE MJ001=@MJ001 

                                    UPDATE  [TK].dbo.BOMMC
                                    SET
                                    UDF01=@UDF01
                                    ,UDF02=@UDF02
                                    WHERE MC001=@MC001

            
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@MJ001", SqlDbType.NVarChar).Value = MJ001;
                    command.Parameters.Add("@MK001", SqlDbType.NVarChar).Value = MJ001;
                    command.Parameters.Add("@UDF01", SqlDbType.NVarChar).Value = UDF01;
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = UDF02;
                    command.Parameters.Add("@MC001", SqlDbType.NVarChar).Value = MJ001;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_MOCTA_BOMTB_BOMTC()
        {

            string TA001 = "";
            string TA002 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";

            DataTable DT = FIND_UOF_MOCTA_BOMTB_BOMTC();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TA001 = DR["TA001_FieldValue"].ToString().Trim();
                    TA002 = DR["TA002_FieldValue"].ToString().Trim();

                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    FIND_UOF_MOCTA_BOMTB_BOMTC_EXE(TA001, TA002, DOC_NBR, ACCOUNT);
                }
            }
        }

        public DataTable FIND_UOF_MOCTA_BOMTB_BOMTC()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                            SELECT 
                                                [FORM_NAME],
                                                [DOC_NBR],
                                                [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA001_FieldValue,
                                                [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA002_FieldValue,

                                                TASK_ID,
                                                TASK_STATUS,
                                                TASK_RESULT
                                                FROM[UOF].[dbo].TB_WKF_TASK
                                                LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                                LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                                WHERE[FORM_NAME] = 'BOM10.BOM變更單'
                                                AND TASK_STATUS = '2'
                                                AND TASK_RESULT = '0'

                                            )

                                            SELECT TEMP.*, 
                                            (
                                                SELECT TOP 1[TB_EB_USER].ACCOUNT
                                                FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                                LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                                    ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                            WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                            ORDER BY FINISH_TIME DESC
                                            ) AS ACCOUNT
                                            FROM TEMP
                                            WHERE 1=1
                                            AND TA002_FieldValue>='20240901001'
                                            AND REPLACE(TA001_FieldValue+TA002_FieldValue,' ','') NOT IN
                                                (
                                                    SELECT REPLACE(TA001+TA002,' ','')

                                                    FROM [192.168.1.105].[TK].dbo.BOMTA
		                                            WHERE TA007 IN ('Y')
                                                )

                                            

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void FIND_UOF_MOCTA_BOMTB_BOMTC_EXE(string TA001,string TA002, string DOC_NBR, string ACCOUNT)
        {
            SqlConnection sqlConn = new SqlConnection();

            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;
            string TA010 = ACCOUNT;
            //string UDF01 = MODIFIER + "，已簽核:" + DateTime.Now.ToString("yyyyMMdd HH:mm:ss");
            //string UDF02 = FORMID;


            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);
            
            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"  

            
                                        ");

            DataTable dt = SEARCH_BOMTA_BOMTB_BOMTC(TA001, TA002);
            foreach (DataRow DRDATA in dt.Rows)
            {
                queryString.AppendFormat(@"

                                            UPDATE [TK].dbo.BOMMC
                                            SET MC001=TB004
                                            ,MC002=TB005
                                            ,MC003=TB006
                                            ,MC004=TB008
                                            ,MC005=TB009
                                            ,MC006=TB001
                                            ,MC007=TB002
                                            ,MC008=TB003
                                            ,MC009=TB007
                                            ,MC010=TB010
                                            ,MODI_DATE=TA003
                                            ,FLAG=FLAG+1 
                                            ,COMPANY=TEMP.COMPANY
                                            ,MODIFIER=TEMP.MODIFIER 
                                            ,MODI_TIME=TEMP.MODI_TIME 
                                            ,MC024=MB002 
                                            ,MC025=MB003
                                            FROM 
                                            (
                                            SELECT BOMTA.COMPANY,BOMTA.MODIFIER,BOMTA.MODI_TIME,TA001,TA002,TA003,TA005,TA006
                                            ,TB001,TB002,TB003,TB004,TB005,TB006,TB007,TB008,TB009,TB010,TB104
                                            ,MB002,MB003
                                            FROM [TK].dbo.BOMTA,[TK].dbo.BOMTB,[TK].dbo.INVMB
                                            WHERE TA001=TB001 AND TA002=TB002 
                                            AND TB004=MB001
                                            AND TA001='{0}' AND TA002='{1}'
                                            AND TB004='{2}'
                                            )  AS TEMP 
                                            WHERE MC001=TEMP.TB004
                                            AND MC001='{2}'

                                           
                                            INSERT INTO [TK].dbo.BOMMD 
                                            (MD001,MD002,MD003,MD004,MD005,MD006,MD007,MD008,MD009,MD010 
                                            ,MD011,MD012,MD013,MD014,MD015,MD016,MD017,MD018,MD019,MD020
                                            ,MD021,MD022,MD023,MD029,MD035,MD036
                                            ,COMPANY ,CREATOR ,USR_GROUP ,CREATE_DATE ,FLAG, CREATE_TIME, MODI_TIME, TRANS_TYPE, TRANS_NAME ) 

                                            SELECT 
                                            TB004 MD001,TC004 MD002,TC005 MD003,TC006 MD004,TC007 MD005,TC008 MD006,TC009 MD007,TC010 MD008,TC011 MD009,TC012 MD010 
                                            ,TC013 MD011,TC014 MD012,TC015 MD013,TC016 MD014,TC017 MD015,TC018 MD016,TC019 MD017,TC020 MD018,TC021 MD019,TC022 MD020
                                            ,TC023 MD021,TC024 MD022,TC025 MD023,TC032 MD029,MB002 MD035,MB003 MD036
                                            ,BOMTA.COMPANY ,BOMTA.CREATOR ,BOMTA.USR_GROUP ,BOMTA.CREATE_DATE ,BOMTA.FLAG, BOMTA.CREATE_TIME, BOMTA.MODI_TIME, 'P004' TRANS_TYPE, 'BOMI04' TRANS_NAME 

                                            FROM [TK].dbo.BOMTA,[TK].dbo.BOMTB,[TK].dbo.BOMTC
                                            LEFT JOIN [TK].dbo.INVMB ON TC005=MB001
                                            WHERE TA001=TB001 AND TA002=TB002 AND TA001=TC001 AND TA002=TC002 AND TB003=TC003
                                            AND TA001='{0}' AND TA002='{1}'
                                            AND TB004='{2}'
                                            AND TC004 NOT IN (SELECT MD002 FROM [TK].dbo.BOMMD WHERE  MD001='{2}')


                                        
                                            UPDATE [TK].dbo.BOMMD  
                                            SET MD001=TB004 
                                            ,MD002=TC004 
                                            ,MD003=TC005
                                            ,MD004=TC006
                                            ,MD005=TC007
                                            ,MD006=TC008 
                                            ,MD007=TC009 
                                            ,MD008=TC010
                                            ,MD009=TC011
                                            ,MD010=TC012
                                            ,MD011=TC013
                                            ,MD012=TC014
                                            ,MD013=TC015
                                            ,MD014=TC016
                                            ,MD015=TC017
                                            ,MD016=TC018
                                            ,MD017=TC019
                                            ,MD018=TC020
                                            ,MD019=TC021
                                            ,MD020=TC022
                                            ,MD021=TC023
                                            ,MD022=TC024
                                            ,MD023=TC025
                                            ,MD029=TC032
                                            ,MD035=MB002
                                            ,MD036=MB003  
                                            ,FLAG=FLAG+1
                                            ,COMPANY=TEMP.COMPANY
                                            ,MODIFIER=TEMP.MODIFIER
                                            ,MODI_DATE=TEMP.MODI_DATE  
                                            ,MODI_TIME=TEMP.MODI_TIME 
                                            FROM 
                                            (
                                            SELECT BOMTA.COMPANY,BOMTA.MODIFIER,BOMTA.MODI_DATE,BOMTA.MODI_TIME,TA001,TA002,TA003,TA005,TA006
                                            ,TB004,TB005,TB006,TB007,TB008,TB009,TB010,TB104
                                            ,TC004,TC005,TC006,TC007,TC008,TC009,TC010
                                            ,TC011,TC012,TC013,TC014,TC015,TC016,TC017,TC018,TC019,TC020
                                            ,TC021,TC022,TC023,TC024,TC025,TC032
                                            ,TC104,TC105
                                            ,MB002,MB003
                                            FROM [TK].dbo.BOMMD,[TK].dbo.BOMTA,[TK].dbo.BOMTB,[TK].dbo.BOMTC
                                            LEFT JOIN [TK].dbo.INVMB ON TC005=MB001
                                            WHERE TA001=TB001 AND TA002=TB002 AND TA001=TC001 AND TA002=TC002 AND TB003=TC003
                                            AND MD001=TB004 AND MD002=TC004
                                            AND ISNULL(TC005,'')<>''
                                            AND TA001='{0}' AND TA002='{1}'
                                            AND TB004='{2}'
                                            ) AS TEMP
                                            WHERE MD001=TEMP.TB004
                                            AND MD002=TEMP.TC004
                                            AND MD001='{2}'

                                       
                                            DELETE [TK].dbo.BOMMD
                                            FROM (
                                            SELECT TB004,TC004
                                            FROM [TK].dbo.BOMMD,[TK].dbo.BOMTA,[TK].dbo.BOMTB,[TK].dbo.BOMTC
                                            LEFT JOIN [TK].dbo.INVMB ON TC005=MB001
                                            WHERE TA001=TB001 AND TA002=TB002 AND TA001=TC001 AND TA002=TC002 AND TB003=TC003
                                            AND MD001=TB004 AND MD002=TC004
                                            AND ISNULL(TC005,'')=''
                                            AND TA001='{0}' AND TA002='{1}'
                                            AND TB004='{2}'
                                            ) AS TEMP
                                            WHERE BOMMD.MD001=TEMP.TB004
                                            AND BOMMD.MD002=TEMP.TC004
                                            AND BOMMD.MD001='{2}'

                                          


                                        ", DRDATA["TA001"].ToString(), DRDATA["TA002"].ToString(), DRDATA["TB004"].ToString());
            }


            queryString.AppendFormat(@"

                                        UPDATE [TK].dbo.BOMTA
                                        SET TA007='Y',UDF02='{2}',TA010='{3}'
                                        WHERE TA001='{0}' AND  TA002='{1}'

                                        UPDATE [TK].dbo.BOMTB
                                        SET TB012='Y'
                                        WHERE TB001='{0}' AND  TB002='{1}'


                                        UPDATE [TK].dbo.BOMMC
                                        SET BOMMC.UDF03=BOMTBUDF03
                                        FROM 
                                        (
                                        SELECT TA001,TA002,TB004,BOMTB.UDF03 AS 'BOMTBUDF03'
                                        FROM [TK].dbo.BOMTA,[TK].dbo.BOMTB
                                        WHERE TA001=TB001 AND TA002=TB002
                                        AND ISNULL(BOMTB.UDF03 ,'')<>''
                                        AND TA001='{0}'AND TA002='{1}'

                                        ) AS TEMP
                                        WHERE TEMP.TB004=BOMMC.MC001


                                        UPDATE [TK].dbo.BOMMC
                                        SET BOMMC.UDF04=BOMTBUDF04
                                        FROM 
                                        (
                                        SELECT TA001,TA002,TB004,BOMTB.UDF04 AS 'BOMTBUDF04'
                                        FROM [TK].dbo.BOMTA,[TK].dbo.BOMTB
                                        WHERE TA001=TB001 AND TA002=TB002
                                        AND ISNULL(BOMTB.UDF04 ,'')<>''
                                        AND TA001='{0}'AND TA002='{1}'

                                        ) AS TEMP
                                        WHERE TEMP.TB004=BOMMC.MC001


                                        UPDATE [TK].dbo.BOMMC
                                        SET BOMMC.UDF05=BOMTBUDF05
                                        FROM 
                                        (
                                        SELECT TA001,TA002,TB004,BOMTB.UDF05 AS 'BOMTBUDF05'
                                        FROM [TK].dbo.BOMTA,[TK].dbo.BOMTB
                                        WHERE TA001=TB001 AND TA002=TB002
                                        AND ISNULL(BOMTB.UDF05 ,'')<>''
                                        AND TA001='{0}'AND TA002='{1}'

                                        ) AS TEMP
                                        WHERE TEMP.TB004=BOMMC.MC001

                                        ", TA001, TA002, FORMID, TA010);



            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
               

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }
        public DataTable SEARCH_BOMTA_BOMTB_BOMTC(string TA001,string TA002)
        {
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //SqlConnection sqlConn = new SqlConnection();

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);


                sbSql.Clear();
                sbSqlQuery.Clear();

                //庫存數量看LA009 IN ('20004','20006','20008','20019','20020'

                sbSql.AppendFormat(@"  
                                    SELECT TA001,TA002,TA003,TA005,TA006
                                    ,TB001,TB002,TB003,TB004,TB005,TB006,TB007,TB008,TB009,TB010,TB104
                                    ,MB002,MB003
                                    FROM [TK].dbo.BOMTA,[TK].dbo.BOMTB,[TK].dbo.INVMB
                                    WHERE TA001=TB001 AND TA002=TB002 
                                    AND TB004=MB001
                                    AND TA001='{0}' AND TA002='{1}'
                              
                                    ", TA001, TA002);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_COMPA_1003()
        {
            string sd004 = "";
            string sd010 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";

            DataTable DT = FIND_UOF_COMPA_1003();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    sd004 = DR["sd004"].ToString().Trim();
                    sd010 = DR["sd010"].ToString().Trim();

                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    UPDATE_COMPA_1003_EXE(sd004, sd010, DOC_NBR, ACCOUNT);
                }
            }
        }

        public DataTable FIND_UOF_COMPA_1003()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
	                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""sd004""]/@fieldValue)[1]', 'NVARCHAR(100)') AS sd004,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""sd010""]/@fieldValue)[1]', 'NVARCHAR(100)') AS sd010,


                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                            FROM[UOF].[dbo].TB_WKF_TASK
                                            LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                            LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                            WHERE[FORM_NAME] = '1003.客戶信用額度變更申請單'
                                            AND TASK_STATUS = '2'
                                            AND TASK_RESULT = '0'
                                            AND TASK_RESULT = '0'

                                        )
                                        SELECT TEMP.*,
                                        (
                                            SELECT TOP 1[TB_EB_USER].ACCOUNT
                                            FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                            LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                                ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                        WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                        ORDER BY FINISH_TIME DESC
                                        ) AS ACCOUNT
                                        , COPMA.MA001,COPMA.MA033
                                        FROM TEMP
                                        LEFT JOIN[192.168.1.105].[TK].dbo.COPMA ON MA001=sd004
                                        WHERE 1=1
                                        AND sd010<>MA033



                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_COMPA_1003_EXE(string MA001,string MA033, string DOC_NBR, string ACCOUNT)
        {

            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;

            string UDF01 = MODIFIER + "，已簽核:" + DateTime.Now.ToString("yyyyMMdd HH:mm:ss");
            string UDF02 = FORMID;


            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"    
                                    UPDATE [TK].dbo.COPMA
                                    SET MA033=@MA033, FLAG=FLAG+1 ,MODI_DATE=@MODI_DATE, MODI_TIME=@MODI_TIME                                     
                                    WHERE MA001=@MA001

            
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@MA001", SqlDbType.NVarChar).Value = MA001;
                    command.Parameters.Add("@MA033", SqlDbType.NVarChar).Value = MA033;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = MODI_DATE;
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = MODI_TIME;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_COPTA_COPTB()
        {
            string TA001 = "";
            string TA002 = "";
            string MB009 = "";
            string DOC_NBR = "";
            string ACCOUNT = "";

            DataTable DT = FIND_UOF_COPTA_COPTB();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TA001 = DR["TA001"].ToString().Trim();
                    TA002 = DR["TA002"].ToString().Trim();
                    MB009 = DR["TA003"].ToString().Trim();

                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    UPDATE_COPTA_COPTB_EXE(TA001, TA002, MB009, DOC_NBR, ACCOUNT);
                }
            }
        }

        public DataTable FIND_UOF_COPTA_COPTB()
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
	                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA001,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA002,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA003""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA003,


                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'COP01.報價單'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*,
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TA001+TA002,',','')  IN
                                    (
                                    SELECT REPLACE(TA001+TA002,' ' ,'')
                                    FROM[192.168.1.105].[TK].dbo.COPTA
                                    WHERE TA019 IN('N')

                                    )


                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_COPTA_COPTB_EXE(string TA001, string TA002,string MB009, string DOC_NBR, string ACCOUNT)
        {

            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            string MODIFIER = ACCOUNT;
            string FORMID = DOC_NBR;

            string TC027 = "Y";
            string TC048 = "N";
            string TD021 = "Y";           
            string MB012 = "報價單" + TA001 + '-' + TA002;


            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"    
                                    UPDATE [TK].dbo.COPTB
                                        SET TB011=@TB011
                                        ,FLAG=FLAG+1,MODIFIER=@MODIFIER,MODI_DATE=@MODI_DATE,MODI_TIME=@MODI_TIME
                                        WHERE TB001=@TB001 AND TB002=@TB002

                                        UPDATE [TK].dbo.COPTA
                                        SET TA016=@TA016,TA019=@TA019,TA029=@TA029,TA015=@TA015
                                        ,FLAG=FLAG+1,MODIFIER=@MODIFIER,MODI_DATE=@MODI_DATE,MODI_TIME=@MODI_TIME
                                        ,UDF02=@UDF02
                                        WHERE TA001=@TA001 AND TA002=@TA002

                                        INSERT INTO [TK].dbo.COPMB
                                        (MB001, MB002, MB003, MB004, MB005, MB007, MB008, MB009,  MB010, MB012, MB013, MB014, MB015, MB016, MB017, MB018,  COMPANY ,CREATOR ,USR_GROUP ,CREATE_DATE ,FLAG) 
                                        SELECT TA004 MB001,TB004 MB002,TB008 MB003,TA007 MB004,'' MB005,TB013 MB007,TB009 MB008,TA003 MB009,''  MB010,('報價單'+TA001+'-'+TA002) MB012,(CASE WHEN TA022='1' THEN 'Y' ELSE 'N' END) MB013,'' MB014,0 MB015,0 MB016,TB016 MB017,'' MB018,'TK'  COMPANY ,TA005 CREATOR ,MV004 USR_GROUP ,CONVERT(NVARCHAR,GETDATE(),112) CREATE_DATE ,1 FLAG
                                        FROM [TK].dbo.COPTA,[TK].dbo.COPTB,[TK].dbo.CMSMV
                                        WHERE 1=1
                                        AND TA001=TB001 AND TA002=TB002
                                        AND MV001=TA005
                                        AND TA001=@TA001 AND TA002=@TA002
                                        AND TA004+TB004+TB008+TA007+TB016 NOT IN 
                                        (
                                        SELECT LTRIM(RTRIM(MB001))+LTRIM(RTRIM(MB002))+LTRIM(RTRIM(MB003))+LTRIM(RTRIM(MB004))+LTRIM(RTRIM(MB017))
                                        FROM [TK].dbo.COPMB
                                        )

                                        UPDATE [TK].dbo.COPMB
                                        SET MB009=@MB009,MB012=@MB012
                                        WHERE LTRIM(RTRIM(MB001))+LTRIM(RTRIM(MB002))+LTRIM(RTRIM(MB003))+LTRIM(RTRIM(MB004))+LTRIM(RTRIM(MB017)) IN 
                                        (
                                        SELECT TA004+TB004+TB008+TA007+TB016
                                        FROM [TK].dbo.COPTA,[TK].dbo.COPTB,[TK].dbo.CMSMV
                                        WHERE 1=1
                                        AND TA001=TB001 AND TA002=TB002
                                        AND MV001=TA005
                                        AND TA001=@TA001 AND TA002=@TA002
                                        )

                                        INSERT INTO [TK].dbo.COPMC
                                        (MC001, MC002, MC003, MC004, MC005, MC006, MC007, MC008, MC009,  COMPANY ,CREATOR ,USR_GROUP ,CREATE_DATE ,FLAG) 
                                        SELECT TA004 MC001,TB004 MC002,TB008 MC003,TA007 MC004,TK004 MC005,TK006 MC006,'' MC007,TK005 MC008,TB016 MC009,'TK'  COMPANY ,TA005 CREATOR ,MV004 USR_GROUP ,CONVERT(NVARCHAR,GETDATE(),112) CREATE_DATE ,1 FLAG
                                        FROM [TK].dbo.COPTA,[TK].dbo.COPTB,[TK].dbo.CMSMV,[TK].dbo.COPTK 
                                        WHERE 1=1
                                        AND TA001=TB001 AND TA002=TB002
                                        AND MV001=TA005
                                        AND TK001=TB001 AND TK002=TB002 AND TK003=TB003
                                        AND TA001=@TA001 AND TA002=@TA002
                                        AND TA004+TB004+TB008+TA007+TK004+TK006+TB016  NOT IN 
                                        (
                                        SELECT LTRIM(RTRIM(MC001))+LTRIM(RTRIM(MC002))+LTRIM(RTRIM(MC003))+LTRIM(RTRIM(MC004))+LTRIM(RTRIM(MC005))+LTRIM(RTRIM(MC009))
                                        FROM [TK].dbo.COPMC
                                        )
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TA001", SqlDbType.NVarChar).Value = TA001;
                    command.Parameters.Add("@TA002", SqlDbType.NVarChar).Value = TA002;
                    command.Parameters.Add("@TA015", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@TB001", SqlDbType.NVarChar).Value = TA001;
                    command.Parameters.Add("@TB002", SqlDbType.NVarChar).Value = TA002;
                    command.Parameters.Add("@TB011", SqlDbType.NVarChar).Value = "Y";
                    command.Parameters.Add("@TA016", SqlDbType.NVarChar).Value = "Y";
                    command.Parameters.Add("@TA019", SqlDbType.NVarChar).Value = "Y";
                    command.Parameters.Add("@TA029", SqlDbType.NVarChar).Value = "N";
                    command.Parameters.Add("@MB009", SqlDbType.NVarChar).Value = MB009;
                    command.Parameters.Add("@MB012", SqlDbType.NVarChar).Value = MB012;
                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = DateTime.Now.ToString("yyyyMMdd");
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = DateTime.Now.ToString("HH:mm:ss");
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_COPTC_COPTD()
        {
            string TC001 = null;
            string TC002 = null;
            string MOC = null;
            string PUR = null;
            string TC040 = null;
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            DataTable DT = FIND_UOF_COPTC_COPTD();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TC001 = DR["TC001"].ToString().Trim();
                    TC002 = DR["TC002"].ToString().Trim();
                    MOC = DR["MOC"].ToString().Trim();
                    PUR = DR["PUR"].ToString().Trim();
                    TC040= DR["ACCOUNT"].ToString();
                    MODIFIER = DR["ACCOUNT"].ToString();

                    DOC_NBR = DR["DOC_NBR"].ToString();
                    ACCOUNT = DR["ACCOUNT"].ToString();

                    UPDATE_COPTC_COPTD_EXE(TC001, TC002, DOC_NBR, MODIFIER, MOC, PUR, TC040);
                }
            }
        }

        public DataTable FIND_UOF_COPTC_COPTD()
        {
            string YYMM = DateTime.Now.ToString("yyyyMM");
            YYMM = YYMM.Substring(2,4);

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
	                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC001,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC002,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""MOC""]/@fieldValue)[1]', 'NVARCHAR(100)') AS MOC,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""PUR""]/@fieldValue)[1]', 'NVARCHAR(100)') AS PUR,


                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'COP10.訂單'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                        AND[DOC_NBR] LIKE '%{0}%'

                                    )
                                    SELECT TEMP.*,
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TC001+TC002,',','')  IN
                                    (
                                    SELECT REPLACE(TC001+TC002,' ' ,'')
                                    FROM[192.168.1.105].[TK].dbo.COPTC
                                    WHERE TC027 IN('N')

                                    )




                                    ", YYMM);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_COPTC_COPTD_EXE(string TC001, string TC002, string FORMID, string MODIFIER, string MOC, string PUR, string TC040)
        {

            string TC027 = "Y";
            string TC048 = "N";
            string TD021 = "Y";
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");

            if (!string.IsNullOrEmpty(MOC))
            {
                MOC = DateTime.Now.ToString("MM/dd") + ":" + MOC + " ";
            }
            if (!string.IsNullOrEmpty(PUR))
            {
                PUR = DateTime.Now.ToString("MM/dd") + ":" + PUR + " ";
            }

       

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"    
                                     UPDATE [TK].dbo.COPTC
                                        SET TC027=@TC027,TC048=@TC048, FLAG=FLAG+1,COMPANY=@COMPANY,MODIFIER=@MODIFIER ,MODI_DATE=@MODI_DATE, MODI_TIME=@MODI_TIME 
                                        ,UDF03=@FORMID
                                        ,UDF05=SUBSTRING((UDF05+' '+@MOC+' '+@PUR+' '),1,250)
                                        ,TC040=@TC040

                                        WHERE TC001=@TC001 AND TC002=@TC002

                                        UPDATE [TK].dbo.COPTD 
                                        SET TD021=@TD021, FLAG=FLAG+1,COMPANY=@COMPANY,MODIFIER=@MODIFIER ,MODI_DATE=@MODI_DATE, MODI_TIME=@MODI_TIME 
                                        WHERE TD001=@TC001 AND TD002=@TC002
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TC002;
                    command.Parameters.Add("@FORMID", SqlDbType.NVarChar).Value = FORMID;
                    command.Parameters.Add("@TC027", SqlDbType.NVarChar).Value = TC027;
                    command.Parameters.Add("@TC048", SqlDbType.NVarChar).Value = TC048;
                    command.Parameters.Add("@TD021", SqlDbType.NVarChar).Value = TD021;
                    command.Parameters.Add("@COMPANY", SqlDbType.NVarChar).Value = COMPANY;
                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = MODI_DATE;
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = MODI_TIME;
                    command.Parameters.Add("@MOC", SqlDbType.NVarChar).Value = MOC;
                    command.Parameters.Add("@PUR", SqlDbType.NVarChar).Value = PUR;
                    command.Parameters.Add("@TC040", SqlDbType.NVarChar).Value = TC040;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_COPTC_MOC_PUR()
        {
            string TC001 = null;
            string TC002 = null;
            string MOC = null;
            string PUR = null;
            string TC040 = null;
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            DataTable DT = FIND_UOF_COPTC_MOC_PUR();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TC001 = DR["TC001"].ToString().Trim();
                    TC002 = DR["TC002"].ToString().Trim();
                    MOC = DR["MOC"].ToString().Trim();
                    PUR = DR["PUR"].ToString().Trim();


                    UPDATE_COPTC_MOC_PUR_EXE(TC001, TC002, MOC, PUR);
                }
            }
        }

        public DataTable FIND_UOF_COPTC_MOC_PUR()
        {
            string YY = DateTime.Now.ToString("yyyy");
            YY = YY.Substring(2, 4);

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
	                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC001,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC002,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""MOC""]/@fieldValue)[1]', 'NVARCHAR(100)') AS MOC,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""PUR""]/@fieldValue)[1]', 'NVARCHAR(100)') AS PUR,


                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                            FROM[UOF].[dbo].TB_WKF_TASK
                                            LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                            LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                            WHERE[FORM_NAME] = 'COP10.訂單'
                                            AND TASK_STATUS = '2'
                                            AND TASK_RESULT = '0'

                                            AND[DOC_NBR] LIKE '%{0}%'

                                        )
                                        SELECT TEMP.*,
                                        (
                                            SELECT TOP 1[TB_EB_USER].ACCOUNT
                                            FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                            LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                                ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                            
                                            WHERE 1=1
	                                        AND ISNULL([TB_WKF_TASK_NODE].ACTUAL_SIGNER,'')<>''
	                                        AND [TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                        ORDER BY FINISH_TIME DESC
                                        ) AS ACCOUNT
                                        FROM TEMP
                                        LEFT JOIN[192.168.1.105].[TK].dbo.COPTC ON REPLACE(COPTC.TC001+COPTC.TC002,',','')= REPLACE(TEMP.TC001+TEMP.TC002,' ' ,'')
                                        WHERE 1=1
                                        AND COPTC.UDF05<>SUBSTRING((' '+MOC+' '+PUR+' '),1,250)
                                  
                                 

                                    




                                    ", YY);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_COPTC_MOC_PUR_EXE(string TC001, string TC002, string MOC, string PUR)
        {

            string TC027 = "Y";
            string TC048 = "N";
            string TD021 = "Y";
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");

            if (!string.IsNullOrEmpty(MOC))
            {
                MOC = DateTime.Now.ToString("MM/dd") + ":" + MOC + " ";
            }
            if (!string.IsNullOrEmpty(PUR))
            {
                PUR = DateTime.Now.ToString("MM/dd") + ":" + PUR + " ";
            }



            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"    
                                      UPDATE [TK].dbo.COPTC
                                        SET UDF05=SUBSTRING((UDF05+' '+@MOC+' '+@PUR+' '),1,250)
                                        WHERE TC001=@TC001 AND TC002=@TC002
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TC002;
                    command.Parameters.Add("@MOC", SqlDbType.NVarChar).Value = MOC;
                    command.Parameters.Add("@PUR", SqlDbType.NVarChar).Value = PUR;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_COPTE_COPTF()
        {
            string TE001 = null;
            string TE002 = null;
            string TE003 = null;
            string TE039 = null;
            string MOC = null;
            string PUR = null;
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            DataTable DT = FIND_UOF_COPTE_COPTF();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TE001 = DR["TE001"].ToString().Trim();
                    TE002 = DR["TE002"].ToString().Trim();
                    TE003 = DR["TE003"].ToString().Trim();
                    MOC = DR["MOC"].ToString().Trim();
                    PUR = DR["PUR"].ToString().Trim();
                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["ACCOUNT"].ToString().Trim();
                    TE039 = DR["ACCOUNT"].ToString().Trim();
                    MODIFIER = DR["ACCOUNT"].ToString().Trim();

                    UPDATE_COPTE_COPTF_EXE(TE001, TE002, TE003, DOC_NBR, MODIFIER, MOC, PUR, TE039);
                }
            }
        }

        public DataTable FIND_UOF_COPTE_COPTF()
        {
            string YYMM = DateTime.Now.ToString("yyyyMM");
            YYMM = YYMM.Substring(2, 4);

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
	                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TE001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TE001,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TE002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TE002,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TE003""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TE003,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""MOC""]/@fieldValue)[1]', 'NVARCHAR(100)') AS MOC,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""PUR""]/@fieldValue)[1]', 'NVARCHAR(100)') AS PUR,


                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'COP20.訂單變更單 '
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                        AND[DOC_NBR] LIKE '%{0}%'

                                    )
                                    SELECT TEMP.*,
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP

                                    WHERE 1=1
                                    AND REPLACE(TEMP.TE001+TEMP.TE002++TEMP.TE003,' ' ,'') IN
                                    (
                                        SELECT REPLACE (COPTE.TE001+COPTE.TE002+COPTE.TE003,',','')

                                        FROM [192.168.1.105].[TK].dbo.COPTE
                                    WHERE TE029 IN('N')
                                    )
                

                                    ", YYMM);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_COPTE_COPTF_EXE(string TE001, string TE002, string TE003, string FORMID, string MODIFIER, string MOC, string PUR, string TE039)
        {

            string TE029 = "Y";
            string TE044 = "N";
            string TF019 = "Y";
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");


            if (!string.IsNullOrEmpty(MOC))
            {
                MOC = DateTime.Now.ToString("MM/dd") + ":" + MOC + " ";
            }
            if (!string.IsNullOrEmpty(PUR))
            {
                PUR = DateTime.Now.ToString("MM/dd") + ":" + PUR + " ";
            }



            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"    
                                           --INSERT COPTD
                                    INSERT INTO [TK].dbo.COPTD
                                    (
                                    COMPANY,CREATOR,USR_GROUP,CREATE_DATE,FLAG,CREATE_TIME,MODI_TIME,TRANS_TYPE,TRANS_NAME,DataGroup
                                    ,TD001,TD002,TD003,TD004,TD005,TD006,TD007,TD008,TD010
                                    ,TD011,TD012,TD013,TD014,TD015,TD016,TD020
                                    ,TD021,TD023,TD024,TD026,TD027,TD028,TD029,TD030
                                    ,TD031,TD032,TD034,TD036,TD049,TD050,TD052
                                    ,TD088,TD089,TD090,TD091,TD092,TD093,TD094,TD095,TD096 ,TD097
                                    ) 

                                    SELECT COMPANY ,CREATOR ,USR_GROUP ,CREATE_DATE ,FLAG ,CREATE_TIME, MODI_TIME, TRANS_TYPE, TRANS_NAME,DataGroup
                                    ,TF001 TD001,TF002 TD002,TF104 TD003,TF005 TD004,TF006 TD005,TF007 TD006,TF008 TD007,TF009 TD008,TF010 TD010
                                    ,TF013 TD011,TF014 TD012,TF015 TD013,TF016 TD014,TF063 TD015,TF017 TD016,TF032 TD020
                                    ,'Y' TD021,TF012 TD023,TF020 TD026,TF021 TD027,TF022 TD028,TF064 TD029,TF023 TD029,TF024 TD030
                                    ,TF024 TD031,TF026 TD032,TF027 TD034,TF028 TD036,TF044 TD049,TF045 TD050,TF046 TD052
                                    ,TF183 TD088,TF184 TD089,TF185 TD090,TF186 TD091,TF187 TD092,TF188 TD093,TF189 TD094,TF194 TD095,TF195 TD096,TF137 TD097
                                    FROM [TK].dbo.COPTF
                                    WHERE TF001+TF002+TF104 NOT IN (SELECT TD001+TD002+TD003 FROM [TK].dbo.COPTD  WHERE TD001=@TD001 AND TD002=@TD002 )
                                    AND TF001=@TF001 AND TF002=@TF002 AND TF003=@TF003

                                    --更新COPTC
                                    UPDATE [TK].dbo.COPTC
                                    SET TC004=TE007,TC005=TE008,TC006=TE009,TC007=TE010,TC008=TE011
                                    ,TC009=TE012,TC010=TE013,TC011=TE014,TC012=TE015,TC013=TE016
                                    ,TC014=TE017,TC015=TE050,TC016=TE018,TC017=TE019,TC018=TE020
                                    ,TC019=TE021,TC020=TE022,TC021=TE023,TC022=TE024,TC023=TE025
                                    ,TC024=TE026,TC025=TE027,TC026=TE028,TC032=TE031,TC033=TE032
                                    ,TC034=TE033,TC035=TE034,TC036=TE035,TC037=TE036,TC038=TE037
                                    ,TC041=TE040,TC042=TE041,TC045=TE042,TC047=TE043,TC053=TE055
                                    ,TC054=TE047,TC055=TE048,TC056=TE049,TC057=TE183,TC058=TE184
                                    ,TC063=TE056,TC064=TE057,TC065=TE058,TC066=TE059,TC070=TE079 
                                    ,TC074=TE085,TC079=TE070,TC094=TE081,TC095=TE082,TC099=TE185
                                    ,TC104=TE084,TC105=TE086,TC113=TE087,TC114=TE088,TC115=TE196
                                    ,TC116=TE197
                                    ,FLAG=COPTC.FLAG+1
                                    FROM [TK].dbo.COPTE
                                    WHERE TC001=TE001 AND TC002=TE002
                                    AND TE001=@TE001 AND TE002=@TE002 AND TE003=@TE003

                                    --更新COPTD
                                    UPDATE [TK].dbo.COPTD
                                    SET TD004=TF005,TD005=TF006,TD006=TF007,TD007=TF008,TD008=TF009
                                    ,TD010=TF010,TD011=TF013,TD012=TF014,TD013=TF015,TD014=TF016
                                    ,TD015=TF063,TD016=TF017,TD020=TF032,TD023=TF012,TD024=TF020
                                    ,TD026=TF021,TD027=TF022,TD028=TF064,TD029=TF023,TD030=TF024
                                    ,TD031=TF025,TD032=TF026,TD034=TF027,TD036=TF028,TD049=TF044
                                    ,TD050=TF045,TD052=TF046,TD088=TF183,TD089=TF184,TD091=TF186
                                    ,TD092=TF187,TD093=TF188,TD094=TF189,TD095=TF194,TD096=TF195 
                                    ,TD097=TF137,TD090=TF185 
                                    ,FLAG=COPTD.FLAG+1
                                    FROM [TK].dbo.COPTF
                                    WHERE TD001+TD002+TD003=TF001+TF002+TF104
                                    AND TF001=@TF001 AND TF002=@TF002 AND TF003=@TF003

                                    UPDATE [TK].dbo.COPTE
                                    SET TE029=@TE029,TE044=@TE044, FLAG=FLAG+1,COMPANY=@COMPANY,MODIFIER=@MODIFIER ,MODI_DATE=@MODI_DATE, MODI_TIME=@MODI_TIME 
                                    ,TE039=@TE039
                                    WHERE TE001=@TE001 AND TE002=@TE002 AND TE003=@TE003

                                    UPDATE [TK].dbo.COPTF 
                                    SET TF019=@TF019, FLAG=FLAG+1,COMPANY=@COMPANY,MODIFIER=@MODIFIER ,MODI_DATE=@MODI_DATE, MODI_TIME=@MODI_TIME 
                                    WHERE TF001=@TF001 AND TF002=@TF002 AND TF003=@TF003

                                    --更新COPTC的未稅、稅額、總金額
                                    UPDATE [TK].dbo.COPTC
                                    SET TC029=(CASE WHEN TC016='1' THEN (SELECT ISNULL(ROUND(SUM(TD012)/(1+TC041),0),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002) 
                                    ELSE CASE WHEN TC016='2' THEN (SELECT ISNULL(SUM(TD012),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002) 
                                    ELSE CASE WHEN TC016='3' THEN (SELECT ISNULL(SUM(TD012),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002) 
                                    ELSE CASE WHEN TC016='4' THEN (SELECT ISNULL(SUM(TD012),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002) 
                                    ELSE CASE WHEN TC016='9' THEN (SELECT ISNULL(SUM(TD012),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002) 
                                    END
                                    END
                                    END 
                                    END
                                    END)
                                    ,TC030=(CASE WHEN TC016='1' THEN (SELECT (ISNULL(SUM(TD012),0)-ISNULL(ROUND(SUM(TD012)/(1+TC041),0),0)) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002) 
                                    ELSE CASE WHEN TC016='2' THEN (SELECT ISNULL(ROUND(SUM(TD012)*TC041,0),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002) 
                                    ELSE CASE WHEN TC016='3' THEN 0 
                                    ELSE CASE WHEN TC016='4' THEN 0
                                    ELSE CASE WHEN TC016='9' THEN 0 
                                    END
                                    END
                                    END 
                                    END
                                    END)
                                    ,TC031=(CASE WHEN TC016='1' THEN (SELECT ISNULL(SUM(TD012),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002) 
                                    ELSE CASE WHEN TC016='2' THEN (SELECT (ISNULL(SUM(TD012),0)+ISNULL(ROUND(SUM(TD012)*TC041,0),0)) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002) 
                                    ELSE CASE WHEN TC016='3' THEN (SELECT ISNULL(SUM(TD012),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002) 
                                    ELSE CASE WHEN TC016='4' THEN (SELECT ISNULL(SUM(TD012),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002) 
                                    ELSE CASE WHEN TC016='9' THEN (SELECT ISNULL(SUM(TD012),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002)  
                                    END
                                    END
                                    END 
                                    END
                                    END)
                                    WHERE TC001=@TE001 AND TC002=@TE002

                                    --更新COPTC總數量總數量、毛重(Kg)、材積(CUFT)
                                    UPDATE [TK].dbo.COPTC
                                    SET TC031=(SELECT ISNULL(SUM(TD008+TD024),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002)
                                    ,TC043=(SELECT ISNULL(SUM(TD030),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002)
                                    ,TC044=(SELECT ISNULL(SUM(TD031),0) FROM [TK].dbo.COPTD WHERE TD001+TD002=TC001+TC002)
                                    WHERE TC001=@TE001 AND TC002=@TE002

                                    --如果變更單指定結案，原訂單也指定結案
                                    UPDATE [TK].dbo.COPTD
                                    SET TD016='y'
                                    FROM [TK].dbo.COPTE
                                    WHERE TD001+TD002=TE001+TE002
                                    AND TE005='Y'
                                    AND TE001=@TE001 AND TE002=@TE002   AND TE003=@TE003

                                    --更新變單表單的編號到COPTD、COPTE
                                    --更新PUR、MOC備註到COPTD、COPTE

                                    UPDATE [TK].dbo.COPTC
                                    SET UDF04=@FORMID,UDF05=SUBSTRING((UDF05+' '+@MOC+' '+@PUR+' '),1,250)
                                    WHERE TC001=@TC001 AND TC002=@TC002
 
                                    UPDATE [TK].dbo.COPTE
                                    SET UDF02=@FORMID,UDF05=SUBSTRING((@MOC+' '+@PUR),1,250)
                                    WHERE TE001=@TE001 AND TE002=@TE002  AND TE003=@TE003
                    
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TE001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TE002;
                    command.Parameters.Add("@TD001", SqlDbType.NVarChar).Value = TE001;
                    command.Parameters.Add("@TD002", SqlDbType.NVarChar).Value = TE002;
                    command.Parameters.Add("@TE001", SqlDbType.NVarChar).Value = TE001;
                    command.Parameters.Add("@TE002", SqlDbType.NVarChar).Value = TE002;
                    command.Parameters.Add("@TE003", SqlDbType.NVarChar).Value = TE003;
                    command.Parameters.Add("@TF001", SqlDbType.NVarChar).Value = TE001;
                    command.Parameters.Add("@TF002", SqlDbType.NVarChar).Value = TE002;
                    command.Parameters.Add("@TF003", SqlDbType.NVarChar).Value = TE003;
                    command.Parameters.Add("@TE029", SqlDbType.NVarChar).Value = TE029;
                    command.Parameters.Add("@TE044", SqlDbType.NVarChar).Value = TE044;
                    command.Parameters.Add("@TF019", SqlDbType.NVarChar).Value = TF019;
                    command.Parameters.Add("@FORMID", SqlDbType.NVarChar).Value = FORMID;
                    command.Parameters.Add("@COMPANY", SqlDbType.NVarChar).Value = COMPANY;
                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = MODI_DATE;
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = MODI_TIME;
                    command.Parameters.Add("@MOC", SqlDbType.NVarChar).Value = MOC;
                    command.Parameters.Add("@PUR", SqlDbType.NVarChar).Value = PUR;
                    command.Parameters.Add("@TE039", SqlDbType.NVarChar).Value = TE039;



                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_COPTE_MOC_PUR()
        {

            string TE001 = null;
            string TE002 = null;
            string TE003 = null;
          
            string MOC = null;
            string PUR = null;
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            DataTable DT = FIND_UOF_COPTE_MOC_PUR();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TE001 = DR["TE001"].ToString().Trim();
                    TE002 = DR["TE002"].ToString().Trim();
                    TE003 = DR["TE003"].ToString().Trim();
                    MOC = DR["MOC"].ToString().Trim();
                    PUR = DR["PUR"].ToString().Trim();
                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["ACCOUNT"].ToString().Trim();                 
                    MODIFIER = DR["ACCOUNT"].ToString().Trim();

                    UPDATE_COPTE_MOC_PUR_EXE(TE001, TE002, TE003, DOC_NBR, MODIFIER, MOC, PUR);
                }
            }
        }

        public DataTable FIND_UOF_COPTE_MOC_PUR()
        {
            string YYMM = DateTime.Now.ToString("yyyy");
            YYMM = YYMM.Substring(2, 2);

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
	                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TE001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TE001,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TE002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TE002,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TE003""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TE003,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""MOC""]/@fieldValue)[1]', 'NVARCHAR(100)') AS MOC,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""PUR""]/@fieldValue)[1]', 'NVARCHAR(100)') AS PUR,


                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'COP20.訂單變更單 '
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                        AND[DOC_NBR] LIKE '%24%'

                                    )
                                    SELECT TEMP.*,
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    , COPTE.UDF05
                                     FROM TEMP
                                     LEFT JOIN[192.168.1.105].[TK].dbo.COPTE ON REPLACE(COPTE.TE001+COPTE.TE002+COPTE.TE003,',','')=REPLACE(TEMP.TE001+TEMP.TE002++TEMP.TE003,' ' ,'')
                                    WHERE 1=1
                                    AND COPTE.UDF05<>SUBSTRING((MOC+' '+PUR+' '),1,250)
                

                                    ", YYMM);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_COPTE_MOC_PUR_EXE(string TE001, string TE002, string TE003, string DOC_NBR, string MODIFIER, string MOC, string PUR)
        {

         
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");


            if (!string.IsNullOrEmpty(MOC))
            {
                MOC = DateTime.Now.ToString("MM/dd") + ":" + MOC + " ";
            }
            if (!string.IsNullOrEmpty(PUR))
            {
                PUR = DateTime.Now.ToString("MM/dd") + ":" + PUR + " ";
            }



            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"   
                                    --更新變單表單的編號到COPTD、COPTE
                                    --更新PUR、MOC備註到COPTD、COPTE

                                    UPDATE [TK].dbo.COPTC
                                    SET UDF05=SUBSTRING((UDF05+' '+@MOC+' '+@PUR+' '),1,250)
                                    WHERE TC001=@TC001 AND TC002=@TC002
 
                                    UPDATE [TK].dbo.COPTE
                                    SET UDF05=SUBSTRING((@MOC+' '+@PUR),1,250)
                                    WHERE TE001=@TE001 AND TE002=@TE002  AND TE003=@TE003
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TE001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TE002;
                    command.Parameters.Add("@TE001", SqlDbType.NVarChar).Value = TE001;
                    command.Parameters.Add("@TE002", SqlDbType.NVarChar).Value = TE002;
                    command.Parameters.Add("@TE003", SqlDbType.NVarChar).Value = TE003;
                    command.Parameters.Add("@MOC", SqlDbType.NVarChar).Value = MOC;
                    command.Parameters.Add("@PUR", SqlDbType.NVarChar).Value = PUR;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void ADD_TKRESEARCH_TBSAMPLE()
        {
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            string FORMID;
            string DV01;
            string DV02;
            string DV03;
            string DV04;
            string DV05;
            string DV06;
            string DV07;
            string DV08;
            string DV09;
            string DV10;
            string DVV01;
            string DVV02;
            string DVV03;
            string DVV04;
            string DVV05;
            string DVV06;
            string DVV07;
            string DVV08;
            string ISCLOSE;

            DataTable DT = FIND_UOF_TKRESEARCH_TBSAMPLE();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    DV01 = DR["DV01"].ToString().Trim();
                    DV02 = DR["DV02"].ToString().Trim();
                    DV03 = DR["DV03"].ToString().Trim();
                    DV04 = DR["DV04"].ToString().Trim();
                    DV05 = DR["DV05"].ToString().Trim();
                    DV06 = DR["DV06"].ToString().Trim();
                    DV07 = DR["DV07"].ToString().Trim();
                    DV08 = DR["DV08"].ToString().Trim();
                    DV09 = DR["DV09"].ToString().Trim();
                    DV10 = DR["DV10"].ToString().Trim();

                    DVV01 = DR["DVV01_FieldValue"].ToString().Trim();
                    DVV02 = DR["DVV02_FieldValue"].ToString().Trim();
                    DVV03 = DR["DVV03_FieldValue"].ToString().Trim();
                    DVV04 = DR["DVV04_FieldValue"].ToString().Trim();
                    DVV05 = DR["DVV05_FieldValue"].ToString().Trim();
                    DVV06 = DR["DVV06_FieldValue"].ToString().Trim();
                    DVV07 = DR["DVV07_FieldValue"].ToString().Trim();
                    DVV08 = DR["DVV08_FieldValue"].ToString().Trim();
                  
                    ISCLOSE = "N";

                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["ACCOUNT"].ToString().Trim();
                    MODIFIER = DR["ACCOUNT"].ToString().Trim();
                    FORMID = DR["DOC_NBR"].ToString().Trim();

                    ADD_TKRESEARCH_TBSAMPLE_EXE(FORMID, DV01, DV02, DV03, DV04, DV05, DV06, DV07, DV08, DV09, DV10, DVV01, DVV02, DVV03, DVV04, DVV05, DVV06, DVV07, DVV08, ISCLOSE);
                }
            }
        }

        public DataTable FIND_UOF_TKRESEARCH_TBSAMPLE()
        {
            string YY = DateTime.Now.ToString("yyyy");
            YY = YY.Substring(2, 2);

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                        SELECT 
                                            [FORM_NAME],
                                            [DOC_NBR],
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""DV01""]/@fieldValue)[1]', 'NVARCHAR(100)') AS DV01,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""DV02""]/@fieldValue)[1]', 'NVARCHAR(100)') AS DV02,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""DV03""]/@fieldValue)[1]', 'NVARCHAR(100)') AS DV03,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""DV04""]/@fieldValue)[1]', 'NVARCHAR(100)') AS DV04,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""DV05""]/@fieldValue)[1]', 'NVARCHAR(100)') AS DV05,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""DV06""]/@fieldValue)[1]', 'NVARCHAR(100)') AS DV06,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""DV07""]/@fieldValue)[1]', 'NVARCHAR(100)') AS DV07,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""DV08""]/@fieldValue)[1]', 'NVARCHAR(100)') AS DV08,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""DV09""]/@fieldValue)[1]', 'NVARCHAR(100)') AS DV09,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""DV10""]/@fieldValue)[1]', 'NVARCHAR(100)') AS DV10,

                                            --展開 DETAILS DataGrid 中的每一行，並限制每個 Cell 只取第一個值
                                            DETAILS.value('(Cell[@fieldId=""DVV01""]/@fieldValue)[1]', 'NVARCHAR(MAX)') AS DVV01_FieldValue,
                                            DETAILS.value('(Cell[@fieldId=""DVV02""]/@fieldValue)[1]', 'NVARCHAR(MAX)') AS DVV02_FieldValue,
                                            DETAILS.value('(Cell[@fieldId=""DVV03""]/@fieldValue)[1]', 'NVARCHAR(MAX)') AS DVV03_FieldValue,
                                            DETAILS.value('(Cell[@fieldId=""DVV04""]/@fieldValue)[1]', 'NVARCHAR(MAX)') AS DVV04_FieldValue,
                                            DETAILS.value('(Cell[@fieldId=""DVV05""]/@fieldValue)[1]', 'NVARCHAR(MAX)') AS DVV05_FieldValue,
                                            DETAILS.value('(Cell[@fieldId=""DVV06""]/@fieldValue)[1]', 'NVARCHAR(MAX)') AS DVV06_FieldValue,
                                            DETAILS.value('(Cell[@fieldId=""DVV07""]/@fieldValue)[1]', 'NVARCHAR(MAX)') AS DVV07_FieldValue,
                                            DETAILS.value('(Cell[@fieldId=""DVV08""]/@fieldValue)[1]', 'NVARCHAR(MAX)') AS DVV08_FieldValue,

                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        CROSS APPLY[CURRENT_DOC].nodes('/Form/FormFieldValue/FieldItem[@fieldId=""DETAILS""]/DataGrid/Row') AS T(DETAILS)-- 展開每個 Row
                                        WHERE[FORM_NAME] = '1004.無品號試吃製作申請單'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'
                                        AND[DOC_NBR] LIKE '%24%'
                                    )
                                    SELECT TEMP.*,
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE([DOC_NBR]+DVV01_FieldValue,' ','')  COLLATE Chinese_Taiwan_Stroke_BIN NOT IN
                                    (
                                    SELECT REPLACE(FORMID+DVV01,' ','')
                                    FROM[192.168.1.105].[TKRESEARCH].[dbo].[TBSAMPLE]
                                    )
                                                                        ", YY);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void ADD_TKRESEARCH_TBSAMPLE_EXE(string FORMID, string DV01, string DV02, string DV03, string DV04, string DV05, string DV06, string DV07, string DV08, string DV09, string DV10, string DVV01, string DVV02, string DVV03, string DVV04, string DVV05, string DVV06, string DVV07, string DVV08, string ISCLOSE)
        {
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");


            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"   
                                     INSERT INTO [TKRESEARCH].[dbo].[TBSAMPLE]
                                    ([FORMID]
                                    ,[DV01],[DV02],[DV03],[DV04],[DV05],[DV06],[DV07],[DV08],[DV09],[DV10]
                                    ,[DVV01],[DVV02],[DVV03],[DVV04],[DVV05],[DVV06],[DVV07],[DVV08]
                                    ,[ISCLOSE])
                                    VALUES 
                                    (@FORMID
                                    ,@DV01,@DV02,@DV03,@DV04,@DV05,@DV06,@DV07,@DV08,@DV09,@DV10
                                    ,@DVV01,@DVV02,@DVV03,@DVV04,@DVV05,@DVV06,@DVV07,@DVV08
                                    ,@ISCLOSE)
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@FORMID", SqlDbType.NVarChar).Value = FORMID;
                    command.Parameters.Add("@DV01", SqlDbType.NVarChar).Value = DV01;
                    command.Parameters.Add("@DV02", SqlDbType.NVarChar).Value = DV02;
                    command.Parameters.Add("@DV03", SqlDbType.NVarChar).Value = DV03;
                    command.Parameters.Add("@DV04", SqlDbType.NVarChar).Value = DV04;
                    command.Parameters.Add("@DV05", SqlDbType.NVarChar).Value = DV05;
                    command.Parameters.Add("@DV06", SqlDbType.NVarChar).Value = DV06;
                    command.Parameters.Add("@DV07", SqlDbType.NVarChar).Value = DV07;
                    command.Parameters.Add("@DV08", SqlDbType.NVarChar).Value = DV08;
                    command.Parameters.Add("@DV09", SqlDbType.NVarChar).Value = DV09;
                    command.Parameters.Add("@DV10", SqlDbType.NVarChar).Value = DV10;
                    command.Parameters.Add("@DVV01", SqlDbType.NVarChar).Value = DVV01;
                    command.Parameters.Add("@DVV02", SqlDbType.NVarChar).Value = DVV02;
                    command.Parameters.Add("@DVV03", SqlDbType.NVarChar).Value = DVV03;
                    command.Parameters.Add("@DVV04", SqlDbType.NVarChar).Value = DVV04;
                    command.Parameters.Add("@DVV05", SqlDbType.NVarChar).Value = DVV05;
                    command.Parameters.Add("@DVV06", SqlDbType.NVarChar).Value = DVV06;
                    command.Parameters.Add("@DVV07", SqlDbType.NVarChar).Value = DVV07;
                    command.Parameters.Add("@DVV08", SqlDbType.NVarChar).Value = DVV08;
                    command.Parameters.Add("@ISCLOSE", SqlDbType.NVarChar).Value = ISCLOSE;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_MOCTA()
        {
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            string FORMID;
            string TA001;
            string TA002;
            
            string ISCLOSE;

            DataTable DT = FIND_UOF_MOCTA();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TA001 = DR["TA001"].ToString().Trim();
                    TA002 = DR["TA002"].ToString().Trim();

                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["ACCOUNT"].ToString().Trim();
                    MODIFIER = DR["ACCOUNT"].ToString().Trim();
                    FORMID = DR["DOC_NBR"].ToString().Trim();

                    UPDATE_MOCTA_EXE(TA001, TA002, FORMID, MODIFIER);
                }
            }
        }

        public DataTable FIND_UOF_MOCTA()
        {
           
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
	                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA001,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA002,


                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'MOCI02.製令單'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*,
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                    WHERE[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                    ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TA001+TA002,',','')  IN
                                    (
                                    SELECT REPLACE(TA001+TA002,' ' ,'')
                                    FROM[192.168.1.105].[TK].dbo.MOCTA
                                    WHERE TA013 IN('N')

                                    )

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_MOCTA_EXE(string TA001, string TA002, string FORMID, string MODIFIER)
        {
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");

            string TA013 = "Y";
            string TC048 = "N";
            string TB018 = "Y";


            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"   
                                     UPDATE [TK].dbo.MOCTA
                                        SET TA013=@TA013,TA040=TA003,TA041=@TA041,TA049=@TA049
                                        ,UDF03=@UDF03
                                        ,FLAG=FLAG+1
                                        ,COMPANY=@COMPANY,MODIFIER=@MODIFIER ,MODI_DATE=@MODI_DATE, MODI_TIME=@MODI_TIME
                                        WHERE TA001=@TA001 AND TA002=@TA002

                                        UPDATE [TK].dbo.MOCTB
                                        SET TB018=@TB018
                                        ,FLAG=FLAG+1
                                        ,COMPANY=@COMPANY,MODIFIER=@MODIFIER ,MODI_DATE=@MODI_DATE, MODI_TIME=@MODI_TIME 
                                        WHERE TB001=@TB001 AND TB002=@TB002

                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TA001", SqlDbType.NVarChar).Value = TA001;
                    command.Parameters.Add("@TA002", SqlDbType.NVarChar).Value = TA002;
                    command.Parameters.Add("@TB001", SqlDbType.NVarChar).Value = TA001;
                    command.Parameters.Add("@TB002", SqlDbType.NVarChar).Value = TA002;
                    command.Parameters.Add("@TA013", SqlDbType.NVarChar).Value = TA013;

                    command.Parameters.Add("@TA041", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@TA049", SqlDbType.NVarChar).Value = "N";
                    command.Parameters.Add("@TB018", SqlDbType.NVarChar).Value = TB018;

                    command.Parameters.Add("@COMPANY", SqlDbType.NVarChar).Value = "TK";
                    command.Parameters.Add("@MODIFIER", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@MODI_DATE", SqlDbType.NVarChar).Value = DateTime.Now.ToString("yyyyMMdd");
                    command.Parameters.Add("@MODI_TIME", SqlDbType.NVarChar).Value = DateTime.Now.ToString("HH:mm:ss");
                    command.Parameters.Add("@UDF03", SqlDbType.NVarChar).Value = FORMID;
                    

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_PURTA_PORTB()
        {
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            string FORMID;
            string TA001;
            string TA002;

            string ISCLOSE;

            DataTable DT = FIND_UOF_PURTA_PORTB();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TA001 = DR["TA001"].ToString().Trim();
                    TA002 = DR["TA002"].ToString().Trim();

                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["ACCOUNT"].ToString().Trim();
                    MODIFIER = DR["ACCOUNT"].ToString().Trim();
                    FORMID = DR["DOC_NBR"].ToString().Trim();

                    UPDATE_PURTA_PORTB_EXE(TA001, TA002, FORMID, MODIFIER);
                }
            }
        }

        public DataTable FIND_UOF_PURTA_PORTB()
        {

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
	                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA001,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA002,


                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'PUR10.請購單申請'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*,
                                    (
                                        SELECT TOP 1 [TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER

                                        WHERE 1=1
                                        AND ISNULL([TB_WKF_TASK_NODE].ACTUAL_SIGNER,'')<>''
	                                    AND [TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                       ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TA001+TA002,',','')  IN
                                    (                                      
                                        SELECT REPLACE(TA001+TA002,' ' ,'')
                                        FROM[192.168.1.105].[TK].dbo.PURTA
                                        WHERE TA007 IN('N')
                                    )                                   

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_PURTA_PORTB_EXE(string TA001, string TA002, string FORMID, string MODIFIER)
        {
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");
            

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"   
                                        UPDATE [TK].dbo.PURTA 
                                        SET TA007='Y'
                                        ,TA016='3'
                                        ,TA014=@TA014
                                        ,UDF02=@UDF02
                                        WHERE TA001=@TA001 AND TA002=@TA002 

                                        UPDATE [TK].dbo.PURTB 
                                        SET TB025='Y' 
                                        WHERE TB001=@TA001 AND TB002=@TA002 

                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TA001", SqlDbType.NVarChar).Value = TA001;
                    command.Parameters.Add("@TA002", SqlDbType.NVarChar).Value = TA002;
                    command.Parameters.Add("@TA014", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_PURTA_PURTB_CHANGE()
        {
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            string FORMID = null;
            string TA001 = null;
            string TA002 = null;
            string VERSIONS = null;
            string TA006 = null;
            string TB003 = null;
            string TB004 = null;
            string TB007 = null;
            string TB009 = null;
            string TB011 = null;
            string TB012 = null;
            string TA014 = null;
            string ADDSQL = null;
           

            
            string ISCLOSE;

            //DataTable DT = FIND_UOF_PURTA_PORTB_CHANGE();

            DataTable DT_DETAILS = FIND_UOF_PURTA_PORTB_CHANGE_DETAILS("PURTACHANGE202507010001");

            //先新增/變更，請購變更的明細
            if (DT_DETAILS != null && DT_DETAILS.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT_DETAILS.Rows)
                {
                    TA001 = DR["TA001"].ToString().Trim();
                    TA002 = DR["TA002"].ToString().Trim();
                    VERSIONS = DR["VERSIONS"].ToString().Trim();
                    TA006 = DR["TA006"].ToString().Trim();
                    TB003 = DR["TB003"].ToString().Trim();
                    TB004 = DR["TB004"].ToString().Trim();
                    TB007 = DR["TB007"].ToString().Trim();
                    TB009 = DR["TB009"].ToString().Trim();
                    TB011 = DR["TB011"].ToString().Trim();
                    TB012 = DR["TB012"].ToString().Trim();

                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["ACCOUNT"].ToString().Trim();
                    MODIFIER = DR["ACCOUNT"].ToString().Trim();
                    FORMID = DR["DOC_NBR"].ToString().Trim();

                    if (!string.IsNullOrEmpty(FORMID) && !string.IsNullOrEmpty(TA001) && !string.IsNullOrEmpty(TA002))
                    {
                        ADDSQL = ADDSQL + SETPURTATBUOFCHANGE(FORMID, TA001, TA002, TA006, TB003, TB004, TB009, TB011, TB012, TB007);
                        ADDSQL = ADDSQL + " ";
                    }

                    ADDPURTATBUOFCHANGE(ADDSQL);                                      
                }
            }

            //更新ERP請購單
            //新增ERP採購變更單
            if (DT_DETAILS != null && DT_DETAILS.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT_DETAILS.Rows)
                {
                    TA001 = DR["TA001"].ToString().Trim();
                    TA002 = DR["TA002"].ToString().Trim();
                    VERSIONS = DR["VERSIONS"].ToString().Trim();
                    TA006 = DR["TA006"].ToString().Trim();
                    TA014 = DR["ACCOUNT"].ToString().Trim();


                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["ACCOUNT"].ToString().Trim();
                    MODIFIER = DR["ACCOUNT"].ToString().Trim();
                    FORMID = DR["DOC_NBR"].ToString().Trim();
                  
                    UPDATEPURTATB(FORMID, TA001, TA002, TA014);
                    NEWPURTEPURTF(TA001, TA002, VERSIONS);

                    //UPDATE_PURTA_PORTB_CHANGER_EXE(DOC_NBR, ACCOUNT, MODIFIER, FORMID, TA001, TA002, VERSIONS, TA006, TB003, TB004, TB007, TB009, TB011, TB012);
                }
            }


        }

        public DataTable FIND_UOF_PURTA_PORTB_CHANGE()
        {

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                     WITH TEMP AS (
	                                    SELECT 
		                                    [FORM_NAME],
		                                    [DOC_NBR],
		                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA001,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA002,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""VERSIONS""]/@fieldValue)[1]', 'NVARCHAR(100)') AS VERSIONS,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA006""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA006,                                           

                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT

                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION]
                                            ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM]
                                            ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID                                        
                                        WHERE [FORM_NAME] = 'PUR20.請購單變更單'
                                        AND DOC_NBR >= 'PURTACHANGE202508270002'

                                    )
                                    SELECT TEMP.*,
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER

                                    WHERE 1=1
                                        AND ISNULL([TB_WKF_TASK_NODE].ACTUAL_SIGNER,'')<>''
	                                    AND[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                       ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN
                                    (
                                        SELECT FORMID
                                        FROM [192.168.1.105].[TKPUR].[dbo].[PURTATBUOFCHANGE]
   
                                    )                                    

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public DataTable FIND_UOF_PURTA_PORTB_CHANGE_DETAILS(string START_DOC_NBR)
        {

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                     WITH TEMP AS (
	                                    SELECT 
		                                    [FORM_NAME],
		                                    [DOC_NBR],
		                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA001,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA002,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""VERSIONS""]/@fieldValue)[1]', 'NVARCHAR(100)') AS VERSIONS,
                                            [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA006""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA006,
                                            TB.Row.value('(Cell[@fieldId=""TB003""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TB003, 
                                            TB.Row.value('(Cell[@fieldId=""TB004""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TB004, 
                                            TB.Row.value('(Cell[@fieldId=""TB005""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TB005, 
                                            TB.Row.value('(Cell[@fieldId=""TB007""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TB007,
                                            TB.Row.value('(Cell[@fieldId=""TB009""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TB009, 
                                            TB.Row.value('(Cell[@fieldId=""TB011""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TB011, 
                                            TB.Row.value('(Cell[@fieldId=""TB012""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TB012, 

                                            TASK_ID,
                                            TASK_STATUS,
                                            TASK_RESULT

                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION]
                                            ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM]
                                            ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        CROSS APPLY[CURRENT_DOC].nodes('/Form/FormFieldValue/FieldItem[@fieldId=""TB""]/DataGrid/Row') AS TB(Row)
                                        WHERE[FORM_NAME] = 'PUR20.請購單變更單'
                                        AND DOC_NBR >= 'PURTACHANGE202507010001'

                                    )
                                    SELECT TEMP.*,
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER

                                    WHERE 1=1
                                        AND ISNULL([TB_WKF_TASK_NODE].ACTUAL_SIGNER,'')<>''
	                                    AND[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                       ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN
                                    (
                                        SELECT FORMID
                                        FROM [192.168.1.105].[TKPUR].[dbo].[PURTATBUOFCHANGE]
   
                                    )                                    

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_PURTA_PORTB_CHANGER_EXE(string DOC_NBR, string ACCOUNT, string MODIFIER, string FORMID, string TA001, string TA002, string VERSIONS, string TA006, string TB003, string TB004, string TB007, string TB009, string TB011, string TB012)
        {
            

            //string COMPANY = "TK";
            //string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            //string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");


            ////20210902密
            //Class1 TKID = new Class1();//用new 建立類別實體
            //SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            ////資料庫使用者密碼解密
            //sqlsb.Password = TKID.Decryption(sqlsb.Password);
            //sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            //String connectionString;
            //sqlConn = new SqlConnection(sqlsb.ConnectionString);

            //StringBuilder queryString = new StringBuilder();
            //queryString.AppendFormat(@"   


            //                            ");

            //try
            //{
            //    using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
            //    {

            //        SqlCommand command = new SqlCommand(queryString.ToString(), connection);
            //        command.Parameters.Add("@TA001", SqlDbType.NVarChar).Value = TA001;


            //        command.Connection.Open();

            //        int count = command.ExecuteNonQuery();

            //        connection.Close();
            //        connection.Dispose();

            //    }
            //}
            //catch
            //{

            //}
            //finally
            //{

            //}
        }

        public string SETPURTATBUOFCHANGE(string FORMID, string TA001, string TA002, string TA006, string TB003, string TB004, string TB009, string TB011, string TB012, string TB007)
        {
            StringBuilder SQL = new StringBuilder();
            SQL.AppendFormat(@" 
                                INSERT INTO [TKPUR].[dbo].[PURTATBUOFCHANGE]
                                ([FORMID],[TA001],[TA002],[TA006],[TB003],[TB004],[TB009],[TB011],[TB012],[TB007])
                                VALUES
                                ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}')

                                ", FORMID, TA001, TA002, TA006, TB003, TB004, TB009, TB011, TB012, TB007);

            return SQL.ToString();
        }

        public void ADDPURTATBUOFCHANGE(string ADDSQL)
        {    
            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);
            
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            //StringBuilder queryString = new StringBuilder();
            //queryString.AppendFormat(@"

            //                            ", FORMID);

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(ADDSQL.ToString(), connection);                   

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                   
                }
            }
            catch (Exception EX)
            {

            }
            finally
            {

            }

        }

        public void UPDATEPURTATB(string FORMID, string TA001, string TA002, string TA014)
        {
            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                        UPDATE [TK].[dbo].[PURTA]
                                        SET [PURTA].[TA006]=[PURTATBUOFCHANGE].[TA006], [PURTA].[UDF04]=@FORMID,[TA014]=@TA014
                                        FROM [TKPUR].[dbo].[PURTATBUOFCHANGE]
                                        WHERE [PURTA].TA001=@TA001 AND [PURTA].TA002=@TA002
                                        AND [PURTATBUOFCHANGE].FORMID=@FORMID

                                        UPDATE [TK].[dbo].[PURTB]
                                        SET [PURTB].[TB004]=[PURTATBUOFCHANGE].[TB004],[PURTB].[TB009]=[PURTATBUOFCHANGE].[TB009],[PURTB].[TB011]=[PURTATBUOFCHANGE].[TB011],[PURTB].[TB012]=[PURTATBUOFCHANGE].[TB012]
                                        ,[PURTB].[TB005]=INVMB.MB002
                                        ,[PURTB].[TB006]=INVMB.MB003
                                        ,[PURTB].[TB007]=PURTATBUOFCHANGE.TB007
                                        ,[PURTB].[TB017]=INVMB.MB050 
                                        ,[PURTB].[TB018]=(MB050*[PURTATBUOFCHANGE].[TB009]) 
                                        ,[PURTB].[TB021]='N'
                                        FROM [TKPUR].[dbo].[PURTATBUOFCHANGE],[TK].dbo.INVMB
                                        WHERE [PURTATBUOFCHANGE].TB004=INVMB.MB001
                                        AND [PURTB].TB003=[PURTATBUOFCHANGE].TB003
                                        AND [PURTB].TB001=@TA001 AND [PURTB].TB002=@TA002
                                        AND [PURTATBUOFCHANGE].FORMID=@FORMID

                                        INSERT INTO [TK].[dbo].[PURTB]
                                        (
                                        [COMPANY],[CREATOR],[USR_GROUP],[CREATE_DATE],[MODIFIER],[MODI_DATE],[FLAG],[CREATE_TIME],[MODI_TIME],[TRANS_TYPE],[TRANS_NAME],[sync_date],[sync_time],[sync_mark],[sync_count],[DataUser],[DataGroup]
                                        ,[TB001],[TB002],[TB003],[TB004],[TB005],[TB006],[TB007],[TB008],[TB009],[TB010]
                                        ,[TB011],[TB012],[TB013],[TB014],[TB015],[TB016],[TB017],[TB018],[TB019],[TB020]
                                        ,[TB021],[TB022],[TB023],[TB024],[TB025],[TB026],[TB027],[TB028],[TB029],[TB030]
                                        ,[TB031],[TB032],[TB033],[TB034],[TB035],[TB036],[TB037],[TB038],[TB039],[TB040]
                                        ,[TB041],[TB042],[TB043],[TB044],[TB045],[TB046],[TB047],[TB048],[TB049],[TB050]
                                        ,[TB051],[TB052],[TB053],[TB054],[TB055],[TB056],[TB057],[TB058],[TB059],[TB060]
                                        ,[TB061],[TB062],[TB063],[TB064],[TB065],[TB066],[TB067],[TB068],[TB069],[TB070]
                                        ,[TB071],[TB072],[TB073],[TB074],[TB075],[TB076],[TB077],[TB078],[TB079],[TB080]
                                        ,[TB081],[TB082],[TB083],[TB084],[TB085],[TB086],[TB087],[TB088],[TB089],[TB090]
                                        ,[TB091],[TB092],[TB093],[TB094],[TB095],[TB096],[TB097],[TB098],[TB099]
                                        ,[UDF01],[UDF02],[UDF03],[UDF04],[UDF05],[UDF06],[UDF07],[UDF08],[UDF09],[UDF10]
                                        )
                                        SELECT [PURTB].[COMPANY],[PURTB].[CREATOR],[PURTB].[USR_GROUP],[PURTB].[CREATE_DATE],[PURTB].[MODIFIER],[PURTB].[MODI_DATE],[PURTB].[FLAG],[PURTB].[CREATE_TIME],[PURTB].[MODI_TIME],[PURTB].[TRANS_TYPE],[PURTB].[TRANS_NAME],[PURTB].[sync_date],[PURTB].[sync_time],[PURTB].[sync_mark],[PURTB].[sync_count],[PURTB].[DataUser],[PURTB].[DataGroup]
                                        ,[TB001],[TB002],[PURTATBUOFCHANGE].[TB003] TB003,[PURTATBUOFCHANGE].[TB004] TB004,INVMB.MB002 [TB005],INVMB.MB003 [TB006],[PURTATBUOFCHANGE].[TB007]  [TB007],[TB008],[PURTATBUOFCHANGE].[TB009] TB009,MB032 [TB010]
                                        ,[PURTATBUOFCHANGE].[TB011] TB011,[PURTATBUOFCHANGE].[TB012] TB012,[TB013],[TB014],[TB015],[TB016],MB050 [TB017],(MB050*[PURTATBUOFCHANGE].[TB009]) [TB018], [TB019],[TB020]
                                        ,[TB021],[TB022],[TB023],[TB024],'Y' [TB025],[TB026],[TB027],[TB028],[TB029],[TB030]
                                        ,[TB031],[TB032],[TB033],[TB034],[TB035],[TB036],[TB037],[TB038],[TB039],[TB040]
                                        ,[TB041],[TB042],[TB043],[TB044],[TB045],[TB046],[TB047],[TB048],[TB049],[TB050]
                                        ,[TB051],[TB052],[TB053],[TB054],[TB055],[TB056],[TB057],[TB058],[TB059],[TB060]
                                        ,[TB061],[TB062],[TB063],[TB064],[TB065],[TB066],[TB067],[TB068],[TB069],[TB070]
                                        ,[TB071],[TB072],[TB073],[TB074],[TB075],[TB076],[TB077],[TB078],[TB079],[TB080]
                                        ,[TB081],[TB082],[TB083],[TB084],[TB085],[TB086],[TB087],[TB088],[TB089],[TB090]
                                        ,[TB091],[TB092],[TB093],[TB094],[TB095],[TB096],[TB097],[TB098],[TB099]
                                        ,[PURTB].[UDF01],[PURTB].[UDF02],[PURTB].[UDF03],[PURTB].[UDF04],[PURTB].[UDF05],[PURTB].[UDF06],[PURTB].[UDF07],[PURTB].[UDF08],[PURTB].[UDF09],[PURTB].[UDF10]
                                        FROM [TK].[dbo].[PURTB],[TKPUR].[dbo].[PURTATBUOFCHANGE],[TK].dbo.INVMB
                                        WHERE [PURTATBUOFCHANGE].TA001=[PURTB].TB001 AND [PURTATBUOFCHANGE].TA002=[PURTB].TB002  AND [PURTB].TB003=(SELECT TOP 1 TB003 FROM [TK].[dbo].[PURTB] WHERE  [PURTB].TB001=@TA001 AND [PURTB].TB002=@TA002)
                                        AND [PURTATBUOFCHANGE].TB004=INVMB.MB001
                                        AND [PURTATBUOFCHANGE].TB003 NOT IN (SELECT TB003 FROM [TK].[dbo].[PURTB] WHERE TB001=@TA001 AND TB002=@TA002)
                                        AND [PURTB].TB001=@TA001 AND [PURTB].TB002=@TA002
                                        AND [PURTATBUOFCHANGE].FORMID=@FORMID

                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);

                    command.Parameters.Add("@FORMID", SqlDbType.NVarChar).Value = FORMID;
                    command.Parameters.Add("@TA001", SqlDbType.NVarChar).Value = TA001;
                    command.Parameters.Add("@TA002", SqlDbType.NVarChar).Value = TA002;
                    command.Parameters.Add("@TA014", SqlDbType.NVarChar).Value = TA014;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }

        }
        public void NEWPURTEPURTF(string TA001, string TA002, string VERSIONS)
        {
            try
            {
                //檢查請購變更單的採購單，是否有採購變更單未核準
                DataTable DTCHECKPURTEPURTF = CHECKPURTEPURTF(TA001, TA002, VERSIONS);

                if (DTCHECKPURTEPURTF == null)
                {
                    //找出請購變更單有幾張採購單，要1對多
                    DataTable DTPURTCPURTD = SEARCHPURTCPURTD(TA001, TA002, VERSIONS);
                    //DataTable DTPURTCPURTD = SEARCHPURTCPURTD("A312", "20221116001", "2");
                    DataTable DTOURTE = new DataTable();

                    //找出採購單跟最大的版次
                    if (DTPURTCPURTD != null && DTPURTCPURTD.Rows.Count > 0)
                    {
                        DTOURTE = FINDPURTE(DTPURTCPURTD);

                        //新增採購變更單
                        if (DTOURTE.Rows.Count > 0)
                        {
                            ADDTOPURTEPURTF(DTOURTE);
                        }
                    }



                }
                else
                {
                  
                }
            }
            catch { }



        }

        public DataTable FIND_SASLA_DEPT30(string DEP)
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp22"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();

                //TL006='N' AND (UDF01 IN ('Y','y') ) 
                if (DEP.Equals("國內"))
                {
                    sbSql.AppendFormat(@" 
                                        SELECT TOP 30 '國內' AS DEPNO,LA006,LA041,SUM(LA017-LA020-LA022-LA023) AS NUM
                                        FROM [TK].dbo.SASLA
                                        WHERE  CONVERT(NVARCHAR,LA015,112)>=  CONVERT(NVARCHAR,YEAR(DATEADD(YEAR, -1, GETDATE())))+'0101'
                                        AND CONVERT(NVARCHAR,LA015,112)<= CONVERT(NVARCHAR,YEAR(DATEADD(YEAR, -1, GETDATE())))+'1231'
                                        AND ( LA006 LIKE '2%' OR LA006 LIKE 'A%')
                                        AND LA007 LIKE '117700%'
                                        GROUP BY LA006,LA041
                                        ORDER BY SUM(LA017-LA020-LA022-LA023) DESC


                                    ");
                }
                else if (DEP.Equals("國外"))
                {
                    sbSql.AppendFormat(@"                                     
                                        SELECT TOP 30 '國外' AS DEPNO,LA006,LA041,SUM(LA017-LA020-LA022-LA023) AS NUM
                                        FROM [TK].dbo.SASLA
                                        WHERE  CONVERT(NVARCHAR,LA015,112)>=  CONVERT(NVARCHAR,YEAR(DATEADD(YEAR, -1, GETDATE())))+'0101'
                                        AND CONVERT(NVARCHAR,LA015,112)<= CONVERT(NVARCHAR,YEAR(DATEADD(YEAR, -1, GETDATE())))+'1231'
                                        AND ( LA006 LIKE '3%' OR LA006 LIKE 'B%')
                                        AND LA007 LIKE '117800%'
                                        GROUP BY LA006,LA041
                                        ORDER BY SUM(LA017-LA020-LA022-LA023) DESC

                                    ");
                }
                else if (DEP.Equals("張協"))
                {
                    sbSql.AppendFormat(@"                                     
                                        SELECT TOP 30 '張協'AS DEPNO,LA006,LA041,SUM(LA017-LA020-LA022-LA023) AS NUM
                                        FROM [TK].dbo.SASLA
                                        WHERE  CONVERT(NVARCHAR,LA015,112)>=  CONVERT(NVARCHAR,YEAR(DATEADD(YEAR, -1, GETDATE())))+'0101'
                                        AND CONVERT(NVARCHAR,LA015,112)<= CONVERT(NVARCHAR,YEAR(DATEADD(YEAR, -1, GETDATE())))+'1231'
                                        AND LA006 IN (
                                        SELECT MA001
                                        FROM [TK].dbo.COPMA
                                        WHERE MA016 LIKE '200050%'
                                        )

                                        GROUP BY LA006,LA041
                                        ORDER BY SUM(LA017-LA020-LA022-LA023) DESC


                                    ");
                }




                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");


                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];
                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }

           
        }

        //當請購單的數量=0，手動結案
        public void UPDATE_PURTA_PURTB_TB039()
        {
            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                        UPDATE  [TK].dbo.PURTB
                                        SET TB039='y'
                                        WHERE  REPLACE(TB001+TB002+TB003,' ','') IN 
                                        (
                                        SELECT REPLACE(TB001+TB002+TB003,' ','')
                                        FROM [TK].dbo.PURTB,[TK].dbo.PURTA
                                        WHERE TA001=TB001 AND TA002=TB002
                                        AND TA007 IN ('N')
                                        AND TB009=0
                                        AND TB039 NOT IN ('y')

                                        )
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);

                    //command.Parameters.Add("@FORMID", SqlDbType.NVarChar).Value = FORMID;                    
                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        //當請購單的需求日，已過期1個月，請購數量=0，手動結案
        public void UPDATE_PURTA_PURTB_TB039_TB009()
        {
            DateTime Lastmonths = DateTime.Now.AddMonths(-1);
            string PUR_DATES = Lastmonths.ToString("yyyyMMdd");

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();
            queryString.AppendFormat(@"
                                        UPDATE  [TK].dbo.PURTB
                                        SET TB039='y',TB009=0
                                        WHERE  REPLACE(TB001+TB002+TB003,' ','') IN 
                                        (
                                        SELECT REPLACE(TB001+TB002+TB003,' ','')
                                        FROM  [TK].dbo.PURTB,[TK].dbo.PURTA
                                        WHERE TA001=TB001 AND TA002=TB002
                                        AND TA007 IN ('N')
                                        AND TB011<='{0}'
                                        AND TB009>0

                                        )
                                        ", PUR_DATES);

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlsb.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);

                    //command.Parameters.Add("@FORMID", SqlDbType.NVarChar).Value = FORMID;                    
                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }


        public void UPDATE_PURTC_PURTD()
        {
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            string FORMID;
            string TC001;
            string TC002;

            string ISCLOSE;

            DataTable DT = FIND_UOF_PURTC_PORTD();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TC001 = DR["TC001"].ToString().Trim();
                    TC002 = DR["TC002"].ToString().Trim();

                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["ACCOUNT"].ToString().Trim();
                    MODIFIER = DR["ACCOUNT"].ToString().Trim();
                    FORMID = DR["DOC_NBR"].ToString().Trim();

                    UPDATE_PURTC_PORTD_EXE(TC001, TC002, FORMID, MODIFIER);
                }
            }
        }

        public DataTable FIND_UOF_PURTC_PORTD()
        {

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
	                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC001,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TC002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TC002,
                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT
                                        FROM [UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN [UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN [UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'PUR40.採購單'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*,
                                    (
                                        SELECT TOP 1 [TB_EB_USER].ACCOUNT
                                        FROM [UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN [UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER

                                        WHERE 1=1
                                        AND ISNULL([TB_WKF_TASK_NODE].ACTUAL_SIGNER,'')<>''
	                                    AND [TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                        ORDER BY FINISH_TIME DESC
                                    ) AS ACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TC001+TC002,',','')  IN
                                    (
                                        SELECT REPLACE(TC001+TC002,' ' ,'')
                                        FROM [192.168.1.105].[TK].dbo.PURTC
                                        WHERE TC014 IN ('N')
                                    )                            

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_PURTC_PORTD_EXE(string TC001, string TC002, string FORMID, string MODIFIER)
        {
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");


            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();

            queryString.AppendFormat(@"   
                                       UPDATE [TK].dbo.PURTC SET TC014='Y' WHERE TC001=@TC001 AND TC002=@TC002 
                                       UPDATE [TK].dbo.PURTD SET TD018='Y' WHERE TD001=@TC001 AND TD002=@TC002 

                                       UPDATE [TK].dbo.PURTC SET UDF02=@UDF02 WHERE TC001=@TC001 AND TC002=@TC002 

                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TC002;
                    //command.Parameters.Add("@TA014", SqlDbType.NVarChar).Value = MODIFIER;
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_UOF_NOT_APPROVED_PURTC_PURTE()
        {
            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");


            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString); 

            StringBuilder queryString = new StringBuilder();

            queryString.AppendFormat(@"   
                                       
                                        ---採購單檔
                                        WITH TEMP AS (
                                            SELECT * 
	                                        FROM OPENQUERY
		                                        (
		                                        [192.168.1.223], 
		                                        '
		                                        SELECT 
				                                        FORM_NAME,
				                                        DOC_NBR,
				                                        CURRENT_DOC.value(''(/Form/FormFieldValue/FieldItem[@fieldId=""TC001""]/@fieldValue)[1]'', ''NVARCHAR(100)'') AS TC001,
                                                        CURRENT_DOC.value(''(/ Form / FormFieldValue / FieldItem[@fieldId = ""TC002""] / @fieldValue)[1]'', ''NVARCHAR(100)'') AS TC002,
                                                        TASK_ID,
                                                        TASK_STATUS,
                                                        TASK_RESULT

                                                    FROM UOF.dbo.TB_WKF_TASK
                                                    LEFT JOIN UOF.dbo.TB_WKF_FORM_VERSION ON TB_WKF_FORM_VERSION.FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                                    LEFT JOIN UOF.dbo.TB_WKF_FORM ON TB_WKF_FORM.FORM_ID = TB_WKF_FORM_VERSION.FORM_ID
                                                    WHERE FORM_NAME = ''PUR40.採購單''
                                                        AND TASK_RESULT  IN(''2'')

                                                    '
                                                )

                                            )


                                        UPDATE[TK].dbo.PURTC
                                        SET TC014 = 'V'
                                        WHERE TC014 = 'N'
                                        AND REPLACE(PURTC.TC001 + PURTC.TC002, ' ', '') IN
                                            (
                                                SELECT REPLACE(PURTC.TC001 + PURTC.TC002, ' ', '')    
                                                FROM[TK].dbo.PURTC, TEMP    
                                                WHERE PURTC.TC014 = 'N'    
                                                AND REPLACE(PURTC.TC001 + PURTC.TC002, ' ', '') = REPLACE(TEMP.TC001 + TEMP.TC002, ' ', '') COLLATE Chinese_Taiwan_Stroke_CI_AS
                                            );

                                       --採購變更單頭資料檔
                                        WITH TEMP AS(
                                            SELECT *
                                                FROM OPENQUERY
                                                    (

                                                    [192.168.1.223],
                                                    '

                                                    SELECT

                                                            FORM_NAME,
                                                            DOC_NBR,
                                                            CURRENT_DOC.value(''(/ Form / FormFieldValue / FieldItem[@fieldId = ""TE001""] / @fieldValue)[1]'', ''NVARCHAR(100)'') AS TE001,
                                                            CURRENT_DOC.value(''(/ Form / FormFieldValue / FieldItem[@fieldId = ""TE002""] / @fieldValue)[1]'', ''NVARCHAR(100)'') AS TE002,
                                                            TASK_ID,
                                                            TASK_STATUS,
                                                            TASK_RESULT
                                                        FROM UOF.dbo.TB_WKF_TASK
                                                        LEFT JOIN UOF.dbo.TB_WKF_FORM_VERSION ON TB_WKF_FORM_VERSION.FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                                        LEFT JOIN UOF.dbo.TB_WKF_FORM ON TB_WKF_FORM.FORM_ID = TB_WKF_FORM_VERSION.FORM_ID
                                                        WHERE FORM_NAME = ''PUR50.採購變更單''
                                                            AND TASK_RESULT  IN(''2'')

                                                        '
                                                    )

                                            )

                                        UPDATE[TK].dbo.PURTE
                                        SET TE017 = 'V'
                                        WHERE TE017 = 'N'
                                        AND REPLACE(PURTE.TE001 + PURTE.TE002, ' ', '') IN
                                            (
                                                SELECT REPLACE(PURTE.TE001 + PURTE.TE002, ' ', '')    
                                                FROM[TK].dbo.PURTE, TEMP    
                                                WHERE PURTE.TE017 = 'N'    
                                                AND REPLACE(PURTE.TE001 + PURTE.TE002, ' ', '') = REPLACE(TEMP.TE001 + TEMP.TE002, ' ', '') COLLATE Chinese_Taiwan_Stroke_CI_AS
                                            )

                                        --主採購已作廢，採購變更也要作廢
                                        UPDATE [TK].dbo.PURTE
                                        SET  TE017='V' 
                                        WHERE TE017='N' 
                                        AND TE001+TE002 IN 
                                        (
                                        SELECT TC001+TC002
                                        FROM [TK].dbo.PURTC
                                        WHERE TC014='V'
)

                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    //command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TC001;
                    //command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TC002;
                    ////command.Parameters.Add("@TA014", SqlDbType.NVarChar).Value = MODIFIER;
                    //command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_PURTE_PURTF()
        {
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            string FORMID;
            string TE001;
            string TE002;
            string TE003;

            string ISCLOSE;

            DataTable DT = FIND_UOF_PURTE_PORTF();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TE001 = DR["TE001"].ToString().Trim();
                    TE002 = DR["TE002"].ToString().Trim();
                    TE003 = DR["TE003"].ToString().Trim();

                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["NOWACCOUNT"].ToString().Trim();
                    MODIFIER = DR["NOWACCOUNT"].ToString().Trim();
                    FORMID = DR["DOC_NBR"].ToString().Trim();

                    UPDATE_PURTE_PORTF_EXE(TE001, TE002, TE003, FORMID, MODIFIER);
                }
            }
        }

        public DataTable FIND_UOF_PURTE_PORTF()
        {

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"                                      
                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
	                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TE001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TE001,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TE002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TE002,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TE003""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TE003,
                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'PUR50.採購變更單'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                    SELECT TEMP.*,
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER

                                    WHERE 1=1
                                        AND ISNULL([TB_WKF_TASK_NODE].ACTUAL_SIGNER,'')<>''
	                                    AND[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                       ORDER BY FINISH_TIME DESC
                                    ) AS NOWACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TE001+TE002+TE003,',','')  IN
                                    (
                                        SELECT REPLACE(TE001+TE002+TE003,' ' ,'')
                                        FROM[192.168.1.105].[TK].dbo.PURTE
                                    WHERE TE017 IN('N')
                                    )                            
                    

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_PURTE_PORTF_EXE(string TE001, string TE002, string TE003, string FORMID, string MODIFIER)
        {
            string TC001 = TE001;
            string TC002 = TE002;
            string TD001 = TE001;
            string TD002 = TE002;
            string TF001 = TE001;
            string TF002 = TE002;
            string TF003 = TE003;

            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();

            queryString.AppendFormat(@"   
                                       --INSERT PURTD

                                        INSERT INTO [TK].dbo.PURTD
                                        (
                                        COMPANY,CREATOR,USR_GROUP,CREATE_DATE,FLAG,CREATE_TIME,MODI_TIME,TRANS_TYPE,TRANS_NAME,DataGroup
                                        ,TD001
                                        ,TD002
                                        ,TD003
                                        ,TD004
                                        ,TD005
                                        ,TD006
                                        ,TD007
                                        ,TD008
                                        ,TD009
                                        ,TD010
                                        ,TD011
                                        ,TD012
                                        ,TD014
                                        ,TD015
                                        ,TD016
                                        ,TD017
                                        ,TD018
                                        ,TD019
                                        ,TD020
                                        ,TD022
                                        ,TD025
                                        )

                                        SELECT 
                                        COMPANY,CREATOR,USR_GROUP,CREATE_DATE,FLAG,CREATE_TIME,MODI_TIME,TRANS_TYPE,TRANS_NAME,DataGroup
                                        ,TF001
                                        ,TF002
                                        ,TF104
                                        ,TF005
                                        ,TF006
                                        ,TF007
                                        ,TF008
                                        ,TF009
                                        ,TF010
                                        ,TF011
                                        ,TF012
                                        ,TF013
                                        ,TF030
                                        ,TF015
                                        ,'N'
                                        ,TF022
                                        ,'Y'
                                        ,TF018
                                        ,TF019
                                        ,TF020
                                        ,TF021
                                        FROM [TK].dbo.PURTF
                                        WHERE TF001=@TF001 AND TF002=@TF002 AND TF003=@TF003
                                        AND TF001+TF002+TF104 NOT IN (SELECT TD001+TD002+TD003  FROM [TK].dbo.PURTD WHERE TD001=@TD001 AND TD002=@TD002)

                                        --UPDATE PURTD

                                        UPDATE [TK].dbo.PURTD
                                        SET 
                                        TD004=TF005
                                        ,TD005=TF006
                                        ,TD006=TF007
                                        ,TD007=TF008
                                        ,TD008=TF009
                                        ,TD009=TF010
                                        ,TD010=TF011
                                        ,TD011=TF012
                                        ,TD012=TF013
                                        ,TD014=TF030
                                        ,TD015=TF015
                                        ,TD017=TF022
                                        ,TD019=TF018
                                        ,TD020=TF019
                                        ,TD022=TF020
                                        ,TD025=TF021
                                        FROM [TK].dbo.PURTF
                                        WHERE TD001=@TD001 AND TD002=@TD002 AND TD003=TF104
                                        AND TF001=@TF001 AND TF002=@TF002 AND TF003=@TF003


                                        --UPDATE PURTC

                                        UPDATE [TK].dbo.PURTC
                                        SET 
                                        TC004=TE005
                                        ,TC005=TE007
                                        ,TC006=TE008
                                        ,TC007=TE009
                                        ,TC008=TE010
                                        ,TC015=TE013
                                        ,TC016=TE014
                                        ,TC017=TE015
                                        ,TC018=TE018
                                        ,TC021=TE019
                                        ,TC022=TE020
                                        ,TC026=TE022
                                        ,TC027=TE023
                                        ,TC028=TE024
                                        ,TC009=TE027
                                        ,TC035=TE029
                                        ,TC011=TE037
                                        ,TC047=TE039
                                        ,TC048=TE040
                                        ,TC050=TE041
                                        ,TC036=TE043
                                        ,TC037=TE045
                                        ,TC038=TE046
                                        ,TC039=TE047
                                        ,TC040=TE048
                                        FROM [TK].dbo.PURTE
                                        WHERE TC001=@TC001 AND TC002=@TC002
                                        AND TE001=@TE001 AND TE002=@TE002 AND TE003=@TE003

                                        --更新PURTC的未稅、稅額、總金額、數量
                                        UPDATE [TK].dbo.PURTC
                                        SET TC019=(CASE WHEN TC018='1' THEN (SELECT ISNULL(ISNULL(ROUND(SUM(TD011)/(1+TC026),0),0),0) FROM [TK].dbo.PURTD WHERE TD001+TD002=TC001+TC002) 
                                                                            ELSE CASE WHEN TC018='2' THEN (SELECT ISNULL(SUM(TD011),0) FROM [TK].dbo.PURTD WHERE TD001+TD002=TC001+TC002) 
                                                                            ELSE CASE WHEN TC018='3' THEN (SELECT ISNULL(SUM(TD011),0) FROM [TK].dbo.PURTD WHERE TD001+TD002=TC001+TC002) 
                                                                            ELSE CASE WHEN TC018='4' THEN (SELECT ISNULL(SUM(TD011),0) FROM [TK].dbo.PURTD WHERE TD001+TD002=TC001+TC002) 
                                                                            ELSE CASE WHEN TC018='9' THEN (SELECT ISNULL(SUM(TD011),0) FROM [TK].dbo.PURTD WHERE TD001+TD002=TC001+TC002)  
                                                                            END
                                                                            END
                                                                            END 
                                                                            END
                                                                            END)
                                        ,TC020=(CASE WHEN TC018='1' THEN (SELECT (ISNULL(SUM(TD011),0)-ISNULL(ROUND(SUM(TD011)/(1+TC026),0),0)) FROM [TK].dbo.PURTD WHERE TD001+TD002=TC001+TC002) 
                                                                            ELSE CASE WHEN TC018='2' THEN (SELECT ISNULL(ROUND(SUM(TD011)*TC026,0),0) FROM [TK].dbo.PURTD WHERE TD001+TD002=TC001+TC002) 
                                                                            ELSE CASE WHEN TC018='3' THEN 0 
                                                                            ELSE CASE WHEN TC018='4' THEN 0
                                                                            ELSE CASE WHEN TC018='9' THEN 0 
                                                                            END
                                                                            END
                                                                            END 
                                                                            END
                                                                            END)
                                        ,TC023=(SELECT ISNULL(SUM(TD008),0) FROM [TK].dbo.PURTD WHERE TD001=TC001 AND TD002=TC002)
                                        WHERE TC001=@TC001 AND TC002=@TC002

                                        --如果變更單整理指定結案，原PURTC也指定結案

                                        UPDATE [TK].dbo.PURTD
                                        SET TD016='y'
                                        FROM [TK].dbo.PURTE
                                        WHERE TD001=@TD001 AND TD002=@TD002
                                        AND TE012='Y'                                    
                                        AND TE001=@TE001 AND TE002=@TE002 AND TE003=@TE003

                                        --如果變更單單身指定結案，原PURTD也指定結案
                                        UPDATE [TK].dbo.PURTD
                                        SET TD016='y'
                                        FROM [TK].dbo.PURTF
                                        WHERE   TD001=@TD001 AND TD002=@TD002
                                        AND TF001=TD001 AND TF002=TD002 AND TF104=TD003
                                        AND TF014='Y'                                       
                                        AND TF001=@TF001 AND TF002=@TF002 AND TF003=@TF003

                                        --更新PURTE
                                        UPDATE [TK].dbo.PURTE
                                        SET TE017='Y'
                                        ,UDF02=@UDF02
                                        WHERE TE001=@TE001 AND TE002=@TE002 AND TE003=@TE003

                                        --更新PURTF
                                        UPDATE [TK].dbo.PURTF
                                        SET TF016='Y'
                                        WHERE TF001=@TF001 AND TF002=@TF002 AND TF003=@TF003

                                        --更新PURTC
                                        UPDATE [TK].dbo.PURTC
                                        SET UDF03=@UDF03
                                        WHERE TC001=@TC001 AND TC002=@TC002
                                      

                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TC001", SqlDbType.NVarChar).Value = TC001;
                    command.Parameters.Add("@TC002", SqlDbType.NVarChar).Value = TC002;
                    command.Parameters.Add("@TD001", SqlDbType.NVarChar).Value = TD001;
                    command.Parameters.Add("@TD002", SqlDbType.NVarChar).Value = TD002;
                    command.Parameters.Add("@TE001", SqlDbType.NVarChar).Value = TE001;
                    command.Parameters.Add("@TE002", SqlDbType.NVarChar).Value = TE002;
                    command.Parameters.Add("@TE003", SqlDbType.NVarChar).Value = TE003;
                    command.Parameters.Add("@TF001", SqlDbType.NVarChar).Value = TF001;
                    command.Parameters.Add("@TF002", SqlDbType.NVarChar).Value = TF002;
                    command.Parameters.Add("@TF003", SqlDbType.NVarChar).Value = TF003;
                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;
                    command.Parameters.Add("@UDF03", SqlDbType.NVarChar).Value = FORMID;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public void UPDATE_PURTL_PURTM_PURTN()
        {

            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            string FORMID;
            string TL001;
            string TL002;
           

            string ISCLOSE;

            DataTable DT = FIND_UOF_PURTL_PORTM_PURTN();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TL001 = DR["TL001"].ToString().Trim();
                    TL002 = DR["TL002"].ToString().Trim();
                 
                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["NOWACCOUNT"].ToString().Trim();
                    MODIFIER = DR["NOWACCOUNT"].ToString().Trim();
                    FORMID = DR["DOC_NBR"].ToString().Trim();

                    UPDATE_PURTL_PORTM_PURTN_EXE(TL001, TL002, FORMID, MODIFIER);
                }
            }
        }

        public DataTable FIND_UOF_PURTL_PORTM_PURTN()
        {

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"                   
                    
                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
	                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TL001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TL001,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TL002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TL002,
                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID
                                        WHERE[FORM_NAME] = 'PUR30..採購核價單'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'

                                    )
                                     SELECT TEMP.*,
                                    (
                                        SELECT TOP 1[TB_EB_USER].ACCOUNT
                                        FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                            ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER

                                    WHERE 1=1
                                        AND ISNULL([TB_WKF_TASK_NODE].ACTUAL_SIGNER,'')<>''
	                                    AND[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
                                        ORDER BY FINISH_TIME DESC
                                    ) AS NOWACCOUNT
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TL001+TL002,',','')  IN
                                    (
                                        SELECT REPLACE(TL001+TL002,' ' ,'')
                                        FROM[192.168.1.105].[TK].dbo.PURTL
                                    WHERE TL006 IN('N')
                                    )                 

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_PURTL_PORTM_PURTN_EXE(string TL001, string TL002, string FORMID, string MODIFIER)
        {
    

            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();

            queryString.AppendFormat(@"  

                                    UPDATE [TK].dbo.PURTL
                                    SET TL006='Y',UDF02=@UDF02
                                    WHERE TL001=@TL001 AND TL002=@TL002

                                    UPDATE [TK].dbo.PURTM
                                    SET TM011='Y'
                                    WHERE TM001=@TL001 AND TM002=@TL002

                                    INSERT INTO  [TK].[dbo].[PURMB]
                                    (

                                    [COMPANY]
                                    ,[CREATOR]
                                    ,[USR_GROUP]
                                    ,[CREATE_DATE]
                                    ,[MODIFIER]
                                    ,[MODI_DATE]
                                    ,[FLAG]
                                    ,[CREATE_TIME]
                                    ,[MODI_TIME]
                                    ,[TRANS_TYPE]
                                    ,[TRANS_NAME]
                                    ,[sync_date]
                                    ,[sync_time]
                                    ,[sync_mark]
                                    ,[sync_count]
                                    ,[DataUser]
                                    ,[DataGroup]
                                    ,[MB001]
                                    ,[MB002]
                                    ,[MB003]
                                    ,[MB004]
                                    ,[MB005]
                                    ,[MB007]
                                    ,[MB008]
                                    ,[MB009]
                                    ,[MB010]
                                    ,[MB011]
                                    ,[MB012]
                                    ,[MB013]
                                    ,[MB014]
                                    ,[MB015]
                                    ,[MB016]
                                    ,[MB017]
                                    ,[MB018]
                                    ,[MB019]
                                    ,[MB020]
                                    ,[MB021]
                                    ,[MB022]
                                    ,[MB023]
                                    ,[MB024]
                                    ,[MB025]
                                    ,[MB026]
                                    ,[MB027]
                                    ,[MB028]
                                    ,[MB029]
                                    ,[MB030]
                                    ,[MB031]
                                    ,[MB032]
                                    ,[MB033]
                                    ,[MB034]
                                    ,[MB035]
                                    ,[MB036]
                                    ,[MB037]
                                    ,[MB038]
                                    ,[MB039]
                                    ,[MB040]
                                    ,[UDF01]
                                    ,[UDF02]
                                    ,[UDF03]
                                    ,[UDF04]
                                    ,[UDF05]
                                    ,[UDF06]
                                    ,[UDF07]
                                    ,[UDF08]
                                    ,[UDF09]
                                    ,[UDF10]
                                    )

                                    SELECT 
                                    PURTL.[COMPANY]  [COMPANY]
                                    ,PURTL.[CREATOR]   [CREATOR]
                                    ,PURTL.[USR_GROUP]   [USR_GROUP]
                                    ,PURTL.[CREATE_DATE]   [CREATE_DATE]
                                    ,PURTL.[MODIFIER]   [MODIFIER]
                                    ,PURTL.[MODI_DATE]   [MODI_DATE]
                                    ,PURTL.[FLAG]   [FLAG]
                                    ,PURTL.[CREATE_TIME]   [CREATE_TIME]
                                    ,PURTL.[MODI_TIME]   [MODI_TIME]
                                    ,'P004'   [TRANS_TYPE]
                                    ,'PURI03'   [TRANS_NAME]
                                    ,PURTL.[sync_date]   [sync_date]
                                    ,PURTL.[sync_time]   [sync_time]
                                    ,PURTL.[sync_mark]   [sync_mark]
                                    ,PURTL.[sync_count]   [sync_count]
                                    ,PURTL.[DataUser]   [DataUser]
                                    ,PURTL.[DataGroup]   [DataGroup]
                                    ,TM004 [MB001]
                                    ,TL004 [MB002]
                                    ,TL005 [MB003]
                                    ,TM009 [MB004]
                                    ,'' [MB005]
                                    ,TM007 [MB007]
                                    ,TL003 [MB008]
                                    ,'' [MB009]
                                    ,TM008 [MB010]
                                    ,TM010 [MB011]
                                    ,TM012+TL001+TL002 [MB012]
                                    ,TL008 [MB013]
                                    ,TM014 [MB014]
                                    ,TM015 [MB015]
                                    ,TM016 [MB016]
                                    ,'' [MB017]
                                    ,'' [MB018]
                                    ,'' [MB019]
                                    ,'' [MB020]
                                    ,'' [MB021]
                                    ,'1' [MB022]
                                    ,0 [MB023]
                                    ,0 [MB024]
                                    ,'' [MB025]
                                    ,0[MB026]
                                    ,'' [MB027]
                                    ,'' [MB028]
                                    ,'' [MB029]
                                    ,0 [MB030]
                                    ,0 [MB031]
                                    ,0 [MB032]
                                    ,0 [MB033]
                                    ,0 [MB034]
                                    ,'' [MB035]
                                    ,'' [MB036]
                                    ,'' [MB037]
                                    ,'' [MB038]
                                    ,'' [MB039]
                                    ,'' [MB040]
                                    ,'' [UDF01]
                                    ,'' [UDF02]
                                    ,'' [UDF03]
                                    ,'' [UDF04]
                                    ,'' [UDF05]
                                    ,0 [UDF06]
                                    ,0 [UDF07]
                                    ,0 [UDF08]
                                    ,0 [UDF09]
                                    ,0 [UDF10]
                                    FROM [TK].dbo.PURMA,[TK].dbo.PURTL,[TK].dbo.PURTM
                                    WHERE 1=1
                                    AND MA001=TL004
                                    AND TL001=TM001 AND TL002=TM002                                      
                                    AND LTRIM(RTRIM(TM004))+LTRIM(RTRIM(TL004))+LTRIM(RTRIM(TL005))+LTRIM(RTRIM(TM009))+LTRIM(RTRIM(TM014)) NOT IN (SELECT LTRIM(RTRIM(MB001))+LTRIM(RTRIM(MB002))+LTRIM(RTRIM(MB003))+LTRIM(RTRIM(MB004))+LTRIM(RTRIM(MB014)) FROM [TK].dbo.PURMB)
                                        
                                    AND TL001=@TL001 AND TL002=@TL002
                                   
                                    INSERT INTO [TK].[dbo].[PURMC]
                                    (
                                    [COMPANY]
                                    ,[CREATOR]
                                    ,[USR_GROUP]
                                    ,[CREATE_DATE]
                                    ,[MODIFIER]
                                    ,[MODI_DATE]
                                    ,[FLAG]
                                    ,[CREATE_TIME]
                                    ,[MODI_TIME]
                                    ,[TRANS_TYPE]
                                    ,[TRANS_NAME]
                                    ,[sync_date]
                                    ,[sync_time]
                                    ,[sync_mark]
                                    ,[sync_count]
                                    ,[DataUser]
                                    ,[DataGroup]
                                    ,[MC001]
                                    ,[MC002]
                                    ,[MC003]
                                    ,[MC004]
                                    ,[MC005]
                                    ,[MC006]
                                    ,[MC007]
                                    ,[MC008]
                                    ,[MC009]
                                    ,[MC010]
                                    ,[MC011]
                                    ,[MC012]
                                    ,[MC013]
                                    ,[MC014]
                                    ,[MC015]
                                    ,[MC016]
                                    ,[MC017]
                                    ,[MC018]
                                    ,[MC019]
                                    ,[MC020]
                                    ,[MC021]
                                    ,[MC022]
                                    ,[MC023]
                                    ,[MC024]
                                    ,[MC025]
                                    ,[MC026]
                                    ,[MC027]
                                    ,[MC028]
                                    ,[MC029]
                                    ,[MC030]
                                    ,[UDF01]
                                    ,[UDF02]
                                    ,[UDF03]
                                    ,[UDF04]
                                    ,[UDF05]
                                    ,[UDF06]
                                    ,[UDF07]
                                    ,[UDF08]
                                    ,[UDF09]
                                    ,[UDF10]
                                    )


                                    SELECT
                                    PURTL.[COMPANY]  [COMPANY]
                                    ,PURTL.[CREATOR]   [CREATOR]
                                    ,PURTL.[USR_GROUP]   [USR_GROUP]
                                    ,PURTL.[CREATE_DATE]   [CREATE_DATE]
                                    ,PURTL.[MODIFIER]   [MODIFIER]
                                    ,PURTL.[MODI_DATE]   [MODI_DATE]
                                    ,PURTL.[FLAG]   [FLAG]
                                    ,PURTL.[CREATE_TIME]   [CREATE_TIME]
                                    ,PURTL.[MODI_TIME]   [MODI_TIME]
                                    ,'P004'   [TRANS_TYPE]
                                    ,'PURI03'   [TRANS_NAME]
                                    ,PURTL.[sync_date]   [sync_date]
                                    ,PURTL.[sync_time]   [sync_time]
                                    ,PURTL.[sync_mark]   [sync_mark]
                                    ,PURTL.[sync_count]   [sync_count]
                                    ,PURTL.[DataUser]   [DataUser]
                                    ,PURTL.[DataGroup]   [DataGroup]
                                    ,TM004 [MC001]
                                    ,TL004 [MC002]
                                    ,TL005 [MC003]
                                    ,TM009 [MC004]
                                    ,TN007 [MC005]
                                    ,TN008 [MC006]
                                    ,TM012+TL001+TL002 [MC007]
                                    ,TM014 [MC008]
                                    ,'' [MC009]
                                    ,'' [MC010]
                                    ,'' [MC011]
                                    ,'' [MC012]
                                    ,'' [MC013]
                                    ,'1' [MC014]
                                    ,'' [MC015]
                                    ,0 [MC016]
                                    ,'' [MC017]
                                    ,'' [MC018]
                                    ,'' [MC019]
                                    ,0 [MC020]
                                    ,0 [MC021]
                                    ,0 [MC022]
                                    ,0 [MC023]
                                    ,0 [MC024]
                                    ,'' [MC025]
                                    ,'' [MC026]
                                    ,'' [MC027]
                                    ,'' [MC028]
                                    ,'' [MC029]
                                    ,'' [MC030]
                                    ,'' [UDF01]
                                    ,'' [UDF02]
                                    ,'' [UDF03]
                                    ,'' [UDF04]
                                    ,'' [UDF05]
                                    ,0 [UDF06]
                                    ,0 [UDF07]
                                    ,0 [UDF08]
                                    ,0 [UDF09]
                                    ,0 [UDF10]
                                    FROM [TK].dbo.PURMA,[TK].dbo.PURTL,[TK].dbo.PURTM
                                    LEFT JOIN [TK].dbo.PURTN ON TM001=TN001 AND TM002=TN002 AND TM003=TN003
                                    WHERE 1=1
                                    AND MA001=TL004
                                    AND TL001=TM001 AND TL002=TM002

                                    AND LTRIM(RTRIM(TM004))+LTRIM(RTRIM(TL004))+LTRIM(RTRIM(TL005))+LTRIM(RTRIM(TM009))+LTRIM(RTRIM(CONVERT(NVARCHAR,TN007)))+LTRIM(RTRIM(TM014)) NOT IN (SELECT LTRIM(RTRIM(MC001))+LTRIM(RTRIM(MC002))+LTRIM(RTRIM(MC003))+LTRIM(RTRIM(MC004))+LTRIM(RTRIM(CONVERT(NVARCHAR,MC005)))+LTRIM(RTRIM(MC008)) FROM [TK].dbo.PURMC)
                                        
                                    AND TL001=@TL001 AND TL002=@TL002
                                      
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TL001", SqlDbType.NVarChar).Value = TL001;
                    command.Parameters.Add("@TL002", SqlDbType.NVarChar).Value = TL002;

                    command.Parameters.Add("@UDF02", SqlDbType.NVarChar).Value = FORMID;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        //PURA1.客供進貨-進貨品質驗收單
        //ERP-QCINVTAINVTB-QC客供單進貨檢驗
        //TKUOF.TRIGGER.QCINVTAINVTB.EndFormTrigger
        public void UPDATE_INVTB_QC_CHECKS()
        {
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            string FORMID;
            string TA001;
            string TA002;
            string TB003;
            string TB007;
            string CHECK;
            string QCMAN;
            string UDF01;

            DataTable DT = FIND_UOF_INVTB_QC_CHECKS();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TA001 = DR["TA001"].ToString().Trim();
                    TA002 = DR["TA002"].ToString().Trim();
                    TB003 = DR["TB003"].ToString().Trim();
                    TB007 = DR["TH015"].ToString().Trim();
                    CHECK = DR["CHECKS"].ToString().Trim();
                    QCMAN = DR["NAME"].ToString().Trim();

                    UDF01 = CHECK + ',' + QCMAN + '-' + DOC_NBR;

                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["NOWACCOUNT"].ToString().Trim();
                    MODIFIER = DR["NOWACCOUNT"].ToString().Trim();
                    FORMID = DR["DOC_NBR"].ToString().Trim();

                    UPDATE_INVTB_QC_CHECKS_EXE(TA001, TA002, TB003, TB007, UDF01);
                }
            }
        }

        public DataTable FIND_UOF_INVTB_QC_CHECKS()
        {

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"    
                                    --20250115 ERP-QCINVTAINVTB-QC客供單進貨檢驗

                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
	                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA001,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA002,
                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT,
                                        X.TB003,
                                        X.TH015,
                                        X.CHECKS
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID

                                        OUTER APPLY(
                                        SELECT
                                            N_Row.Row.value('(Cell[@fieldId=""TB003""]/@fieldValue)[1]', 'VARCHAR(50)') AS TB003,
                                            N_Row.Row.value('(Cell[@fieldId=""TH015""]/@fieldValue)[1]', 'VARCHAR(50)') AS TH015,
                                            N_Row.Row.value('(Cell[@fieldId=""CHECK""]/@fieldValue)[1]', 'VARCHAR(50)') AS CHECKS
                                        FROM CURRENT_DOC.nodes('/Form/FormFieldValue/FieldItem[@fieldId=""INVTB""]/DataGrid/Row') AS N_Row(Row)
                                        ) AS X
                                        WHERE[FORM_NAME] = 'PURA1.客供進貨-進貨品質驗收單'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'
                                        --只查今年的表單
                                        AND [DOC_NBR] LIKE '%'+SUBSTRING((CONVERT(nvarchar,YEAR(GETDATE()))),3,2)+'%'

                                    )
                                   SELECT TEMP.*
                                    ,(
                                        --找出第2關簽核的品保人員
                                        SELECT ACCOUNT
	                                    FROM (
		                                    SELECT [TB_EB_USER].ACCOUNT, 
			                                       ROW_NUMBER() OVER (ORDER BY FINISH_TIME) AS RowNum
		                                    FROM [UOF].[dbo].TB_WKF_TASK_NODE
		                                    LEFT JOIN [UOF].[dbo].[TB_EB_USER]
			                                    ON [TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
		                                    WHERE ISNULL([TB_WKF_TASK_NODE].ACTUAL_SIGNER, '') <> ''
		                                      AND [TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
	                                    ) AS RankedData
	                                    WHERE RowNum = 2
                                    ) AS NAME
                                    ,(
                                        SELECT NAME
	                                    FROM (
		                                    SELECT [TB_EB_USER].NAME, 
			                                       ROW_NUMBER() OVER (ORDER BY FINISH_TIME) AS RowNum
		                                    FROM [UOF].[dbo].TB_WKF_TASK_NODE
		                                    LEFT JOIN [UOF].[dbo].[TB_EB_USER]
			                                    ON [TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
		                                    WHERE ISNULL([TB_WKF_TASK_NODE].ACTUAL_SIGNER, '') <> ''
		                                      AND [TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
	                                    ) AS RankedData
	                                    WHERE RowNum = 2
                                    ) AS NAME
                                    FROM TEMP
                                    WHERE 1=1
                                    AND REPLACE(TA001+TA002,',','')  IN
                                    (
                                        SELECT REPLACE(TA001+TA002,' ' ,'')
                                        FROM[192.168.1.105].[TK].dbo.INVTA,[192.168.1.105].[TK]	.dbo.INVTB
	                                    WHERE TA001=TB001 AND TA002=TB002										
										AND TA001='A11A'											
										AND ISNULL(INVTB.UDF01,'')=''
                                    )  
                                    ORDER BY  [DOC_NBR]  
              
                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_INVTB_QC_CHECKS_EXE(string TA001, string TA002, string TB003, string TB007, string UDF01)
        {


            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();

            queryString.AppendFormat(@"  
                                        UPDATE[TK].dbo.INVTB
                                        SET TB007 =@TB007,UDF01 = @UDF01
                                        WHERE TB001 = @TA001 AND TB002 = @TA002 AND TB003 = @TB003
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TA001", SqlDbType.NVarChar).Value = TA001;
                    command.Parameters.Add("@TA002", SqlDbType.NVarChar).Value = TA002;
                    command.Parameters.Add("@TB003", SqlDbType.NVarChar).Value = TB003;
                    command.Parameters.Add("@TB007", SqlDbType.NVarChar).Value = TB007;
                    command.Parameters.Add("@UDF01", SqlDbType.NVarChar).Value = UDF01;


                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        //ERP-QCPURTGPURTH品保檢驗進貨單明細
        //TKUOF.TRIGGER.QCPURTGPURTH.EndFormTrigger
        public void UPDATE_PURTH_QC_CHECKS()
        {
            string DOC_NBR = "";
            string ACCOUNT = "";
            string MODIFIER = null;

            string FORMID;
            string TH001;
            string TH002;
            string TH003;
            string TH007;
            string TH028;
            string CHECK;
            string QCMAN;
            string UDF01;

            DataTable DT = FIND_UOF_PURTH_QC_CHECKS();

            if (DT != null && DT.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT.Rows)
                {
                    TH001 = DR["TG001"].ToString().Trim();
                    TH002 = DR["TG002"].ToString().Trim();
                    TH003 = DR["TH003"].ToString().Trim();
                    TH007 = DR["TH007"].ToString().Trim();
                    CHECK = DR["CHECKS"].ToString().Trim();
                    QCMAN = DR["NAME"].ToString().Trim();
                    TH028 = "2";

                    if (CHECK.Equals("Y"))
                    {
                        TH028 = "2";
                    }
                    else
                    {
                        TH028 = "3";
                    }

                    UDF01 = CHECK + ',' + QCMAN + '-' + DOC_NBR;

                    DOC_NBR = DR["DOC_NBR"].ToString().Trim();
                    ACCOUNT = DR["NOWACCOUNT"].ToString().Trim();
                    MODIFIER = DR["NOWACCOUNT"].ToString().Trim();
                    FORMID = DR["DOC_NBR"].ToString().Trim();

                    UPDATE_PURTH_QC_CHECKS_EXE(TH001, TH002, TH003, TH007, TH028, UDF01);
                }
            }
        }

        public DataTable FIND_UOF_PURTH_QC_CHECKS()
        {

            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"    
                                   --20250116 ERP-QCPURTGPURTH品保檢驗進貨單明細

                                    WITH TEMP AS (
                                    SELECT 
                                        [FORM_NAME],
                                        [DOC_NBR],
	                                    [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TG001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TG001,
                                        [CURRENT_DOC].value('(/Form/FormFieldValue/FieldItem[@fieldId=""TG002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TG002,
                                        TASK_ID,
                                        TASK_STATUS,
                                        TASK_RESULT,
                                        X.TH003,
                                        X.TH007,
                                        X.CHECKS
                                        FROM[UOF].[dbo].TB_WKF_TASK
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] ON[TB_WKF_FORM_VERSION].FORM_VERSION_ID = TB_WKF_TASK.FORM_VERSION_ID
                                        LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] ON[TB_WKF_FORM].FORM_ID = [TB_WKF_FORM_VERSION].FORM_ID

                                        OUTER APPLY(
                                        SELECT
                                            N_Row.Row.value('(Cell[@fieldId=""TH003""]/@fieldValue)[1]', 'VARCHAR(50)') AS TH003,
                                            N_Row.Row.value('(Cell[@fieldId=""TH007""]/@fieldValue)[1]', 'VARCHAR(50)') AS TH007,
                                            N_Row.Row.value('(Cell[@fieldId=""CHECK""]/@fieldValue)[1]', 'VARCHAR(50)') AS CHECKS
                                        FROM CURRENT_DOC.nodes('/Form/FormFieldValue/FieldItem[@fieldId=""PURTH""]/DataGrid/Row') AS N_Row(Row)
                                        ) AS X
                                        WHERE[FORM_NAME] = 'PURA0.進貨-進貨品質驗收單'
                                        AND TASK_STATUS = '2'
                                        AND TASK_RESULT = '0'
                                         --只查今年的表單
                                        AND[DOC_NBR] LIKE '%' + SUBSTRING((CONVERT(nvarchar, YEAR(GETDATE()))), 3, 2) + '%'

                                    )
                                     SELECT TEMP.*
                                    ,(
                                        --找出第2關簽核的品保人員
                                        SELECT ACCOUNT

                                        FROM(
                                            SELECT[TB_EB_USER].ACCOUNT,
                                                    ROW_NUMBER() OVER(ORDER BY FINISH_TIME) AS RowNum
                                            FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                            LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                                ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                            WHERE ISNULL([TB_WKF_TASK_NODE].ACTUAL_SIGNER, '') <> ''
                                                AND[TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
	                                    ) AS RankedData
                                        WHERE RowNum = 2
	                                    ) AS NOWACCOUNT
                                        ,(
                                        SELECT NAME
                                        FROM(
                                            SELECT[TB_EB_USER].NAME,
                                                    ROW_NUMBER() OVER(ORDER BY FINISH_TIME) AS RowNum
                                            FROM[UOF].[dbo].TB_WKF_TASK_NODE
                                            LEFT JOIN[UOF].[dbo].[TB_EB_USER]
                                                ON[TB_EB_USER].USER_GUID = [TB_WKF_TASK_NODE].ACTUAL_SIGNER
                                            WHERE ISNULL([TB_WKF_TASK_NODE].ACTUAL_SIGNER, '') <> ''
                                                AND [TB_WKF_TASK_NODE].TASK_ID = TEMP.TASK_ID
	                                    ) AS RankedData

                                        WHERE RowNum = 2
	                                    ) AS NAME
                                    FROM TEMP
                                    WHERE 1 = 1
                                    AND REPLACE(TG001 + TG002, ',', '')  IN
                                        (
                                            SELECT REPLACE(TG001 + TG002, ' ', '')    
                                            FROM [192.168.1.105].[TK].dbo.PURTG,[192.168.1.105].[TK].dbo.PURTH    
                                            WHERE TG001 = TH001 AND TG002 = TH002    
                                            AND TG013 IN('N')    
                                            AND ISNULL(PURTH.UDF01, '') = ''
                                        )


                                    ORDER BY  [DOC_NBR]  
              
                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_PURTH_QC_CHECKS_EXE(string TH001, string TH002, string TH003, string TH007,string TH028, string UDF01)
        {


            string COMPANY = "TK";
            string MODI_DATE = DateTime.Now.ToString("yyyyMMdd");
            string MODI_TIME = DateTime.Now.ToString("HH:mm:dd");

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);


            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            StringBuilder queryString = new StringBuilder();

            queryString.AppendFormat(@"  
                                          UPDATE [TK].dbo.PURTH
                                          SET TH015=@TH015,UDF01=@UDF01,TH017=TH007-@TH007,TH028=@TH028
                                          WHERE TH001=@TH001 AND TH002=@TH002 AND TH003=@TH003
                                        ");

            try
            {
                using (SqlConnection connection = new SqlConnection(sqlConn.ConnectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@TH001", SqlDbType.NVarChar).Value = TH001;
                    command.Parameters.Add("@TH002", SqlDbType.NVarChar).Value = TH002;
                    command.Parameters.Add("@TH003", SqlDbType.NVarChar).Value = TH003;
                    command.Parameters.Add("@TH015", SqlDbType.NVarChar).Value = TH007;
                    command.Parameters.Add("@TH007", SqlDbType.NVarChar).Value = TH007;
                    command.Parameters.Add("@TH028", SqlDbType.NVarChar).Value = TH028;
                    command.Parameters.Add("@UDF01", SqlDbType.NVarChar).Value = UDF01;



                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        /// <summary>
        /// 轉入資料來客-X:\kldatabase.db
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>        
        public void ADDTKMKt_visitors()
        {
            SQLiteConnection SQLiteConnection = new SQLiteConnection();
            //string MAXID = null;
            string MAX_Fdate = null;



            try
            {
                //MAXID = FINDTKMKt_visitorsMAXID();
                MAX_Fdate = FIND_TKMKt_visitorsMAX_Fdate();

                if (!string.IsNullOrEmpty(MAX_Fdate))
                {
                    //SQLite的檔案要先copy到 F:\kldatabase.db
                    // string path = @"data source=E:\kldatabase.db";
                    string path = @"data source=X:\kldatabase.db";
                    //string path = @"data source=\\192.168.1.101\Users\Administrator\AppData\Roaming\CounterServerData\kldatabase.db";

                    //string filePath = @"\\192.168.1.101\Users\Administrator\AppData\Roaming\CounterServerData\kldatabase.db";
                    //if (File.Exists(filePath))
                    //{
                    //    MessageBox.Show("存在！");
                    //}
                    //else
                    //{
                    //    MessageBox.Show("檔案不存在！");
                    //}

                    SQLiteConnection = new SQLiteConnection(path);
                    SQLiteConnection.Open();

                    SQLiteCommand cmd = SQLiteConnection.CreateCommand();

                    sbSql.Clear();
                    sbSql.AppendFormat(@"  
                                        SELECT *
                                        FROM t_visitors
                                        WHERE Fdate>='{0}'
                                     ", MAX_Fdate);

                    cmd.CommandText = sbSql.ToString();

                    // 用DataAdapter和DataTable類，記得要 using System.Data
                    SQLiteDataAdapter adapter = new SQLiteDataAdapter(cmd);
                    DataTable table = new DataTable();
                    adapter.Fill(table);

                    if (table.Rows.Count > 0)
                    {
                        ADDTOTKMKt_visitors(table);
                        UPDATEt_visitors();
                    }

                    else
                    {
                        //MessageBox.Show("沒有新資料，請更新kldatabasepri 到E:");
                    }

                    SQLiteConnection.Close();


                }
                else
                {
                    //MessageBox.Show("沒有新資料，請更新kldatabasepri 到E:");
                }

            }
            catch
            {
                //MessageBox.Show("有錯誤");
            }
            finally
            {

            }
        }
        public string FIND_TKMKt_visitorsMAX_Fdate()
        {
            string Fdate = null;

            try
            {
                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);


                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
                DataSet ds1 = new DataSet();

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    SELECT 
                                    CONVERT(VARCHAR, MAX([Fdate]), 120) AS [Fdate]
                                    FROM  [TKMK].[dbo].[t_visitors]
                                    ");

                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "TEMPds1");
                sqlConn.Close();


                if (ds1.Tables["TEMPds1"].Rows.Count >= 1)
                {
                    Fdate = ds1.Tables["TEMPds1"].Rows[0]["Fdate"].ToString();
                }
                else
                {

                }

            }
            catch
            {

            }
            finally
            {
                sqlConn.Close();
            }

            return Fdate;
        }

        public void ADDTOTKMKt_visitors(DataTable dtt_visitors)
        {
            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconnTKMK"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);

            using (SqlConnection connection = sqlConn)
            {
                connection.Open();
                SqlTransaction sqlTrans = connection.BeginTransaction();
                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection, SqlBulkCopyOptions.KeepIdentity, sqlTrans))
                {
                    DataTable dt = dtt_visitors;
                    bulkCopy.DestinationTableName = "t_visitors";

                    //對應資料行
                    //bulkCopy.ColumnMappings.Add("DataTable的欄位A", "資料庫裡的資料表的的欄位A");
                    bulkCopy.ColumnMappings.Add("Fuid", "Fuid");
                    bulkCopy.ColumnMappings.Add("Fvisit_md5", "Fvisit_md5");
                    bulkCopy.ColumnMappings.Add("Fdevice_sn", "Fdevice_sn");
                    bulkCopy.ColumnMappings.Add("Fdate", "Fdate");
                    bulkCopy.ColumnMappings.Add("Fin_data", "Fin_data");
                    bulkCopy.ColumnMappings.Add("Fout_data", "Fout_data");
                    bulkCopy.ColumnMappings.Add("Fcreate_time", "Fcreate_time");
                    bulkCopy.ColumnMappings.Add("Fdata_version", "Fdata_version");
                    bulkCopy.ColumnMappings.Add("Fbatvoltage", "Fbatvoltage");
                    bulkCopy.ColumnMappings.Add("Fbatpercent", "Fbatpercent");
                    bulkCopy.ColumnMappings.Add("Flosefocus", "Flosefocus");
                    bulkCopy.ColumnMappings.Add("Fcharge", "Fcharge");
                    bulkCopy.ColumnMappings.Add("Ftemperature", "Ftemperature");
                    bulkCopy.ColumnMappings.Add("id", "id");

                    bulkCopy.BatchSize = 1000;
                    bulkCopy.BulkCopyTimeout = 60;

                    try
                    {
                        bulkCopy.WriteToServer(dt);
                        sqlTrans.Commit();

                        //MessageBox.Show("完成");
                    }

                    catch (Exception)
                    {
                        sqlTrans.Rollback();
                    }




                }

            }
        }

        public void UPDATEt_visitors()
        {

            try
            {
                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);


                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                     UPDATE [TKMK].[dbo].[t_visitors]
                                    SET [TT002]= [t_STORESNAME].[TT002],[STORESNAME]=[t_STORESNAME].[STORESNAME]
                                    FROM [TKMK].[dbo].[t_STORESNAME]
                                    WHERE [t_STORESNAME].[Fdevice_sn]=[t_visitors].[Fdevice_sn]
                                    AND [t_STORESNAME].[ISUSED]='Y'
                                    AND ISNULL([t_visitors].[TT002],'')=''

                                    ");



                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消


                }
                else
                {
                    tran.Commit();      //執行交易                    

                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }


        }
        /// <summary>
        /// ERP-訂單明細補生產預設=N
        /// COPTD的UDF01，空白=N
        /// </summary>
        public void UPDATE_COPTD_UDF01()
        {
            try
            {
                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbconn"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);


                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                    UPDATE  [TK].dbo.COPTD
                                    SET UDF01='N'
                                    WHERE  ISNULL(UDF01,'')=''                                  

                                    ");



                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消


                }
                else
                {
                    tran.Commit();      //執行交易                    

                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }

        }

        //作廢請購變更單不存在
        //UOF的請購變更單來源，已經不存在[PURTATBCHAGE]
        //經採購人員確認是多打的才會刪除，用TKPUR的「FrmPURTECHANGEDEL 」 採購變更刪除錯的請購變更
        public void UPDATE_UOF_PUR20_TASK_RESULT()
        {
            try
            {
                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);


                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                sbSql.AppendFormat(@"
                                    UPDATE [UOF].[dbo].TB_WKF_TASK 
                                    SET TASK_RESULT='2'
                                    WHERE DOC_NBR IN (	
	                                    SELECT DOC_NBR 
	                                    FROM (
		                                    SELECT 
			                                    T.FORM_NAME,
			                                    T.DOC_NBR,
			                                    T.CURRENT_DOC,
			                                    T.TASK_RESULT,
			                                    T.TA001,
			                                    T.TA002,
			                                    T.VERSIONS
		                                    FROM (
			                                    SELECT 
				                                    F.FORM_NAME,
				                                    W.DOC_NBR,
				                                    W.CURRENT_DOC,
				                                    W.TASK_RESULT,
				                                    W.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA001""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA001,
                                                    W.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""TA002""]/@fieldValue)[1]', 'NVARCHAR(100)') AS TA002,
                                                    W.CURRENT_DOC.value('(/Form/FormFieldValue/FieldItem[@fieldId=""VERSIONS""]/@fieldValue)[1]', 'NVARCHAR(100)') AS VERSIONS
                                                FROM[UOF].[dbo].TB_WKF_TASK W
                                                LEFT JOIN[UOF].[dbo].[TB_WKF_FORM_VERSION] FV ON FV.FORM_VERSION_ID = W.FORM_VERSION_ID
                                                LEFT JOIN[UOF].[dbo].[TB_WKF_FORM] F ON F.FORM_ID = FV.FORM_ID
                                                WHERE F.FORM_NAME = 'PUR20.請購單變更單'
                                                AND W.TASK_RESULT = '0'
                                            ) T
	                                    ) TEMP
                                        LEFT JOIN[192.168.1.105].[TKPUR].[dbo].[PURTATBCHAGE] P
                                           ON TEMP.TA001 = P.TA001
                                            AND TEMP.TA002 = P.TA002
                                            AND TEMP.VERSIONS = CONVERT(NVARCHAR, P.VERSIONS)
                                        WHERE P.TA001 IS NULL
                                        AND DOC_NBR LIKE 'PURTACHANGE%'
                                    )                      

                                    ");



                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消


                }
                else
                {
                    tran.Commit();      //執行交易                    

                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }
        }

        public void ADD_ERP_INVMB_TO_UOF_9001()
        {
            string YEATERDAY = DateTime.Now.AddDays(-1).ToString("yyyyMMdd");
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp22"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"    
                                    SELECT 
                                    INVMB.CREATOR,
                                    INVMB.CREATE_DATE,
                                    MB001 AS '品號',
                                    MB002 AS '品名',
                                    MB003 AS '規格',
                                    MB004 AS '庫存單位',
                                    MB046 AS '標準進價' ,
                                    MB047 AS '標準售價',
                                    MB051 AS '零售價',
                                    MB052 AS '零售價含稅',
                                    MB053 AS 'IP價格',
                                    MB054 AS 'DM價格',
                                    MB055 AS '通路售價' ,
                                    MB056 AS '售價定價四',
                                    MB069 AS '售價定價五',
                                    MB070 AS '售價定價六',
                                    INVMB.UDF04 AS '品號目的',
                                    MA003 AS '會計類別'
                                    ,CONVERT(NVARCHAR,MB023) +(CASE WHEN MB198='1' THEN '天' WHEN MB198='2' THEN '月' WHEN MB198='3' THEN '年' END ) AS '效期'

                                    FROM [TK].dbo.INVMB WITH(NOLOCK)
                                    LEFT JOIN  [TK].dbo.INVMA WITH(NOLOCK) ON MA001='1' AND MA002=MB005
                                    WHERE (MB001 LIKE '4%' OR MB001 LIKE '5%')
                                    AND INVMB.CREATE_DATE LIKE '{0}%'

                                    ", YEATERDAY);

                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");


                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    foreach (DataRow dr in ds1.Tables["ds1"].Rows)
                    {
                        ADD_INVMB_NEW_9001_TB_WKF_EXTERNAL_TASK(dr["品號"].ToString().Trim());
                    }

                }
                else
                {

                }

            }
            catch
            {

            }
            finally
            {
                sqlConn.Close();
            }

        }
        public void ADD_INVMB_NEW_9001_TB_WKF_EXTERNAL_TASK(string MB001)
        {
            DataTable DT = SEARCH_INVMB_NEW(MB001);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            string EXTERNAL_FORM_NBR = DT.Rows[0]["品號"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            //建立根節點
            XmlElement Form = xmlDoc.CreateElement("Form");

            //正式的id
            string FORM_ID = SEARCHFORM_UOF_VERSION_ID("9001.新品號通知單");

            if (!string.IsNullOrEmpty(FORM_ID))
            {
                Form.SetAttribute("formVersionId", FORM_ID);
            }


            Form.SetAttribute("urgentLevel", "2");
            //加入節點底下
            xmlDoc.AppendChild(Form);

            ////建立節點Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            //加入節點底下
            Form.AppendChild(Applicant);

            //建立節點 Comment
            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            //加入至節點底下
            Applicant.AppendChild(Comment);

            //建立節點 FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            //加入至節點底下
            Form.AppendChild(FormFieldValue);

            //建立節點FieldItem
            //ID 表單編號	
            XmlElement FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "ID");
            FieldItem.SetAttribute("fieldValue", "");
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //UDF04	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "UDF04");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["品號目的"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB001	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB001");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["品號"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB002	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB002");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["品名"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB003	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB003");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["規格"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB004	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB004");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["庫存單位"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB046	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB046");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["標準進價"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB047	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB047");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["標準售價"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB051	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB051");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["零售價"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB052	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB052");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["零售價含稅"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB053	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB053");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["IP價格"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB054	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB054");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["DM價格"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB055	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB055");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["通路售價"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB056	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB056");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["售價定價四"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB069	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB069");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["售價定價五"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB070	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB070");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["售價定價六"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MA003	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MA003");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["會計類別"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下

            //建立節點FieldItem
            //MB023
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "MB023");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["效期"].ToString());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            FormFieldValue.AppendChild(FieldItem);
            //加入至members節點底下



            ////用ADDTACK，直接啟動起單
            //ADDTACK(Form);

            //ADD TO DB
            ////string connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ToString();

            //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
            //sqlConn = new SqlConnection(connectionString);

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);
            connectionString = sqlConn.ConnectionString.ToString();

            StringBuilder queryString = new StringBuilder();




            queryString.AppendFormat(@" INSERT INTO [{0}].dbo.TB_WKF_EXTERNAL_TASK
                                         (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(),@XML,2,'{1}')
                                        ", DBNAME, EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public DataTable SEARCH_INVMB_NEW(string MB001)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"  
                                    SELECT 
                                    INVMB.CREATOR
                                    ,CONVERT(NVARCHAR, DATEADD(DAY, -1, GETDATE()), 112) AS 'CREATE_DATE'
                                    ,MB001 AS '品號'
                                    ,MB002 AS '品名'
                                    ,MB003 AS '規格'
                                    ,MB004 AS '庫存單位'
                                    ,MB046 AS '標準進價' 
                                    ,MB047 AS '標準售價'
                                    ,MB051 AS '零售價'
                                    ,MB052 AS '零售價含稅'
                                    ,MB053 AS 'IP價格'
                                    ,MB054 AS 'DM價格'
                                    ,MB055 AS '通路售價' 
                                    ,MB056 AS '售價定價四'
                                    ,MB069 AS '售價定價五'
                                    ,MB070 AS '售價定價六'
                                    ,INVMB.UDF04 AS '品號目的'
                                    ,MA003 AS '會計類別'
                                    ,CONVERT(NVARCHAR,MB023) +(CASE WHEN MB198='1' THEN '天' WHEN MB198='2' THEN '月' WHEN MB198='3' THEN '年' END ) AS '效期'
                                    ,[TB_EB_USER].USER_GUID   	
                                    ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=INVMB.CREATOR) AS 'MV002'
                                    ,GROUP_ID  AS 'GROUP_ID'
                                    ,TITLE_ID  AS 'TITLE_ID'
                                    FROM [TK].dbo.INVMB
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT= INVMB.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] ON [TB_EB_EMPL_DEP].USER_GUID=[TB_EB_USER].USER_GUID AND ORDERS='0'
                                    LEFT JOIN  [TK].dbo.INVMA WITH(NOLOCK) ON MA001='1' AND MA002=MB005
                                    WHERE (MB001 LIKE '4%' OR MB001 LIKE '5%')
                                    AND MB001='{0}'
              
                                    ", MB001);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void ADD_ERP_INVMB_TO_UOF_9002()
        {
            string YEATERDAY = DateTime.Now.AddDays(-1).ToString("yyyyMMdd");
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp22"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();

                //YEATERDAY = "20250422";

                sbSql.AppendFormat(@"                                      
                                   SELECT 
                                    TL005 AS '變更日期'
                                    ,TL001 AS '品號'
                                    ,TL007 AS '新品名'
                                    ,TL008 AS '新規格'
                                    ,(CASE WHEN TL002<>TL007 THEN TL002 ELSE ''END) AS '舊品名'
                                    ,(CASE WHEN TL003<>TL008 THEN TL003 ELSE ''END)  AS '舊規格'
                                    ,TM005 AS '欄位名稱'
                                    ,TM006 AS '新值'
                                    ,(CASE WHEN TM007<>TM006 THEN TM007 ELSE ''END) AS '舊值'
                                    ,TL010 AS '單頭備註'
                                    ,TM012 AS '單身備註'
                                    ,TL004 AS '變更版次'

                                    FROM [TK].dbo.INVTL
                                    LEFT JOIN [TK].dbo.INVTM ON TL001=TM001 AND TL004=TM002 
                                    WHERE (TL001 LIKE '4%' OR TL001 LIKE '5%')
                                    AND TM004 IN (
	                                    SELECT 
	                                    [TM004]
	                                    FROM [TKRESEARCH].[dbo].[TB_INVTM_SETS]
                                    )
                                    AND TL010 NOT IN (
	                                    SELECT 
	                                    [TL010]
	                                    FROM [TKSCHEDULEUOF].[dbo].[TBINVMBTL010]
	                                    )
                                    AND TL005 LIKE '{0}%'
                                    ORDER BY TL005,TL001,TM004
                                    ", YEATERDAY);

                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");


                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    ADD_INVMB_NEW_9002_TB_WKF_EXTERNAL_TASK(YEATERDAY);
                }
                else
                {

                }

            }
            catch
            {

            }
            finally
            {
                sqlConn.Close();
            }

        }
        public void ADD_INVMB_NEW_9002_TB_WKF_EXTERNAL_TASK(string YEATERDAY)
        {
            DataTable DT = SEARCH_INVMB_MODIFY_9002(YEATERDAY);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["CREATOR"].ToString());

            string account = DT.Rows[0]["CREATOR"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["MV002"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            //string EXTERNAL_FORM_NBR = DT.Rows[0]["品號"].ToString().Trim();
            string EXTERNAL_FORM_NBR = YEATERDAY +"-"+ DT.Rows[0]["品號"].ToString().Trim() + "-" + DT.Rows[0]["變更版次"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            //建立根節點
            XmlElement Form = xmlDoc.CreateElement("Form");

            //正式的id
            string FORM_ID = SEARCHFORM_UOF_VERSION_ID("9002.品號變更通知");

            if (!string.IsNullOrEmpty(FORM_ID))
            {
                Form.SetAttribute("formVersionId", FORM_ID);
            }


            Form.SetAttribute("urgentLevel", "2");
            //加入節點底下
            xmlDoc.AppendChild(Form);

            ////建立節點Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            //加入節點底下
            Form.AppendChild(Applicant);

            //建立節點 Comment
            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            //加入至節點底下
            Applicant.AppendChild(Comment);

            //建立節點 FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            //加入至節點底下
            Form.AppendChild(FormFieldValue);

            //建立節點FieldItem
            //ID 表單編號	
            XmlElement FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "ID");
            FieldItem.SetAttribute("fieldValue", "");
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);



            //建立節點FieldItem
            //DETAILS 表單編號	
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "DETAILS");
            FieldItem.SetAttribute("fieldValue", "");
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點 DataGrid
            XmlElement DataGrid = xmlDoc.CreateElement("DataGrid");
            //DataGrid 加入至 TB 節點底下
            XmlNode DETAILS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']");
            DETAILS.AppendChild(DataGrid);



            foreach (DataRow od in DT.Rows)
            {
                // 新增 Row
                XmlElement Row = xmlDoc.CreateElement("Row");
                Row.SetAttribute("order", (rowscounts).ToString());

                //Row	UDF01
                XmlElement Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TL005");
                Cell.SetAttribute("fieldValue", od["變更日期"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TL001");
                Cell.SetAttribute("fieldValue", od["品號"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TL007");
                Cell.SetAttribute("fieldValue", od["新品名"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TL008");
                Cell.SetAttribute("fieldValue", od["新規格"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TL002");
                Cell.SetAttribute("fieldValue", od["舊品名"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TL003");
                Cell.SetAttribute("fieldValue", od["舊規格"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);


                //Row	
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TM005");
                Cell.SetAttribute("fieldValue", od["欄位名稱"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TM006");
                Cell.SetAttribute("fieldValue", od["新值"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TM007");
                Cell.SetAttribute("fieldValue", od["舊值"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TL010");
                Cell.SetAttribute("fieldValue", od["單頭備註"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TM012");
                Cell.SetAttribute("fieldValue", od["單身備註"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);

                //Row	
                Cell = xmlDoc.CreateElement("Cell");
                Cell.SetAttribute("fieldId", "TL004");
                Cell.SetAttribute("fieldValue", od["變更版次"].ToString());
                Cell.SetAttribute("realValue", "");
                Cell.SetAttribute("customValue", "");
                Cell.SetAttribute("enableSearch", "True");
                //Row
                Row.AppendChild(Cell);



                rowscounts = rowscounts + 1;

                XmlNode DataGridS = xmlDoc.SelectSingleNode("./Form/FormFieldValue/FieldItem[@fieldId='DETAILS']/DataGrid");
                DataGridS.AppendChild(Row);

            }

            ////用ADDTACK，直接啟動起單
            //ADDTACK(Form);

            //ADD TO DB
            ////string connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ToString();

            //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
            //sqlConn = new SqlConnection(connectionString);

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);
            connectionString = sqlConn.ConnectionString.ToString();

            StringBuilder queryString = new StringBuilder();




            queryString.AppendFormat(@" INSERT INTO [{0}].dbo.TB_WKF_EXTERNAL_TASK
                                         (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(),@XML,2,'{1}')
                                        ", DBNAME, EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }

        public DataTable SEARCH_INVMB_MODIFY_9002(string YEATERDAY)
        {
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();

                sbSql.AppendFormat(@"   
                                    SELECT 
                                    INVTL.CREATOR
                                    ,CONVERT(NVARCHAR, DATEADD(DAY, -1, GETDATE()), 112) AS 'CREATE_DATE'
                                    ,TL005 AS '變更日期'
                                    ,TL001 AS '品號'
                                    ,TL007 AS '新品名'
                                    ,TL008 AS '新規格'
                                    ,(CASE WHEN TL002<>TL007 THEN TL002 ELSE ''END) AS '舊品名'
                                    ,(CASE WHEN TL003<>TL008 THEN TL003 ELSE ''END)  AS '舊規格'
                                    ,TM005 AS '欄位名稱'
                                    ,TM006 AS '新值'
                                    ,(CASE WHEN TM007<>TM006 THEN TM007 ELSE ''END) AS '舊值'
                                    ,TL010 AS '單頭備註'
                                    ,TM012 AS '單身備註'
                                    ,TL004 AS '變更版次'
                                    ,[TB_EB_USER].USER_GUID   	
                                    ,(SELECT TOP 1 MV002 FROM [TK].dbo.CMSMV WHERE MV001=INVTL.CREATOR) AS 'MV002'
                                    ,GROUP_ID  AS 'GROUP_ID'
                                    ,TITLE_ID  AS 'TITLE_ID'
                                    FROM [TK].dbo.INVTL
                                    LEFT JOIN [TK].dbo.INVTM ON TL001=TM001 AND TL004=TM002 AND TM004 IN (
                                    	SELECT  
	                                    [TM004]      
	                                    FROM [TKRESEARCH].[dbo].[TB_INVTM_SETS]
                                    )
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].ACCOUNT= INVTL.CREATOR COLLATE Chinese_Taiwan_Stroke_BIN
                                    LEFT JOIN [192.168.1.223].[UOF].[dbo].[TB_EB_EMPL_DEP] ON [TB_EB_EMPL_DEP].USER_GUID=[TB_EB_USER].USER_GUID AND ORDERS='0'
                                    WHERE (TL001 LIKE '4%' OR TL001 LIKE '5%')
                                    AND TL010 NOT IN (
	                                    SELECT 
	                                    [TL010]
	                                    FROM [TKSCHEDULEUOF].[dbo].[TBINVMBTL010]
	                                    )
                                    AND TL005 LIKE '{0}%'
                                    ORDER BY TL005,TL001,TM004

                                    ", YEATERDAY);


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                // 設置查詢的超時時間，以秒為單位
                adapter1.SelectCommand.CommandTimeout = TIMEOUT_LIMITS;
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void NEW_TO_TKRESEARCH_TB_PROJECTS_PRODUCTS()
        {
            
            DataTable DT_FIND_FORM = FIND_FORM_2001();

            if (DT_FIND_FORM != null && DT_FIND_FORM.Rows.Count >= 1)
            {
                ADD_TKRESEARCH_TB_PROJECTS_PRODUCTS(DT_FIND_FORM);
                UPDATE_TKRESEARCH_TB_PROJECTS_PRODUCTS_NEW_NO();
            }           

        }
        public DataTable FIND_FORM_2001()
        {
            DataTable DT = new DataTable();
            SqlDataAdapter adapter1 = new SqlDataAdapter();
            SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();
            DataSet ds1 = new DataSet();

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sbSql.Clear();
                sbSqlQuery.Clear();               

                sbSql.AppendFormat(@"  
                                    SELECT *
                                    FROM 
                                    (                                    
                                    SELECT DOC_NBR
                                    ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""ID""]/@fieldValue)[1]', 'nvarchar(max)') AS 'ID'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD40""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD40'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD41""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD41'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD4""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD4'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD3""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD3'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD6""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD6'
                                    , TB_WKF_FORM.FORM_NAME
                                    , (SELECT TOP 1 NAME FROM[UOF].dbo.TB_EB_USER WHERE TB_EB_USER.USER_GUID = TB_WKF_TASK.USER_GUID) AS 'NAMES'

                                    FROM[UOF].dbo.TB_WKF_TASK,[UOF].dbo.TB_WKF_FORM,[UOF].dbo.TB_WKF_FORM_VERSION
                                    WHERE 1 = 1
                                    AND TB_WKF_TASK.FORM_VERSION_ID = TB_WKF_FORM_VERSION.FORM_VERSION_ID
                                    AND TB_WKF_FORM.FORM_ID = TB_WKF_FORM_VERSION.FORM_ID
                                    AND TB_WKF_FORM.FORM_NAME IN('2001.產品開發+包裝設計申請單')
                                    AND TB_WKF_TASK.TASK_STATUS = '2' AND TASK_RESULT = '0'
                                    

                                    ) AS TEMP
                                    WHERE 1 = 1
                                  
                                    AND DOC_NBR COLLATE Chinese_Taiwan_Stroke_BIN NOT IN (SELECT DOC_NBR FROM[192.168.1.105]. [TKRESEARCH].[dbo].[TB_PROJECTS_PRODUCTS] WHERE ISNULL(DOC_NBR, '') <> '')

                                    ");


                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");
                sqlConn.Close();

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];
                }
                else
                {
                    return null;
                }

            }
            catch
            {

            }
            finally
            {
                sqlConn.Close();
            }


            return DT;
        }

        public void ADD_TKRESEARCH_TB_PROJECTS_PRODUCTS(DataTable DT)
        {
            string DOC_NBR = null;
            string PROJECTNAMES = null;
            string OWNER = null;
            string KINDS = null;
            string STAGES = "進行中";
            string ISCLOSED = "N";
            string DESIGNER = "";

            StringBuilder SQL = new StringBuilder();
            SQL.Clear();

            foreach (DataRow dr in DT.Rows)
            {
                DOC_NBR = dr["DOC_NBR"].ToString();
                PROJECTNAMES = dr["FIELD3"].ToString();
                OWNER = dr["NAMES"].ToString();
                KINDS = dr["FIELD6"].ToString();
                DESIGNER = dr["FIELD41"].ToString();

                //正規表達式（Regex）取出名字
                string original = DESIGNER;
                string nameOnly = Regex.Match(original, @"^(.*?)\(").Groups[1].Value;
                DESIGNER = nameOnly;

                SQL.AppendFormat(@" 
                                INSERT INTO [TKRESEARCH].[dbo].[TB_PROJECTS_PRODUCTS]
                                ([DOC_NBR],[PROJECTNAMES],[OWNER],[KINDS],[STAGES],[ISCLOSED],[DESIGNER])
                                VALUES
                                ('{0}','{1}',N'{2}','{3}','{4}','{5}','{6}')
                                ", DOC_NBR, PROJECTNAMES, OWNER, KINDS, STAGES, ISCLOSED, DESIGNER);

            }

            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();


                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = SQL.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  
                    //Console.WriteLine("ADDTOUOFTB_EIP_SCH_MEMO_MOC OK");

                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }

        }

        public void UPDATE_TKRESEARCH_TB_PROJECTS_PRODUCTS_NEW_NO()
        {
            StringBuilder SQL = new StringBuilder();
            SQL.Clear();

            //NO的規格=西元年4碼+月份2碼+流水號2碼
            SQL.AppendFormat(@" 
                                DECLARE @Prefix VARCHAR(6) = CONVERT(VARCHAR(6), GETDATE(), 112); -- 例：202504
                                DECLARE @StartSeq INT;

                                -- 找出該年月中已存在的最大流水號
                                SELECT @StartSeq = 
                                MAX(CAST(RIGHT([NO], 2) AS INT))
                                FROM [TKRESEARCH].[dbo].[TB_PROJECTS_PRODUCTS]
                                WHERE [NO] LIKE @Prefix + '%'

                                -- 若沒找到，就從 0 開始（接下來會 +1）
                                IF @StartSeq IS NULL
                                SET @StartSeq = 0;

                                -- 用 CTE 給 NO 為空的資料編流水號
                                WITH CTE AS (
                                SELECT 
                                    ID,
                                    ROW_NUMBER() OVER (ORDER BY ID ASC) AS RowNum
                                FROM [TKRESEARCH].[dbo].[TB_PROJECTS_PRODUCTS]
                                WHERE ISNULL([NO], '') = ''  -- 僅限 NO 為空
                                )
                                UPDATE T
                                SET NO = @Prefix + RIGHT('00' + CAST(@StartSeq + C.RowNum AS VARCHAR), 2)
                                FROM [TKRESEARCH].[dbo].[TB_PROJECTS_PRODUCTS] T
                                JOIN CTE C ON T.ID = C.ID
                                WHERE ISNULL(T.NO, '') = '';  -- 再次保險：僅更新空值
                                ");
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();


                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = SQL.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  
                    //Console.WriteLine("ADDTOUOFTB_EIP_SCH_MEMO_MOC OK");

                }

            }
            catch
            {

            }

            finally
            {
                sqlConn.Close();
            }

        }
        public void ADD_UOF_FORM_2001A_TB_PROJECTS_PRODUCTS()
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp22"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();

                

                sbSql.AppendFormat(@"                                      
                                   SELECT 
                                    DOC_NBR AS 'DOC_NBR'
                                    ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FA""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FA'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD2""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD2'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD3""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD3'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD4""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD4'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD5""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD5'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD6""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD6'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD7""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD7'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD9""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD9'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD10""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD10'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD12""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD12'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD14""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD14'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD20""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD20'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD21""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD21'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD23""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD23'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD26""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD26'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD27""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD27'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD30""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD30'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD33""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD33'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD34""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD34'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD35""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD35'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD36""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD36'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD37""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD37'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD38""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD38'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD39""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD39'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD40""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD40'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD41""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD41'
                                    

                                   , TB_WKF_FORM.FORM_NAME
                                    , [TB_EB_USER].NAME AS 'NAME'
                                    , [TB_EB_USER].ACCOUNT  AS 'ACCOUNT'
                                    , [TB_EB_USER].USER_GUID AS 'USER_GUID'
                                    , [TB_EB_EMPL_DEP].GROUP_ID  AS 'GROUP_ID'
                                    , [TB_EB_EMPL_DEP].TITLE_ID  AS 'TITLE_ID'

                                    FROM[UOF].dbo.TB_WKF_TASK
                                    LEFT JOIN [UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].USER_GUID=TB_WKF_TASK.USER_GUID
                                    LEFT JOIN [UOF].[dbo].[TB_EB_EMPL_DEP] ON [TB_EB_EMPL_DEP].USER_GUID=[TB_EB_USER].USER_GUID AND ORDERS='0'
                                    ,[UOF].dbo.TB_WKF_FORM,[UOF].dbo.TB_WKF_FORM_VERSION
                                    WHERE 1 = 1
                                    AND TB_WKF_TASK.FORM_VERSION_ID = TB_WKF_FORM_VERSION.FORM_VERSION_ID
                                    AND TB_WKF_FORM.FORM_ID = TB_WKF_FORM_VERSION.FORM_ID
                                    AND TB_WKF_FORM.FORM_NAME IN('2001.產品開發+包裝設計申請單')
                                    AND TASK_RESULT NOT IN('1','2')
                                    AND DOC_NBR NOT IN 
                                    (
	                                    SELECT EXTERNAL_FORM_NBR
	                                    FROM [UOF].[dbo].[TB_WKF_EXTERNAL_TASK]
	                                    WHERE ISNULL(EXTERNAL_FORM_NBR,'')<>''
                                    )
                                  
                                    ");

                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");


                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {                   
                    foreach(DataRow DR in ds1.Tables["ds1"].Rows)
                    {
                        string DOC_NBR = DR["DOC_NBR"].ToString();
                        if (!string.IsNullOrEmpty(DOC_NBR))
                        {
                            ADD_UOF_FORM_2001A_TB_WKF_EXTERNAL_TASK(DOC_NBR);
                        }
                    }
                }
                else
                {

                }

            }
            catch
            {

            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void ADD_UOF_FORM_2001A_TB_WKF_EXTERNAL_TASK(string DOC_NBR)
        {
            DataTable DT = SEARCH_UOF_FORM_2001A(DOC_NBR);
            DataTable DTUPFDEP = SEARCHUOFDEP(DT.Rows[0]["ACCOUNT"].ToString());

            string account = DT.Rows[0]["ACCOUNT"].ToString();
            string groupId = DT.Rows[0]["GROUP_ID"].ToString();
            string jobTitleId = DT.Rows[0]["TITLE_ID"].ToString();
            string fillerName = DT.Rows[0]["NAME"].ToString();
            string fillerUserGuid = DT.Rows[0]["USER_GUID"].ToString();

            string DEPNAME = DTUPFDEP.Rows[0]["DEPNAME"].ToString();
            string DEPNO = DTUPFDEP.Rows[0]["DEPNO"].ToString();

            //string EXTERNAL_FORM_NBR = DT.Rows[0]["品號"].ToString().Trim();
            string EXTERNAL_FORM_NBR =  DT.Rows[0]["DOC_NBR"].ToString().Trim();

            int rowscounts = 0;

            XmlDocument xmlDoc = new XmlDocument();
            //建立根節點
            XmlElement Form = xmlDoc.CreateElement("Form");

            //正式的id
            string FORM_ID = SEARCHFORM_UOF_VERSION_ID("2001A.產品開發+包裝設計申請單(行企專用)");

            if (!string.IsNullOrEmpty(FORM_ID))
            {
                Form.SetAttribute("formVersionId", FORM_ID);
            }


            Form.SetAttribute("urgentLevel", "2");
            //加入節點底下
            xmlDoc.AppendChild(Form);

            ////建立節點Applicant
            XmlElement Applicant = xmlDoc.CreateElement("Applicant");
            Applicant.SetAttribute("account", account);
            Applicant.SetAttribute("groupId", groupId);
            Applicant.SetAttribute("jobTitleId", jobTitleId);
            //加入節點底下
            Form.AppendChild(Applicant);

            //建立節點 Comment
            XmlElement Comment = xmlDoc.CreateElement("Comment");
            Comment.InnerText = "申請者意見";
            //加入至節點底下
            Applicant.AppendChild(Comment);

            //建立節點 FormFieldValue
            XmlElement FormFieldValue = xmlDoc.CreateElement("FormFieldValue");
            //加入至節點底下
            Form.AppendChild(FormFieldValue);

            //建立節點FieldItem
            //ID 表單編號	
            XmlElement FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "ID");
            FieldItem.SetAttribute("fieldValue", "");
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //建立節點FieldItem
            //SDOC_NBR
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "SDOC_NBR");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["DOC_NBR"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //先找出第1個設計人員 
            //張璟瑩(220058)、黃量懋(240022)、嚴佳雯(240026)
            string FIELD41_fieldValue = "";
            string ACCOUNT = "";
            string FIELD41_realValue = "";
            // 找出第一個「、」的位置
            int index = DT.Rows[0]["FIELD41"].ToString().Trim().IndexOf('、');
            if (index > 0)
            {
                FIELD41_fieldValue = DT.Rows[0]["FIELD41"].ToString().Trim().Substring(0, index);
            }
            else
            {
                FIELD41_fieldValue = DT.Rows[0]["FIELD41"].ToString();
            }
            //找出第1個設計人員的USER_GUID
            //使用正則表達式擷取括號中的數字ACCOUNT
            Match match = Regex.Match(FIELD41_fieldValue.Trim(), @"\((\d+)\)");
            if (match.Success)
            {
                ACCOUNT = match.Groups[1].Value;
                DataTable DTS = FIND_UOF_TB_EB_USER_ACCOUNT(ACCOUNT);
                if (DTS != null && DTS.Rows.Count >= 1)
                {
                    FIELD41_realValue = DTS.Rows[0]["USER_GUID"].ToString();
                }
                //Console.WriteLine($"第一筆 ID 是: {id}");
            }
            else
            {
                //找不到設計人員 ACCOUNT 就不繼續
                //return;
            }
            //先組出USERSET的XML
            XmlDocument doc = new XmlDocument();
            // 建立根節點 <UserSet>
            XmlElement root = doc.CreateElement("UserSet");
            doc.AppendChild(root);
            // 建立 <Element type='user'>
            XmlElement element = doc.CreateElement("Element");
            element.SetAttribute("type", "user");
            // 建立 <userId> 並設定內容
            XmlElement userId = doc.CreateElement("userId");
            userId.InnerText = FIELD41_realValue;
            // 組裝節點
            element.AppendChild(userId);
            root.AppendChild(element);

            //建立節點FieldItem
            //FIELD41
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD41");
            FieldItem.SetAttribute("fieldValue", FIELD41_fieldValue);
            FieldItem.SetAttribute("realValue", "");
            //FieldItem.SetAttribute("realValue", root.OuterXml);
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);

            //
            //建立節點FieldItem
            //FIELD2
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD2");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD2"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD3
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD3");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD3"].ToString().Trim());
            FieldItem.SetAttribute("realValue","");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD4
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD4");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD4"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD5
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD5");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD5"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD6
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD6");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD6"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD7
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD7");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD7"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD9
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD9");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD9"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD10
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD10");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD10"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD12
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD12");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD12"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD14
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD14");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD14"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD20
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD20");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD20"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD21
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD21");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD21"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD23
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD23");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD23"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD26
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD26");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD26"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD27
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD27");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD27"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD30
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD30");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD30"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD33
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD33");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD33"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD34
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD34");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD34"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD35
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD35");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD35"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD36
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD36");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD36"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD37
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD37");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD37"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD38
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD38");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD38"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //建立節點FieldItem
            //FIELD39
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD39");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD39"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);
            //FIELD40
            FieldItem = xmlDoc.CreateElement("FieldItem");
            FieldItem.SetAttribute("fieldId", "FIELD40");
            FieldItem.SetAttribute("fieldValue", DT.Rows[0]["FIELD40"].ToString().Trim());
            FieldItem.SetAttribute("realValue", "");
            FieldItem.SetAttribute("enableSearch", "True");
            FieldItem.SetAttribute("fillerName", fillerName);
            FieldItem.SetAttribute("fillerUserGuid", fillerUserGuid);
            FieldItem.SetAttribute("fillerAccount", account);
            FieldItem.SetAttribute("fillSiteId", "");
            //加入至members節點底下
            FormFieldValue.AppendChild(FieldItem);



            ////用ADDTACK，直接啟動起單
            //ADDTACK(Form);

            //ADD TO DB
            ////string connectionString = ConfigurationManager.ConnectionStrings["dbUOF"].ToString();

            //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
            //sqlConn = new SqlConnection(connectionString);

            //20210902密
            Class1 TKID = new Class1();//用new 建立類別實體
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

            //資料庫使用者密碼解密
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            String connectionString;
            sqlConn = new SqlConnection(sqlsb.ConnectionString);
            connectionString = sqlConn.ConnectionString.ToString();

            StringBuilder queryString = new StringBuilder();




            queryString.AppendFormat(@" INSERT INTO [{0}].dbo.TB_WKF_EXTERNAL_TASK
                                         (EXTERNAL_TASK_ID,FORM_INFO,STATUS,EXTERNAL_FORM_NBR)
                                        VALUES (NEWID(),@XML,2,'{1}')
                                        ", DBNAME, EXTERNAL_FORM_NBR);

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {

                    SqlCommand command = new SqlCommand(queryString.ToString(), connection);
                    command.Parameters.Add("@XML", SqlDbType.NVarChar).Value = Form.OuterXml;

                    command.Connection.Open();

                    int count = command.ExecuteNonQuery();

                    connection.Close();
                    connection.Dispose();

                }
            }
            catch
            {

            }
            finally
            {

            }
        }
        public DataTable SEARCH_UOF_FORM_2001A(string DOC_NBR)
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();



                sbSql.AppendFormat(@"                                      
                                   SELECT 
                                    DOC_NBR AS 'DOC_NBR'
                                    ,CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FA""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FA'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD2""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD2'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD3""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD3'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD4""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD4'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD5""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD5'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD6""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD6'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD7""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD7'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD9""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD9'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD10""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD10'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD12""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD12'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD14""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD14'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD20""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD20'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD21""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD21'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD23""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD23'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD26""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD26'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD27""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD27'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD30""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD30'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD33""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD33'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD34""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD34'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD35""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD35'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD36""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD36'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD37""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD37'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD38""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD38'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD39""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD39'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD40""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD40'
                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD41""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD41'

                                   , TB_WKF_FORM.FORM_NAME
                                    , [TB_EB_USER].NAME AS 'NAME'
                                    , [TB_EB_USER].ACCOUNT  AS 'ACCOUNT'
                                    , [TB_EB_USER].USER_GUID AS 'USER_GUID'
                                    , [TB_EB_EMPL_DEP].GROUP_ID  AS 'GROUP_ID'
                                    , [TB_EB_EMPL_DEP].TITLE_ID  AS 'TITLE_ID'

                                    FROM[UOF].dbo.TB_WKF_TASK
                                    LEFT JOIN [UOF].[dbo].[TB_EB_USER] ON [TB_EB_USER].USER_GUID=TB_WKF_TASK.USER_GUID
                                    LEFT JOIN [UOF].[dbo].[TB_EB_EMPL_DEP] ON [TB_EB_EMPL_DEP].USER_GUID=[TB_EB_USER].USER_GUID AND ORDERS='0'
                                    ,[UOF].dbo.TB_WKF_FORM,[UOF].dbo.TB_WKF_FORM_VERSION
                                    WHERE 1 = 1
                                    AND TB_WKF_TASK.FORM_VERSION_ID = TB_WKF_FORM_VERSION.FORM_VERSION_ID
                                    AND TB_WKF_FORM.FORM_ID = TB_WKF_FORM_VERSION.FORM_ID
                                    AND TB_WKF_FORM.FORM_NAME IN('2001.產品開發+包裝設計申請單')
                                    AND TASK_RESULT NOT IN('1','2')
                                    AND DOC_NBR NOT IN 
                                    (
	                                    SELECT EXTERNAL_FORM_NBR
	                                    FROM [UOF].[dbo].[TB_WKF_EXTERNAL_TASK]
	                                    WHERE ISNULL(EXTERNAL_FORM_NBR,'')<>''
                                    )
                                    AND DOC_NBR='{0}'
                                    ",DOC_NBR);

                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }
        public DataTable FIND_UOF_TB_EB_USER_ACCOUNT(string ACCOUNT)
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();



                sbSql.AppendFormat(@"                                      
                                    SELECT 
                                    ACCOUNT,NAME,USER_GUID
                                    FROM [UOF].[dbo].[TB_EB_USER]
                                    WHERE ACCOUNT='{0}'
                                    ", ACCOUNT);

                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void UPDATE_TB_PROJECTS_PRODUCTS_DESIGNER()
        {
            //因為是linked server，所以要分段查詢+更新
            DataTable DT = FIND_TB_PROJECTS_PRODUCTS_DESIGNER();

            if(DT!=null && DT.Rows.Count>=1)
            {
                UPDATE_TB_PROJECTS_PRODUCTS_DESIGNER_EXE(DT);
            }
        }
        public void UPDATE_TB_PROJECTS_PRODUCTS_DESIGNER_EXE(DataTable DT)
        {
            string DOC_NBR = "";
            string FirstNameFIELD41 = "";

            StringBuilder SQLEXE = new StringBuilder();

            if (DT != null && DT.Rows.Count >= 1)
            {
               foreach(DataRow DR in DT.Rows)
                {
                    DOC_NBR = DR["DOC_NBR"].ToString();
                    FirstNameFIELD41 = DR["FirstNameFIELD41"].ToString();

                    SQLEXE.AppendFormat(@"
                                        UPDATE [TKRESEARCH].[dbo].[TB_PROJECTS_PRODUCTS]
                                        SET [DESIGNER]='{1}'
                                        WHERE [DOC_NBR]='{0}'

                                        ", DOC_NBR,FirstNameFIELD41);
                }
            }


            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                sqlConn.Close();
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                sbSql.Clear();

                sbSql = SQLEXE;

                cmd.Connection = sqlConn;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();
                cmd.Transaction = tran;
                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();    //交易取消
                }
                else
                {
                    tran.Commit();      //執行交易  
                }

            }
            catch(Exception ex)
            {

            }

            finally
            {
                sqlConn.Close();
            }
        }

        public DataTable FIND_TB_PROJECTS_PRODUCTS_DESIGNER()
        {
            try
            {
                //connectionString = ConfigurationManager.ConnectionStrings["dberp"].ConnectionString;
                //sqlConn = new SqlConnection(connectionString);

                //20210902密
                Class1 TKID = new Class1();//用new 建立類別實體
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                //資料庫使用者密碼解密
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                String connectionString;
                sqlConn = new SqlConnection(sqlsb.ConnectionString);

                DataSet ds1 = new DataSet();
                SqlDataAdapter adapter1 = new SqlDataAdapter();
                SqlCommandBuilder sqlCmdBuilder1 = new SqlCommandBuilder();

                sbSql.Clear();
                sbSqlQuery.Clear();



                sbSql.AppendFormat(@"                                      
                                   SELECT 
                                    [TB_PROJECTS_PRODUCTS].DOC_NBR
                                    ,[TB_PROJECTS_PRODUCTS].[DESIGNER]
                                    ,SDOC_NBR
                                    ,FIELD41
                                    ,LEFT(FIELD41, CHARINDEX('(', FIELD41) - 1) AS FirstNameFIELD41
                                    FROM 
                                    (
	                                    SELECT 
	                                    TB_WKF_TASK.DOC_NBR AS 'DOC_NBR'
	                                    , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""SDOC_NBR""]/@fieldValue)[1]', 'nvarchar(max)') AS 'SDOC_NBR'                 
                                        , CURRENT_DOC.value('(Form/FormFieldValue/FieldItem[@fieldId=""FIELD41""]/@fieldValue)[1]', 'nvarchar(max)') AS 'FIELD41'

                                        , TB_WKF_FORM.FORM_NAME
                                        , [TB_EB_USER].NAME AS 'NAME'
                                        , [TB_EB_USER].ACCOUNT  AS 'ACCOUNT'
                                        , [TB_EB_USER].USER_GUID AS 'USER_GUID'
                                        , [TB_EB_EMPL_DEP].GROUP_ID  AS 'GROUP_ID'
                                        , [TB_EB_EMPL_DEP].TITLE_ID  AS 'TITLE_ID'


                                        FROM[UOF].dbo.TB_WKF_TASK

                                        LEFT JOIN[UOF].[dbo].[TB_EB_USER] ON[TB_EB_USER].USER_GUID = TB_WKF_TASK.USER_GUID

                                        LEFT JOIN[UOF].[dbo].[TB_EB_EMPL_DEP] ON[TB_EB_EMPL_DEP].USER_GUID =[TB_EB_USER].USER_GUID AND ORDERS = '0'
                                        ,[UOF].dbo.TB_WKF_FORM,[UOF].dbo.TB_WKF_FORM_VERSION

                                        WHERE 1 = 1

                                        AND TB_WKF_TASK.FORM_VERSION_ID = TB_WKF_FORM_VERSION.FORM_VERSION_ID

                                        AND TB_WKF_FORM.FORM_ID = TB_WKF_FORM_VERSION.FORM_ID

                                        AND TB_WKF_FORM.FORM_NAME IN('2001A.產品開發+包裝設計申請單(行企專用)')
                                    )  AS TEMP
                                    ,[192.168.1.105].[TKRESEARCH].[dbo].[TB_PROJECTS_PRODUCTS]
                                            WHERE[TB_PROJECTS_PRODUCTS].[DOC_NBR]=TEMP.SDOC_NBR COLLATE Chinese_Taiwan_Stroke_CI_AS
                                    AND ISNULL([TB_PROJECTS_PRODUCTS].[DESIGNER],'')=''
                                    AND ISNULL(FIELD41,'')<>''
                      

                                    ");

                adapter1 = new SqlDataAdapter(@"" + sbSql, sqlConn);

                sqlCmdBuilder1 = new SqlCommandBuilder(adapter1);
                sqlConn.Open();
                ds1.Clear();
                adapter1.Fill(ds1, "ds1");

                if (ds1.Tables["ds1"].Rows.Count >= 1)
                {
                    return ds1.Tables["ds1"];

                }
                else
                {
                    return null;
                }

            }
            catch
            {
                return null;
            }
            finally
            {
                sqlConn.Close();
            }
        }

        public void NEWPURTGPURTH_AGAIN_APPLY()
        {
            DataTable dt = FIND_NEWPURTGPURTH_AGAIN_APPLY();

            if (dt == null || dt.Rows.Count == 0)
            {
                return; // 沒資料，無需處理
            }

            // 組出 IN ('AAA001','AAA002',...)
            List<string> tgKeys = new List<string>();
            foreach (DataRow row in dt.Rows)
            {
                string tg001 = row["TG001"].ToString().Trim();
                string tg002 = row["TG002"].ToString().Trim();
                tgKeys.Add($"'{tg001 + tg002}'");
            }

            string whereInClause = $"TG001 + TG002 IN ({string.Join(",", tgKeys)})";

            try
            {
                // 解密連線
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
                {
                    conn.Open();
                    using (SqlTransaction tran = conn.BeginTransaction())
                    using (SqlCommand cmd = conn.CreateCommand())
                    {
                        cmd.Transaction = tran;
                        cmd.CommandTimeout = 60;
                        cmd.CommandText = $@"
                                            UPDATE [TK].dbo.PURTG
                                            SET UDF01 = 'Y'
                                            WHERE {whereInClause}
                                        ";

                        int result = cmd.ExecuteNonQuery();

                        if (result > 0)
                        {
                            tran.Commit();
                        }
                        else
                        {
                            tran.Rollback();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 加入錯誤處理（可用 Log 機制記錄）
                Console.WriteLine("錯誤：" + ex.Message);
                // 或記錄到 Log 檔
            }
        }
        public DataTable FIND_NEWPURTGPURTH_AGAIN_APPLY()
        {
            try
            {
                // 解密連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    var sbSql = new StringBuilder();
                    sbSql.Append(@"
                                    SELECT 
                                        TG001, TG002, UDF01, STATUS, EXTERNAL_FORM_NBR, DOC_NBR, EXCEPTION_MSG
                                    FROM [192.168.1.105].[TK].dbo.PURTG
                                    LEFT JOIN [UOF].[dbo].[TB_WKF_EXTERNAL_TASK] 
                                        ON EXTERNAL_FORM_NBR = TG001 + TG002 COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE UDF01 = 'UOF'
                                        AND STATUS = '0'
                                        AND TG013 = 'N'
                                ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        DataSet ds = new DataSet();
                        adapter.Fill(ds, "ds1");

                        return ds.Tables["ds1"].Rows.Count > 0 ? ds.Tables["ds1"] : null;
                    }
                }
            }
            catch
            {
                return null;
            }
        }
        public void ADDUOFQCINVTAINVTB_AGAIN_APPLY()
        {
            DataTable DT = FIND_ADDUOFQCINVTAINVTB_AGAIN_APPLY();
            StringBuilder SB_SQL_EXE = new StringBuilder();

            if (DT != null && DT.Rows.Count > 0)
            {
                // 組成 WHERE IN 條件
                SB_SQL_EXE.Append(" TA001 + TA002 IN (");

                for (int i = 0; i < DT.Rows.Count; i++)
                {
                    string ta001 = DT.Rows[i]["TA001"].ToString().Trim();
                    string ta002 = DT.Rows[i]["TA002"].ToString().Trim();

                    SB_SQL_EXE.AppendFormat("'{0}{1}'", ta001, ta002);

                    if (i < DT.Rows.Count - 1)
                    {
                        SB_SQL_EXE.Append(", ");
                    }
                }

                SB_SQL_EXE.Append(")");
            }
            else
            {
                // 無資料就直接結束
                return;
            }

            SqlConnection sqlConn = null;
            SqlTransaction tran = null;
            SqlCommand cmd = new SqlCommand();
            StringBuilder sbSql = new StringBuilder();
            int result = 0;

            try
            {
                // 解密連線字串
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);

                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                sqlConn = new SqlConnection(sqlsb.ConnectionString);
                sqlConn.Open();
                tran = sqlConn.BeginTransaction();

                // 組 UPDATE 語法
                sbSql.AppendFormat(@"
                                    UPDATE [TK].dbo.INVTA
                                    SET UDF01 = 'Y'
                                    WHERE 1=1
                                      AND {0}
                                ", SB_SQL_EXE.ToString());

                // 執行 SQL
                cmd.Connection = sqlConn;
                cmd.Transaction = tran;
                cmd.CommandTimeout = 60;
                cmd.CommandText = sbSql.ToString();

                result = cmd.ExecuteNonQuery();

                if (result == 0)
                {
                    tran.Rollback();
                }
                else
                {
                    tran.Commit();
                }
            }
            catch (Exception ex)
            {
                tran?.Rollback();
                // 建議寫入 log 或顯示錯誤
                Console.WriteLine("更新 INVTA 時發生錯誤：" + ex.Message);
            }
            finally
            {
                sqlConn?.Close();
            }
        }
        public DataTable FIND_ADDUOFQCINVTAINVTB_AGAIN_APPLY()
        {
            DataTable dt = new DataTable();

            Class1 TKID = new Class1();
            SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
            sqlsb.Password = TKID.Decryption(sqlsb.Password);
            sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

            string sql = @"
                        SELECT 
                            TA001, TA002, UDF01, STATUS, EXTERNAL_FORM_NBR, DOC_NBR, EXCEPTION_MSG
                        FROM [192.168.1.105].[TK].dbo.INVTA
                        LEFT JOIN [UOF].[dbo].[TB_WKF_EXTERNAL_TASK]
                            ON EXTERNAL_FORM_NBR = TA001 + TA002 COLLATE Chinese_Taiwan_Stroke_BIN
                        WHERE UDF01 = 'UOF'
                            AND STATUS = '0'
                            AND TA006 = 'N' ";

            using (SqlConnection conn = new SqlConnection(sqlsb.ConnectionString))
            using (SqlCommand cmd = new SqlCommand(sql, conn))
            using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
            {
                adapter.Fill(dt);
            }

            return dt.Rows.Count > 0 ? dt : null;
        }
        public void NEWPUR_MOCTH_MOCTI_AGAIN_APPLY()
        {
            DataTable DT = FIND_NEWPUR_MOCTH_MOCTI_AGAIN_APPLY();
            StringBuilder SB_SQL_EXE = new StringBuilder();

            if (DT != null && DT.Rows.Count >= 1)
            {
                SB_SQL_EXE.Append(" TH001 + TH002 IN (");

                for (int i = 0; i < DT.Rows.Count; i++)
                {
                    string ta001 = DT.Rows[i]["TH001"].ToString().Trim();
                    string ta002 = DT.Rows[i]["TH002"].ToString().Trim();

                    SB_SQL_EXE.AppendFormat("'{0}{1}'", ta001, ta002);

                    if (i < DT.Rows.Count - 1)
                    {
                        SB_SQL_EXE.Append(", ");
                    }
                }

                SB_SQL_EXE.Append(")");
            }

            if (DT != null && DT.Rows.Count >= 1)
            {
                try
                {
                    Class1 TKID = new Class1();
                    SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dberp"].ConnectionString);
                    sqlsb.Password = TKID.Decryption(sqlsb.Password);
                    sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                    using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                    {
                        sqlConn.Open();
                        using (SqlTransaction tran = sqlConn.BeginTransaction())
                        {
                            string updateSql = $@"
                                                UPDATE [TK].dbo.MOCTH
                                                SET UDF01 = 'Y'
                                                WHERE 1 = 1
                                                AND {SB_SQL_EXE.ToString()}
                                            ";

                            using (SqlCommand cmd = new SqlCommand(updateSql, sqlConn, tran))
                            {
                                cmd.CommandTimeout = 60;
                                int result = cmd.ExecuteNonQuery();

                                if (result == 0)
                                {
                                    tran.Rollback();
                                }
                                else
                                {
                                    tran.Commit();
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    // 可選：寫入 log 或提示錯誤
                    Console.WriteLine("錯誤：" + ex.Message);
                }
            }
        }

        public DataTable FIND_NEWPUR_MOCTH_MOCTI_AGAIN_APPLY()
        {
            try
            {
                Class1 TKID = new Class1();
                SqlConnectionStringBuilder sqlsb = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["dbUOF"].ConnectionString);

                // 解密帳號密碼
                sqlsb.Password = TKID.Decryption(sqlsb.Password);
                sqlsb.UserID = TKID.Decryption(sqlsb.UserID);

                using (SqlConnection sqlConn = new SqlConnection(sqlsb.ConnectionString))
                {
                    StringBuilder sbSql = new StringBuilder();

                    sbSql.Append(@"
                                    SELECT 
                                        TH001, TH002, UDF01, STATUS, EXTERNAL_FORM_NBR, DOC_NBR, EXCEPTION_MSG
                                    FROM [192.168.1.105].[TK].dbo.MOCTH
                                    LEFT JOIN [UOF].[dbo].[TB_WKF_EXTERNAL_TASK] 
                                        ON EXTERNAL_FORM_NBR = TH001 + TH002 COLLATE Chinese_Taiwan_Stroke_BIN
                                    WHERE UDF01 IN ('UOF')
                                        AND STATUS IN ('0')
                                        AND TH023 IN ('N')
                                ");

                    using (SqlDataAdapter adapter = new SqlDataAdapter(sbSql.ToString(), sqlConn))
                    {
                        DataSet ds = new DataSet();
                        sqlConn.Open();
                        adapter.Fill(ds, "ds1");

                        if (ds.Tables["ds1"].Rows.Count > 0)
                        {
                            return ds.Tables["ds1"];
                        }
                        else
                        {
                            return null;
                        }
                    }
                }
            }
            catch
            {
                return null;
            }
        }



        #endregion

        #region BUTTON
        private void button1_Click(object sender, EventArgs e)
        {
            BASELIMITHRSBAR1 = SEARCHBASELIMITHRS("製一線桶數");
            BASELIMITHRSBAR1 = Math.Round(BASELIMITHRSBAR1,0);
            BASELIMITHRSBAR2 = SEARCHBASELIMITHRS("製二線桶數");
            BASELIMITHRSBAR2 = Math.Round(BASELIMITHRSBAR2, 0);

            BASELIMITHRS1 = SEARCHBASELIMITHRS("製一線稼動率時數");
            BASELIMITHRS2 = SEARCHBASELIMITHRS("製二線稼動率時數");
            BASELIMITHRS3 = SEARCHBASELIMITHRS("手工線稼動率時數");
            BASELIMITHRS9 = SEARCHBASELIMITHRS("包裝線稼動率時數");

            ADDTOUOFTB_EIP_SCH_MEMO_MOC(DateTime.Now.ToString("yyyyMMdd"));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            ADDTOUOFTB_EIP_SCH_MEMO_PUR(DateTime.Now.ToString("yyyyMMdd"));
        }

        private void button3_Click(object sender, EventArgs e)
        {
            ADDTOUOFTB_EIP_SCH_MEMO_COP(DateTime.Now.ToString("yyyyMMdd"));
        }
        private void button4_Click(object sender, EventArgs e)
        {
            //UPDATEtb_COMPANYSTATUS1();
            //UPDATEtb_COMPANYSTATUS2();
        }
        private void button5_Click(object sender, EventArgs e)
        {
            //ADDtb_COMPANY();
        }

        private void button6_Click(object sender, EventArgs e)
        {
            //UPDATEtb_COMPANYOWNER_ID();
        }
        private void button7_Click(object sender, EventArgs e)
        {
            //ERP請購單>轉入UOF簽核
            ADDTOUOFPURTAB();
            //ADDTB_WKF_EXTERNAL_TASK("A311", "20210415007");
        }
        private void button8_Click(object sender, EventArgs e)
        {
            //別用，改UOF送單
            //ADDCOPTCCOPTD();
        }
        private void button9_Click(object sender, EventArgs e)
        {
            //別用，改UOF送單
            //ADDCOPTECOPTF();
        }
        private void button10_Click(object sender, EventArgs e)
        {
            //人資的表單申請，如果退回申請人就自動作廢
            UPDATE_TB_WKF_TASK_TASK_RESULT();
        }

        private void button11_Click(object sender, EventArgs e)
        {
            //UOF門市督導轉入DB
            ADDTKMKdboTBSTORESCHECK();
            //SEARCHUOFTB_WKF_TASK();
        }
        private void button12_Click(object sender, EventArgs e)
        {
            //20230529
            // 02.老楊出差訓練及外出申請單 轉 2001.教育訓練課程心得報告 
            //20230721 暫停
            CHECKADDTOUOFFORMEDUCATION();

        }
        private void button13_Click(object sender, EventArgs e)
        {
            //出差報告單
            //20230721 暫停
            CHECKADDTOUOFFORBUSINESSTRIPS();
        }

       
        private void button15_Click(object sender, EventArgs e)
        {
            //ERP採購單>轉入UOF簽核
            NEWPURTCPURTD();
        }

        private void button16_Click(object sender, EventArgs e)
        {
            //ERP採購變更單 > 轉入UOF簽核
            NEWPURTEPURTF();
        }
        private void button17_Click(object sender, EventArgs e)
        {
            //將MOCMANULINEMERGE 預排的訂單，新增到MOCUE中
            //20250806 停用
            ADDTOERPTKMOCUE();
        }
        private void button18_Click(object sender, EventArgs e)
        {
            //停用-轉入進貨單到品保檢
            //20250806 停用
            ADDTKQCQCPURTH();
        }

        private void button19_Click(object sender, EventArgs e)
        {
            //ERP採購核價單>轉入UOF簽核
            NEWPURTLPURTMPURTN();
        }
        private void button20_Click(object sender, EventArgs e)
        {
            //PURA0.進貨-原物料品質驗收單
            NEWPURTGPURTH();
        }
        private void button21_Click(object sender, EventArgs e)
        {
            //ERPBOM表變更單>轉入UOF簽核
            NEWBOMTABOMTBBOMTC();
        }

        private void button22_Click(object sender, EventArgs e)
        {
            //UOF PURA0.進貨-原物料品質驗收單轉入DB           
            ADDTKQCUOFQCPURTGPURTH();
        }
        private void button23_Click(object sender, EventArgs e)
        {
            //ERP製令單>轉入UOF簽核
            //停用
            //改用訂單協調
            ADDUOFMOCTAMOCTB();
        }
        private void button24_Click(object sender, EventArgs e)
        {
            //ACRI02.結帳單
            //ERP結帳單>轉入UOF簽核
            ADDUOFACRTAACRTB();
        }
        private void button25_Click(object sender, EventArgs e)
        {
            //ACRI03.收款單 
            //ERP收款單 >轉入UOF簽核
            ADDUOFACRTCACRTD();
        }
        private void button26_Click(object sender, EventArgs e)
        {
            //ACPI02.應付憑單
            //ERP應付憑單>轉入UOF簽核
            ADDUOFACPTAACPTB();
        }

        private void button27_Click(object sender, EventArgs e)
        {
            //ACPI03.付款單
            //ERP付款單>轉入UOF簽核
            ADDUOFACPTCACPTB();
        }
        private void button28_Click(object sender, EventArgs e)
        {
            //ACTI10.會計傳票 
            //ERP會計傳票 >轉入UOF簽核
            ADDUOFACTTAACTTB();
        }
        private void button29_Click(object sender, EventArgs e)
        {
            //ASTI02.資產資料建立作業
            //ERP資產資料>轉入UOF簽核
            ADDUOFASTMBASTMC();
        }
          private void button30_Click(object sender, EventArgs e)
        {
            //ASTI06.資產改良建立作業
            //ERP資產改良>轉入UOF簽核
            ADDUOFASTMBASTMCASTTCASTTD();
        }

        private void button31_Click(object sender, EventArgs e)
        {
            //ASTI07.資產重估建立作業
            //ERP資產重估>轉入UOF簽核
            ADDUOFASTMBASTMCASTTCASTTD_ACTI07();
        }

        private void button32_Click(object sender, EventArgs e)
        {
            //ASTI08.資產報廢建立作業
            //ERP資產報廢>轉入UOF簽核
            ADDUOFASTMBASTMCASTTCASTTD_ACTI08();
        }

        private void button33_Click(object sender, EventArgs e)
        {
            //ASTI09.資產出售建立作業
            //ERP資產出售>轉入UOF簽核
            ADDUOFASTMBASTMCASTTCASTTD_ACTI09();
        }

        private void button34_Click(object sender, EventArgs e)
        {
            //ASTI10.資產調整建立作業
            //ERP資產調整>轉入UOF簽核
            ADDUOFASTMBASTMCASTTCASTTD_ACTI10();
        }

        private void button35_Click(object sender, EventArgs e)
        {
            //ASTI11.資產折舊建立作業
            //ERP資產折舊>轉入UOF簽核
            ADDUOFASTMBASTMCASTTCASTTD_ACTI11();
        }

        private void button36_Click(object sender, EventArgs e)
        {
            //ASTI12.資產移轉建立作業
            //ERP資產移轉>轉入UOF簽核
            ADDUOFASTMBASTMCASTTEASTTE();
        }

        private void button37_Click(object sender, EventArgs e)
        {
            //MOCI12.製令變更單
            //ERP製令變更單>轉入UOF簽核
            //沒有使用
            //改用UOF的訂單變更協調
            ADDUOFMOCTOMOCTP();
        }
        private void button38_Click(object sender, EventArgs e)
        {
            //A11A客供入料單同進貨單跑進貨驗收流程
            //ERP客供>轉入UOF簽核
            ADDUOFQCINVTAINVTB();

        }
        private void button39_Click(object sender, EventArgs e)
        {
            //取消不用
            //UOF送單
            //ERP報價單 >轉入UOF簽核
            ADDCOPMACOPMBCOPMC();
        }
        private void button40_Click(object sender, EventArgs e)
        {
            //取消不用
            //匯入UOF的門市營業日誌
            ADDTKMKdboTBSTOREDAILY();
        }

        private void button41_Click(object sender, EventArgs e)
        {
            //由客訴1002轉1001
            ADD_TO_UOF_QC1001();
        }
        private void button42_Click(object sender, EventArgs e)
        {
            //暫停不轉入總務的外掛
            //改轉入UOF表單 1005.雜項採購單中 
            NEWBUYITEM();
        }
        private void button43_Click(object sender, EventArgs e)
        {
            //把UOF的1003.雜項請購單，在核單後，轉到UOF的 	1005.雜項採購單
            //將請購單，分品項都各自建立1張採購單給總務
            //ADD_UOF_FORM_GRAFFIRS_1005();

            //把UOF的1003.雜項請購單，在核成後，轉到UOF的 	1005.雜項採購單
            //請購單的廠商是未指定=空白
            string DEFAUL_NAME = "王嘩芝";
            ADD_UOF_FORM_GRAFFIRS_1005_GG004_NULL(DEFAUL_NAME);
            //會依請購單的廠商有指定，合併採購單
            //預設總務的請購人=150010 
            string ACCOUNT = "000002";
            ADD_UOF_FORM_GRAFFIRS_1005_GG004_NOT_NULL(ACCOUNT, DEFAUL_NAME);

            //更新附件
            UPDATE_UOF_GA1005_ATTACH_ID();
            MessageBox.Show("完成");

        }

        private void button44_Click(object sender, EventArgs e)
        {
            //把UOF的1005.雜項採購單 ，在核成後，轉到 [TKGAFFAIRS].[dbo].[BUYITEMREPORTS] 當報表
            //1005.雜項採購單入總務系統
            ADD_TKGAFFAIRS_BUYITEMREPORTS();
        }

        private void button45_Click(object sender, EventArgs e)
        {
            //ERP PUR70.退貨單>轉入UOF簽核
            //沒有使用
            NEW_PURTGPURIJ();
        }
        private void button46_Click(object sender, EventArgs e)
        {
            //ERP COP30.銷貨單 > 轉入UOF簽核
            //沒有使用
            NEW_COPTGCOPTH();
        }
        private void button47_Click(object sender, EventArgs e)
        {
            //ERP COP40.銷退單>轉入UOF簽核
            //沒有使用
            NEW_COPTICOPTJ();
        }
        private void button48_Click(object sender, EventArgs e)
        {
            //ERP-INVI05.庫存異動單>轉入UOF簽核
            //沒有使用
            NEW_INVTAINVTB();
        }

        private void button49_Click(object sender, EventArgs e)
        {
            //ERP-IINVI08.轉撥單
            NEW_INVTAINVTB_TRANS();
        }
        private void button50_Click(object sender, EventArgs e)
        {
            //轉入1001.客訴品質異常處理單
            //沒有使用
            NEWTBUOFQC1001();
        }


        private void button51_Click(object sender, EventArgs e)
        {
            //ERP-INVI07成本開帳調整單>轉入UOF簽核
            //沒有使用
            NEW_INVTJINVTK();
        }

        private void button52_Click(object sender, EventArgs e)
        {
            //ERP-MOCI06託外進貨單>轉入UOF簽核
            //沒有使用
            NEW_MOCTH_MOCTI();
        }
        private void button53_Click(object sender, EventArgs e)
        {
            //ERP-MOCI07.託外退貨單>轉入UOF簽核
            //沒有使用
            NEW_MOCTK_MOCTL();
        }
        private void button54_Click(object sender, EventArgs e)
        {
            //ERP-MOCI05.生產入庫單>轉入UOF簽核
            //沒有使用
            NEW_MOCTF_MOCTG();
        }
        private void button55_Click(object sender, EventArgs e)
        {
            //轉入13.研發類表單:1002.設計需求內容清單
            NEW_TKRESEARCH_TK_UOF_RESEARCH_1002();
        }
        private void button56_Click(object sender, EventArgs e)
        {
            //轉入10.行企類表單-1002.產品設計申請
            NEW_TKRESEARCH_TK_UOF_DESIGN_1002();
        }

        private void button57_Click(object sender, EventArgs e)
        {
            //ERP-MOCI03.領料單>轉入UOF簽核
            //沒有使用
            NEW_MOCTC_MOCTE();
        }
        private void button58_Click(object sender, EventArgs e)
        {
            //ERP-BOM表>轉入UOF簽核
            NEW_BOMMC_BOMMD();
        }
        private void button59_Click(object sender, EventArgs e)
        {
            //ERP-EBOM表>轉入UOF簽核
            NEW_BOMMJ_BOMMK();
        }
        private void button60_Click(object sender, EventArgs e)
        {
            //ERP的品號，轉入EBOM品號
            NEW_BOMMI();
        }
        private void button61_Click(object sender, EventArgs e)
        {
            //ERP-MOCI03.退料單>轉入UOF簽核
            //沒有使用
            NEW_MOCTC_MOCTE_B();
        }
        private void button62_Click(object sender, EventArgs e)
        {
            //轉入-行銷廣告的活動成效記錄表
            //沒有使用
            ADD_TBPROMOTIONNFEE();
        }
        private void button63_Click(object sender, EventArgs e)
        {
            //更新官網訂單宅配
            COPTC_TC010_TC011_UPDATE();
        }
        private void button64_Click(object sender, EventArgs e)
        {
            //更新工程品號基本資料檔
            UPDATE_TK_BOMMI();
        }
        private void button65_Click(object sender, EventArgs e)
        {
            //更新銷貨代收貨款
            UPDATE_TK_COPTGTG113();
        }

        private void button66_Click(object sender, EventArgs e)
        {
            //轉入1006.委外送驗申請單
            NEWUOFQC1006();
        }
        private void button67_Click(object sender, EventArgs e)
        {
            //指定MA001產生「100A.客戶基本資料表」，給會計師稽核
            //產生到草稿後，等正式產生表單
            //國外、國內的簽核人不同
            //一律用IT代簽，把表單簽完成

            //修改簽核人跟簽核時間
            //TABLE:「TB_WKF_TASK_NODE」
            //用「TASK_ID」找出簽核流程
            //「ORIGINAL_SIGNER」=「ACTUAL_SIGNER」把簽核人都改回原簽核人
            //「ASSIGN_USER_GUID, ASSIGN_START_TIME, ASSIGN_FINISH_TIME」清空
            //「START_TIME, FINISH_TIME」，修改想要的日期

            //修改表單申請時間、表單內時間
            //TABLE:「TB_WKF_TASK」
            //用「DOC_NBR」找出表單
            //「BEGIN_TIME, END_TIME」，修改表單申請、完成時間
            //「CURRENT_DOC」，修改表單內申請時間

            //要指定客戶代號來產生「100A.客戶基本資料表」
            string MA001 = "A221400600";

            ADD_UOF_COPMA_100A(MA001);
        }
        private void button68_Click(object sender, EventArgs e)
        {
            //ERP客戶轉-1001客戶基本資料表
            ADD_UOF_COPMA_1001();
        }
        private void button69_Click(object sender, EventArgs e)
        {
            //已產生請購變更單並確認，但未產生採購變更單時，補產生採購變更單
            //不用，因為有發生「請購單變更單已確認，但是請購變更資料是錯誤的，就不用產生對應的採購變更單」

            //1-先找出UOF的請購變更單已核單，但是未產生採購變更單
            //2-ERP檢查是否已有同單號的採購變更單還未核準，未核準前不能重覆產生採購變更單
            //3-找出請購變更單相對所有的採購單
            //4-用請購變更單產生採購變更單(如果請購單已對到採購單)
            NEWPURTEPURTF_ERP();
        }
        private void button70_Click(object sender, EventArgs e)
        {
            //轉入POS活動折扣
            //已先在ERP建好POS活動折扣，並送單到UOF核準三
            NEW_POSET();
        }
        private void button71_Click(object sender, EventArgs e)
        {
            //門市-門市營業日誌-早午班
            //門市日誌-早班
            NEW_TBSTOREDAILY_MORNING();          
           
        }

        private void button72_Click(object sender, EventArgs e)
        {
            //ERP版費轉入TKPUR
            ADD_TKPUR_PURVERSIONSNUMS();
        }
        private void button73_Click(object sender, EventArgs e)
        {
            ADD_TKPUR_PURMODELSNUMS();
        }
        private void button74_Click(object sender, EventArgs e)
        {
            ADD_TK_ZINVMBBAKING();
        }
        private void button75_Click(object sender, EventArgs e)
        {
            ADD_TK_MOC_REPORTMOCBOMPROCESS_REPORTMOCBOMORIPROCESS();
        }
        private void button76_Click(object sender, EventArgs e)
        {
            ADD_UOFGAFIXSNEW();
        }
        private void button77_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.ASTI02.EndFormTrigger
            //找出在UOF的「ASTI02.資產資料建立作業」
            //做資產的確認

            UPDATE_ASTMB_ASTI02();
        }
        private void button78_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.ASTI06.EndFormTrigger
            //針對ERP的資產異動單做確認

            UPDATE_ASTTC_ASTI06();

        }
        private void button79_Click(object sender, EventArgs e)
        {
            //ERP託外進貨>轉入UOF簽核
            //PURMOCA2.進貨-託外進貨品質驗收單

            NEWPUR_MOCTH_MOCTI();
        }
        private void button80_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.ASTI07.EndFormTrigger
            //ASTI07.資產重估建立作業做確認

            UPDATE_ASTTC_ASTI07();
        }
        private void button81_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.ASTI08.EndFormTrigger
            //ERP-ACT08資產報廢

            UPDATE_ASTTC_ASTI08();
        }

        private void button82_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.ASTI09.EndFormTrigger
            //ERP-ACT09資產出售

            UPDATE_ASTTC_ASTI09();

        }
        private void button83_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.ASTI10.EndFormTrigger
            //ERP-ASTI10資產調整建立作業

            UPDATE_ASTTC_ASTI10();
        }
        private void button84_Click(object sender, EventArgs e)
        {
            //
            //ERP-ASTI11資產折舊

            UPDATE_ASTTC_ASTI11();
        }
        private void button85_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.ASTI12.EndFormTrigger
            //ERP-ASTI12資產移轉
            UPDATE_ASTTC_ASTI12();
        }
        private void button86_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.BOMI02.EndFormTrigger
            //ERP-BOM02.BOM表

            UPDATE_BOMMC_BOMI02();
        }

        private void button87_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.BOMI11.EndFormTrigger
            //ERP-BOMI11.EBOM表

            UPDATE_BOMMJ_BOMMK();
        }
        private void button88_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.BOMTATBTC.EndFormTrigger
            //ERP-BOM變更單核準

            UPDATE_MOCTA_BOMTB_BOMTC();

        }
        private void button89_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.COPMA1003.EndFormTrigger
            //1003.客戶信用額度變更申請單
            UPDATE_COMPA_1003();
        }
        private void button90_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.COPTAB.EndFormTrigger
            //ERP-COPTAB報價單簽核

            UPDATE_COPTA_COPTB();

        }
        private void button91_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.COPTCD.EndFormTrigger
            //ERP-COPTCD訂單主管簽核

            UPDATE_COPTC_COPTD();
        }
        private void button92_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.COPTCDMOCPUR.EndFormTrigger
            //訂單生管+採購簽核回寫備註


            UPDATE_COPTC_MOC_PUR();
        }
        private void button93_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.COPTEF.EndFormTrigger
            //ERP-COPTEF訂單變更主管簽核

            UPDATE_COPTE_COPTF();
        }
        private void button94_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.COPTEFMOCPUR.EndFormTrigger
            //ERP-訂單變更生管+採購簽核回寫備註

            UPDATE_COPTE_MOC_PUR();
        }
        private void button95_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.DEVSAMPLE.EndFormTrigger
            //1004.無品號試吃製作申請單
            //將1004.無品號試吃製作申請單轉到TKRESEARCH_TBSAMPLE中

            ADD_TKRESEARCH_TBSAMPLE();
        }
        private void button96_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.MOCI02.EndFormTrigger
            //ERP-MOCI02.製令單簽核

            UPDATE_MOCTA();

        }

        private void button97_Click(object sender, EventArgs e)
        {
            //TKUOF.TRIGGER.PURTAB.EndFormTrigger
            //ERP-PURTAB-請購單申請V2

            UPDATE_PURTA_PORTB(); 
        }

        private void button98_Click(object sender, EventArgs e)
        {
            //1要先有ERP的請購單
            //2用ERP的請購單，在外掛做請購變更單．並送簽
            //3在UOF簽核請購變更單
            //4ERP請購單依變更單修改
            //5在ERP採購單中檢查有沒有已建立的請購單，如果有同時建立採購變更單，並送簽採購變更單

            //注意，如果採購單已有未廳準的採購變更單，就不會自動產生新的採購變更單，會卡住

            //NEWPURTEPURTF_ERP(); 是只檢核有沒有產生採購變更單而已 
            //沒有使用，因為請購變更單的內容是錯誤或不用了，也不需要一且產生採購變更單

            //TKUOF.TRIGGER.PURTABCHANGE.EndFormTrigger
            //PUR20.請購單變更單

            UPDATE_PURTA_PURTB_CHANGE();
        }
        private void button99_Click(object sender, EventArgs e)
        {
            string MA001 = null;

            DataTable DT1 = FIND_SASLA_DEPT30("國內");
            DataTable DT2 = FIND_SASLA_DEPT30("國外");
            DataTable DT3 = FIND_SASLA_DEPT30("張協");

            //國內
            if (DT1!=null && DT1.Rows.Count>=1)
            {
                foreach(DataRow DR in DT1.Rows)
                {
                    MA001 = DR["LA006"].ToString();
                    ADD_UOF_COPMA_100A(MA001);
                }
            }

            //國外
            if (DT2 != null && DT2.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT2.Rows)
                {
                    MA001 = DR["LA006"].ToString();
                    ADD_UOF_COPMA_100A(MA001);
                }
            }

            //張協
            if (DT3 != null && DT3.Rows.Count >= 1)
            {
                foreach (DataRow DR in DT3.Rows)
                {
                    MA001 = DR["LA006"].ToString();
                    ADD_UOF_COPMA_100A(MA001);
                }
            }

            MessageBox.Show("OK");

        }
        private void button100_Click(object sender, EventArgs e)
        {
            //當請購單的數量=0，手動結案
            UPDATE_PURTA_PURTB_TB039();
            //當請購單的需求日，已過期1個月，請購數量=0，手動結案
            UPDATE_PURTA_PURTB_TB039_TB009();

            MessageBox.Show("OK");
        }
        private void button101_Click(object sender, EventArgs e)
        {
            //ERP-PURTCPURTD採購單簽核
            //TKUOF.TRIGGER.PURTCPURTD.EndFormTrigger

            UPDATE_PURTC_PURTD();
            MessageBox.Show("OK");
        }
        private void button102_Click(object sender, EventArgs e)
        {
            //UOF-採購及變更單作廢
            //依UOF作廢的採購及變更單，修改ERP的採購及變更單作廢
            UPDATE_UOF_NOT_APPROVED_PURTC_PURTE();
            MessageBox.Show("OK");
        }
        private void button103_Click(object sender, EventArgs e)
        {
            //ERP-PURTEPURTF採購變更單簽核
            //TKUOF.TRIGGER.PURTEPURTF.EndFormTrigger

            UPDATE_PURTE_PURTF();
            MessageBox.Show("OK");

        }
        private void button104_Click(object sender, EventArgs e)
        {
            //ERP-PURTLPURTMPURTN採購核價單
            //TKUOF.TRIGGER.PURTLPURTMPURTN.EndFormTrigger

            UPDATE_PURTL_PURTM_PURTN();
            MessageBox.Show("OK");
        }

        private void button105_Click(object sender, EventArgs e)
        {
            //PURA1.客供進貨-進貨品質驗收單
            //ERP-QCINVTAINVTB-QC客供單進貨檢驗
            //TKUOF.TRIGGER.QCINVTAINVTB.EndFormTrigger

            UPDATE_INVTB_QC_CHECKS();
            MessageBox.Show("OK");
        }

        private void button106_Click(object sender, EventArgs e)
        {
            //ERP-QCPURTGPURTH品保檢驗進貨單明細
            //TKUOF.TRIGGER.QCPURTGPURTH.EndFormTrigger

            UPDATE_PURTH_QC_CHECKS();
            MessageBox.Show("OK");
        }

        private void button107_Click(object sender, EventArgs e)
        {
            //轉入資料來客-X:\kldatabase.db
            //要指定來客記錄的db的磁碟-X:\kldatabase.db
            //X=\\192.168.1.101\Users\Administrator\AppData\Roaming\CounterServerData

            ADDTKMKt_visitors();
            MessageBox.Show("OK");
        }
        private void button108_Click(object sender, EventArgs e)
        {
            //ERP-訂單明細補生產預設=N
            //COPTD的UDF01，空白=N

            UPDATE_COPTD_UDF01();
            MessageBox.Show("OK");

        }
        private void button109_Click(object sender, EventArgs e)
        {
            //作廢請購變更單不存在
            //UOF的請購變更單來源，已經不存在[PURTATBCHAGE]
            //經採購人員確認是多打的才會刪除，用TKPUR的「FrmPURTECHANGEDEL 」 採購變更刪除錯的請購變更

            UPDATE_UOF_PUR20_TASK_RESULT();
            MessageBox.Show("OK");

        }

        private void button110_Click(object sender, EventArgs e)
        {
            //ERP品號通知單
            //此表單為研發建立商品品號時
            //通知營銷、業務主管
            //該品號在ERP設定的標準售價、零售價、IP價格、DM價格、通路售價

            //如需修改，請通知研發在ERP上修改

            ADD_ERP_INVMB_TO_UOF_9001();

        }
        private void button111_Click(object sender, EventArgs e)
        {
            //2001.產品開發+包裝設計申請單
            NEW_TO_TKRESEARCH_TB_PROJECTS_PRODUCTS();

        }
        private void button112_Click(object sender, EventArgs e)
        {
            //ERP品號變更通知單

            ADD_ERP_INVMB_TO_UOF_9002();
        }

        private void button113_Click(object sender, EventArgs e)
        {
            //2001A.產品開發+包裝設計申請單(行企專用)
            //原始來源=2001.產品開發+包裝設計申請單
            //當行企主管必需，先指定「指定設計人員(由行企主管指定)」
            ADD_UOF_FORM_2001A_TB_PROJECTS_PRODUCTS();
        }
        private void button114_Click(object sender, EventArgs e)
        {
            //更新 2001A.產品開發+包裝設計申請單(行企專用)
            UPDATE_TB_PROJECTS_PRODUCTS_DESIGNER();
        }

        private void button115_Click(object sender, EventArgs e)
        {
            //(重發)ERP進貨>轉入UOF
            //因為UOF從資料庫起單，有時會因UOF排程失敗，所以每1小時檢查起單失敗的進貨單，重發
            //更新UDF01=Y，就可以用  NEWPURTGPURTH() 重新起單
            NEWPURTGPURTH_AGAIN_APPLY();

            //客供重起單
            ADDUOFQCINVTAINVTB_AGAIN_APPLY();

            //託外進貨重起單
            NEWPUR_MOCTH_MOCTI_AGAIN_APPLY();

            MessageBox.Show("OK");
        }

        #endregion
    }
}
